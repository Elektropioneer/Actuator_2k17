
Actuator_2k17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00002030  000020c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002030  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  00800106  00800106  000020ca  2**0
                  ALLOC
  3 .stab         00002cb8  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144c  00000000  00000000  00004d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000061e4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a6 e0       	ldi	r26, 0x06	; 6
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a2 33       	cpi	r26, 0x32	; 50
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e3       	ldi	r30, 0x30	; 48
      b8:	f0 e2       	ldi	r31, 0x20	; 32
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a6 30       	cpi	r26, 0x06	; 6
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
      ca:	0e 94 10 09 	call	0x1220	; 0x1220 <main>
      ce:	0c 94 16 10 	jmp	0x202c	; 0x202c <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ball_grabbers>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the ball grabbers servos
 *	Help: 			to adjust parameters go to control.h
 */
static void ball_grabbers(unsigned char side, unsigned char state)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <ball_grabbers+0x6>
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	89 83       	std	Y+1, r24	; 0x01
      e2:	6a 83       	std	Y+2, r22	; 0x02
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	09 f5       	brne	.+66     	; 0x12c <ball_grabbers+0x56>
	{
		if(state == UP)
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	49 f4       	brne	.+18     	; 0x102 <ball_grabbers+0x2c>
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_LEFT);
      f0:	2a e0       	ldi	r18, 0x0A	; 10
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	60 ef       	ldi	r22, 0xF0	; 240
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	84 e0       	ldi	r24, 0x04	; 4
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     100:	35 c0       	rjmp	.+106    	; 0x16c <ball_grabbers+0x96>
		}
		else if(state == DOWN)
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	88 23       	and	r24, r24
     106:	49 f4       	brne	.+18     	; 0x11a <ball_grabbers+0x44>
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_LEFT);
     108:	2a e0       	ldi	r18, 0x0A	; 10
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	60 ef       	ldi	r22, 0xF0	; 240
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	84 e9       	ldi	r24, 0x94	; 148
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     118:	29 c0       	rjmp	.+82     	; 0x16c <ball_grabbers+0x96>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_MID, AX_SPEED_FAST, CW, ID_BALLGRABBER_LEFT);
     11a:	2a e0       	ldi	r18, 0x0A	; 10
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	60 ef       	ldi	r22, 0xF0	; 240
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	83 ef       	ldi	r24, 0xF3	; 243
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     12a:	20 c0       	rjmp	.+64     	; 0x16c <ball_grabbers+0x96>
		}
	}
	else
	{
		if(state == UP)
     12c:	8a 81       	ldd	r24, Y+2	; 0x02
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	49 f4       	brne	.+18     	; 0x144 <ball_grabbers+0x6e>
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_RIGHT);
     132:	23 e0       	ldi	r18, 0x03	; 3
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	60 ef       	ldi	r22, 0xF0	; 240
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	82 e8       	ldi	r24, 0x82	; 130
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     142:	14 c0       	rjmp	.+40     	; 0x16c <ball_grabbers+0x96>
		}
		else if(state == DOWN)
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	88 23       	and	r24, r24
     148:	49 f4       	brne	.+18     	; 0x15c <ball_grabbers+0x86>
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_RIGHT);
     14a:	23 e0       	ldi	r18, 0x03	; 3
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	60 ef       	ldi	r22, 0xF0	; 240
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	80 ef       	ldi	r24, 0xF0	; 240
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     15a:	08 c0       	rjmp	.+16     	; 0x16c <ball_grabbers+0x96>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_MID, AX_SPEED_FAST, CW, ID_BALLGRABBER_RIGHT);
     15c:	23 e0       	ldi	r18, 0x03	; 3
     15e:	40 e0       	ldi	r20, 0x00	; 0
     160:	60 ef       	ldi	r22, 0xF0	; 240
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	88 e9       	ldi	r24, 0x98	; 152
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
		}
	}
}
     16c:	0f 90       	pop	r0
     16e:	0f 90       	pop	r0
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <dispenser>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the dispensers position
 *	Help: 			to adjust parameters go to control.h
 */
static void dispenser(unsigned char side, unsigned char state)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <dispenser+0x6>
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	6a 83       	std	Y+2, r22	; 0x02
	// ! configure the ax servo id's in control.h file !
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	a9 f4       	brne	.+42     	; 0x1b4 <dispenser+0x3e>
	{
		if(state == UP)
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	49 f4       	brne	.+18     	; 0x1a2 <dispenser+0x2c>
		{
			AX_SetAngle(POS_DISPENSERLEFT_UP, AX_SPEED_SLOW, CW, ID_DISPENSER_LEFT);
     190:	22 e0       	ldi	r18, 0x02	; 2
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	64 e6       	ldi	r22, 0x64	; 100
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	81 ef       	ldi	r24, 0xF1	; 241
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     1a0:	1d c0       	rjmp	.+58     	; 0x1dc <dispenser+0x66>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERLEFT_DOWN, AX_SPEED_SLOW, CCW, ID_DISPENSER_LEFT);
     1a2:	22 e0       	ldi	r18, 0x02	; 2
     1a4:	41 e0       	ldi	r20, 0x01	; 1
     1a6:	64 e6       	ldi	r22, 0x64	; 100
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	86 e9       	ldi	r24, 0x96	; 150
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     1b2:	14 c0       	rjmp	.+40     	; 0x1dc <dispenser+0x66>
		}
	}
	else
	{
		if(state == UP)
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	49 f4       	brne	.+18     	; 0x1cc <dispenser+0x56>
		{
			AX_SetAngle(POS_DISPENSERRIGHT_UP, AX_SPEED_SLOW, CW, ID_DISPENSER_RIGHT);
     1ba:	24 e0       	ldi	r18, 0x04	; 4
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	64 e6       	ldi	r22, 0x64	; 100
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	8c e3       	ldi	r24, 0x3C	; 60
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
     1ca:	08 c0       	rjmp	.+16     	; 0x1dc <dispenser+0x66>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERRIGHT_DOWN, AX_SPEED_SLOW, CW, ID_DISPENSER_RIGHT);
     1cc:	24 e0       	ldi	r18, 0x04	; 4
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	64 e6       	ldi	r22, 0x64	; 100
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	86 e9       	ldi	r24, 0x96	; 150
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 ef 06 	call	0xdde	; 0xdde <AX_SetAngle>
		}
	}
}
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <mosfet>:
 *	Parameters: unsigned char side 	- which side diafram to control
 *				unsigned char state	- ON or OFF state
 *	Description: controls the mosfets that turn 12V on or off
 */
static void mosfet(unsigned char side, unsigned char state)
{
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <mosfet+0x6>
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	6a 83       	std	Y+2, r22	; 0x02
	if(side == LEFT)
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	69 f4       	brne	.+26     	; 0x214 <mosfet+0x2e>
	{
		if(state == ON)
     1fa:	8a 81       	ldd	r24, Y+2	; 0x02
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	29 f4       	brne	.+10     	; 0x20a <mosfet+0x24>
		{
			GPIO_OutputSet(pinE4);
     200:	80 91 2b 03 	lds	r24, 0x032B
     204:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <GPIO_OutputSet>
     208:	11 c0       	rjmp	.+34     	; 0x22c <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE4);
     20a:	80 91 2b 03 	lds	r24, 0x032B
     20e:	0e 94 17 0b 	call	0x162e	; 0x162e <GPIO_OutputReset>
     212:	0c c0       	rjmp	.+24     	; 0x22c <mosfet+0x46>
		}
	}
	else
	{
		if(state == ON)
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	29 f4       	brne	.+10     	; 0x224 <mosfet+0x3e>
		{
			GPIO_OutputSet(pinE5);
     21a:	80 91 2d 03 	lds	r24, 0x032D
     21e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <GPIO_OutputSet>
     222:	04 c0       	rjmp	.+8      	; 0x22c <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE5);
     224:	80 91 2d 03 	lds	r24, 0x032D
     228:	0e 94 17 0b 	call	0x162e	; 0x162e <GPIO_OutputReset>
		}
	}
}
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <motor>:

static void motor(unsigned char direction, int8_t pwm)
{
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <motor+0x6>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	6a 83       	std	Y+2, r22	; 0x02
	}
	else
	{

	}
}
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <action>:
 *	Function: 		void action(canMsg msg)
 *	Parameters: 	canMsg msg
 *	Description: 	decides actions on can msg received
 */
void action(canMsg msg)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	a6 97       	sbiw	r28, 0x26	; 38
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	0d 8f       	std	Y+29, r16	; 0x1d
     268:	1e 8f       	std	Y+30, r17	; 0x1e
     26a:	2f 8f       	std	Y+31, r18	; 0x1f
     26c:	38 a3       	std	Y+32, r19	; 0x20
     26e:	49 a3       	std	Y+33, r20	; 0x21
     270:	5a a3       	std	Y+34, r21	; 0x22
     272:	6b a3       	std	Y+35, r22	; 0x23
     274:	7c a3       	std	Y+36, r23	; 0x24
     276:	8d a3       	std	Y+37, r24	; 0x25
     278:	9e a3       	std	Y+38, r25	; 0x26
	ball_grabbers(LEFT, DOWN);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ball_grabbers>
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e8       	ldi	r25, 0x80	; 128
     286:	ab e3       	ldi	r26, 0x3B	; 59
     288:	b5 e4       	ldi	r27, 0x45	; 69
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	9a 83       	std	Y+2, r25	; 0x02
     28e:	ab 83       	std	Y+3, r26	; 0x03
     290:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e4       	ldi	r19, 0x40	; 64
     296:	4c e1       	ldi	r20, 0x1C	; 28
     298:	55 e4       	ldi	r21, 0x45	; 69
     29a:	69 81       	ldd	r22, Y+1	; 0x01
     29c:	7a 81       	ldd	r23, Y+2	; 0x02
     29e:	8b 81       	ldd	r24, Y+3	; 0x03
     2a0:	9c 81       	ldd	r25, Y+4	; 0x04
     2a2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	8d 83       	std	Y+5, r24	; 0x05
     2ac:	9e 83       	std	Y+6, r25	; 0x06
     2ae:	af 83       	std	Y+7, r26	; 0x07
     2b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e8       	ldi	r20, 0x80	; 128
     2b8:	5f e3       	ldi	r21, 0x3F	; 63
     2ba:	6d 81       	ldd	r22, Y+5	; 0x05
     2bc:	7e 81       	ldd	r23, Y+6	; 0x06
     2be:	8f 81       	ldd	r24, Y+7	; 0x07
     2c0:	98 85       	ldd	r25, Y+8	; 0x08
     2c2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__cmpsf2>
     2c6:	88 23       	and	r24, r24
     2c8:	2c f4       	brge	.+10     	; 0x2d4 <action+0x86>
		__ticks = 1;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	9a 87       	std	Y+10, r25	; 0x0a
     2d0:	89 87       	std	Y+9, r24	; 0x09
     2d2:	3f c0       	rjmp	.+126    	; 0x352 <action+0x104>
	else if (__tmp > 65535)
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	4f e7       	ldi	r20, 0x7F	; 127
     2da:	57 e4       	ldi	r21, 0x47	; 71
     2dc:	6d 81       	ldd	r22, Y+5	; 0x05
     2de:	7e 81       	ldd	r23, Y+6	; 0x06
     2e0:	8f 81       	ldd	r24, Y+7	; 0x07
     2e2:	98 85       	ldd	r25, Y+8	; 0x08
     2e4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	4c f5       	brge	.+82     	; 0x33e <action+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e2       	ldi	r20, 0x20	; 32
     2f2:	51 e4       	ldi	r21, 0x41	; 65
     2f4:	69 81       	ldd	r22, Y+1	; 0x01
     2f6:	7a 81       	ldd	r23, Y+2	; 0x02
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	9a 87       	std	Y+10, r25	; 0x0a
     312:	89 87       	std	Y+9, r24	; 0x09
     314:	0f c0       	rjmp	.+30     	; 0x334 <action+0xe6>
     316:	8a ef       	ldi	r24, 0xFA	; 250
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9c 87       	std	Y+12, r25	; 0x0c
     31c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     31e:	8b 85       	ldd	r24, Y+11	; 0x0b
     320:	9c 85       	ldd	r25, Y+12	; 0x0c
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <action+0xd4>
     326:	9c 87       	std	Y+12, r25	; 0x0c
     328:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     32a:	89 85       	ldd	r24, Y+9	; 0x09
     32c:	9a 85       	ldd	r25, Y+10	; 0x0a
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	9a 87       	std	Y+10, r25	; 0x0a
     332:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     334:	89 85       	ldd	r24, Y+9	; 0x09
     336:	9a 85       	ldd	r25, Y+10	; 0x0a
     338:	89 2b       	or	r24, r25
     33a:	69 f7       	brne	.-38     	; 0x316 <action+0xc8>
     33c:	14 c0       	rjmp	.+40     	; 0x366 <action+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     33e:	6d 81       	ldd	r22, Y+5	; 0x05
     340:	7e 81       	ldd	r23, Y+6	; 0x06
     342:	8f 81       	ldd	r24, Y+7	; 0x07
     344:	98 85       	ldd	r25, Y+8	; 0x08
     346:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	9a 87       	std	Y+10, r25	; 0x0a
     350:	89 87       	std	Y+9, r24	; 0x09
     352:	89 85       	ldd	r24, Y+9	; 0x09
     354:	9a 85       	ldd	r25, Y+10	; 0x0a
     356:	9e 87       	std	Y+14, r25	; 0x0e
     358:	8d 87       	std	Y+13, r24	; 0x0d
     35a:	8d 85       	ldd	r24, Y+13	; 0x0d
     35c:	9e 85       	ldd	r25, Y+14	; 0x0e
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <action+0x110>
     362:	9e 87       	std	Y+14, r25	; 0x0e
     364:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(3000);
	ball_grabbers(LEFT, MID);
     366:	64 e0       	ldi	r22, 0x04	; 4
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	0e 94 6b 00 	call	0xd6	; 0xd6 <ball_grabbers>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e8       	ldi	r25, 0x80	; 128
     372:	ab e3       	ldi	r26, 0x3B	; 59
     374:	b5 e4       	ldi	r27, 0x45	; 69
     376:	8f 87       	std	Y+15, r24	; 0x0f
     378:	98 8b       	std	Y+16, r25	; 0x10
     37a:	a9 8b       	std	Y+17, r26	; 0x11
     37c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e4       	ldi	r19, 0x40	; 64
     382:	4c e1       	ldi	r20, 0x1C	; 28
     384:	55 e4       	ldi	r21, 0x45	; 69
     386:	6f 85       	ldd	r22, Y+15	; 0x0f
     388:	78 89       	ldd	r23, Y+16	; 0x10
     38a:	89 89       	ldd	r24, Y+17	; 0x11
     38c:	9a 89       	ldd	r25, Y+18	; 0x12
     38e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	8b 8b       	std	Y+19, r24	; 0x13
     398:	9c 8b       	std	Y+20, r25	; 0x14
     39a:	ad 8b       	std	Y+21, r26	; 0x15
     39c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e8       	ldi	r20, 0x80	; 128
     3a4:	5f e3       	ldi	r21, 0x3F	; 63
     3a6:	6b 89       	ldd	r22, Y+19	; 0x13
     3a8:	7c 89       	ldd	r23, Y+20	; 0x14
     3aa:	8d 89       	ldd	r24, Y+21	; 0x15
     3ac:	9e 89       	ldd	r25, Y+22	; 0x16
     3ae:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__cmpsf2>
     3b2:	88 23       	and	r24, r24
     3b4:	2c f4       	brge	.+10     	; 0x3c0 <action+0x172>
		__ticks = 1;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	98 8f       	std	Y+24, r25	; 0x18
     3bc:	8f 8b       	std	Y+23, r24	; 0x17
     3be:	3f c0       	rjmp	.+126    	; 0x43e <action+0x1f0>
	else if (__tmp > 65535)
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	3f ef       	ldi	r19, 0xFF	; 255
     3c4:	4f e7       	ldi	r20, 0x7F	; 127
     3c6:	57 e4       	ldi	r21, 0x47	; 71
     3c8:	6b 89       	ldd	r22, Y+19	; 0x13
     3ca:	7c 89       	ldd	r23, Y+20	; 0x14
     3cc:	8d 89       	ldd	r24, Y+21	; 0x15
     3ce:	9e 89       	ldd	r25, Y+22	; 0x16
     3d0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     3d4:	18 16       	cp	r1, r24
     3d6:	4c f5       	brge	.+82     	; 0x42a <action+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e2       	ldi	r20, 0x20	; 32
     3de:	51 e4       	ldi	r21, 0x41	; 65
     3e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     3e2:	78 89       	ldd	r23, Y+16	; 0x10
     3e4:	89 89       	ldd	r24, Y+17	; 0x11
     3e6:	9a 89       	ldd	r25, Y+18	; 0x12
     3e8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     3ec:	dc 01       	movw	r26, r24
     3ee:	cb 01       	movw	r24, r22
     3f0:	bc 01       	movw	r22, r24
     3f2:	cd 01       	movw	r24, r26
     3f4:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	98 8f       	std	Y+24, r25	; 0x18
     3fe:	8f 8b       	std	Y+23, r24	; 0x17
     400:	0f c0       	rjmp	.+30     	; 0x420 <action+0x1d2>
     402:	8a ef       	ldi	r24, 0xFA	; 250
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	9a 8f       	std	Y+26, r25	; 0x1a
     408:	89 8f       	std	Y+25, r24	; 0x19
     40a:	89 8d       	ldd	r24, Y+25	; 0x19
     40c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <action+0x1c0>
     412:	9a 8f       	std	Y+26, r25	; 0x1a
     414:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     416:	8f 89       	ldd	r24, Y+23	; 0x17
     418:	98 8d       	ldd	r25, Y+24	; 0x18
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	98 8f       	std	Y+24, r25	; 0x18
     41e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     420:	8f 89       	ldd	r24, Y+23	; 0x17
     422:	98 8d       	ldd	r25, Y+24	; 0x18
     424:	89 2b       	or	r24, r25
     426:	69 f7       	brne	.-38     	; 0x402 <action+0x1b4>
     428:	14 c0       	rjmp	.+40     	; 0x452 <action+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     42a:	6b 89       	ldd	r22, Y+19	; 0x13
     42c:	7c 89       	ldd	r23, Y+20	; 0x14
     42e:	8d 89       	ldd	r24, Y+21	; 0x15
     430:	9e 89       	ldd	r25, Y+22	; 0x16
     432:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	98 8f       	std	Y+24, r25	; 0x18
     43c:	8f 8b       	std	Y+23, r24	; 0x17
     43e:	8f 89       	ldd	r24, Y+23	; 0x17
     440:	98 8d       	ldd	r25, Y+24	; 0x18
     442:	9c 8f       	std	Y+28, r25	; 0x1c
     444:	8b 8f       	std	Y+27, r24	; 0x1b
     446:	8b 8d       	ldd	r24, Y+27	; 0x1b
     448:	9c 8d       	ldd	r25, Y+28	; 0x1c
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <action+0x1fc>
     44e:	9c 8f       	std	Y+28, r25	; 0x1c
     450:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3000);
	ball_grabbers(LEFT, UP);
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 6b 00 	call	0xd6	; 0xd6 <ball_grabbers>
	while(1);
     45a:	ff cf       	rjmp	.-2      	; 0x45a <action+0x20c>

0000045c <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	00 90 5f 00 	lds	r0, 0x005F
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	00 90 5b 00 	lds	r0, 0x005B
     46c:	0f 92       	push	r0
     46e:	2f 93       	push	r18
     470:	3f 93       	push	r19
     472:	4f 93       	push	r20
     474:	5f 93       	push	r21
     476:	6f 93       	push	r22
     478:	7f 93       	push	r23
     47a:	8f 93       	push	r24
     47c:	9f 93       	push	r25
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <__vector_18+0x2c>
     488:	1f 92       	push	r1
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     48e:	8d ee       	ldi	r24, 0xED	; 237
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     498:	19 82       	std	Y+1, r1	; 0x01
     49a:	9f c0       	rjmp	.+318    	; 0x5da <__vector_18+0x17e>
	{
		CANPAGE = ch << 4;
     49c:	8d ee       	ldi	r24, 0xED	; 237
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	29 81       	ldd	r18, Y+1	; 0x01
     4a2:	22 95       	swap	r18
     4a4:	20 7f       	andi	r18, 0xF0	; 240
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18

		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
     4aa:	8e ee       	ldi	r24, 0xEE	; 238
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	fc 01       	movw	r30, r24
     4b0:	80 81       	ld	r24, Z
     4b2:	82 95       	swap	r24
     4b4:	86 95       	lsr	r24
     4b6:	87 70       	andi	r24, 0x07	; 7
     4b8:	88 2f       	mov	r24, r24
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	81 70       	andi	r24, 0x01	; 1
     4be:	99 27       	eor	r25, r25
     4c0:	89 2b       	or	r24, r25
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <__vector_18+0x6a>
     4c4:	6b c0       	rjmp	.+214    	; 0x59c <__vector_18+0x140>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     4c6:	8f ee       	ldi	r24, 0xEF	; 239
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	20 e8       	ldi	r18, 0x80	; 128
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     4d0:	8e ee       	ldi	r24, 0xEE	; 238
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	2e ee       	ldi	r18, 0xEE	; 238
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	2f 7d       	andi	r18, 0xDF	; 223
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18

			for(unsigned char i = 0; i < 8; i++)
     4e2:	1a 82       	std	Y+2, r1	; 0x02
     4e4:	1e c0       	rjmp	.+60     	; 0x522 <__vector_18+0xc6>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
     4e6:	80 91 fb 02 	lds	r24, 0x02FB
     4ea:	48 2f       	mov	r20, r24
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	28 2f       	mov	r18, r24
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	8a ef       	ldi	r24, 0xFA	; 250
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	fc 01       	movw	r30, r24
     4fa:	60 81       	ld	r22, Z
     4fc:	ca 01       	movw	r24, r20
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	ac 01       	movw	r20, r24
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	44 0f       	add	r20, r20
     50a:	55 1f       	adc	r21, r21
     50c:	84 0f       	add	r24, r20
     50e:	95 1f       	adc	r25, r21
     510:	82 0f       	add	r24, r18
     512:	93 1f       	adc	r25, r19
     514:	8a 5f       	subi	r24, 0xFA	; 250
     516:	9e 4f       	sbci	r25, 0xFE	; 254
     518:	fc 01       	movw	r30, r24
     51a:	60 83       	st	Z, r22
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			for(unsigned char i = 0; i < 8; i++)
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	8a 83       	std	Y+2, r24	; 0x02
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	88 30       	cpi	r24, 0x08	; 8
     526:	f8 f2       	brcs	.-66     	; 0x4e6 <__vector_18+0x8a>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);

			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
     528:	80 91 fb 02 	lds	r24, 0x02FB
     52c:	68 2f       	mov	r22, r24
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	82 ef       	ldi	r24, 0xF2	; 242
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	82 95       	swap	r24
     53a:	86 95       	lsr	r24
     53c:	87 70       	andi	r24, 0x07	; 7
     53e:	28 2f       	mov	r18, r24
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	83 ef       	ldi	r24, 0xF3	; 243
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	fc 01       	movw	r30, r24
     548:	80 81       	ld	r24, Z
     54a:	88 2f       	mov	r24, r24
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	82 2b       	or	r24, r18
     55c:	93 2b       	or	r25, r19
     55e:	ac 01       	movw	r20, r24
     560:	cb 01       	movw	r24, r22
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	9c 01       	movw	r18, r24
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	82 0f       	add	r24, r18
     572:	93 1f       	adc	r25, r19
     574:	82 5f       	subi	r24, 0xF2	; 242
     576:	9e 4f       	sbci	r25, 0xFE	; 254
     578:	fc 01       	movw	r30, r24
     57a:	51 83       	std	Z+1, r21	; 0x01
     57c:	40 83       	st	Z, r20

			if(++rxWrIndex == RX_BUFFER_SIZE)
     57e:	80 91 fb 02 	lds	r24, 0x02FB
     582:	8f 5f       	subi	r24, 0xFF	; 255
     584:	80 93 fb 02 	sts	0x02FB, r24
     588:	82 33       	cpi	r24, 0x32	; 50
     58a:	11 f4       	brne	.+4      	; 0x590 <__vector_18+0x134>
				rxWrIndex = 0;
     58c:	10 92 fb 02 	sts	0x02FB, r1

			rxCounter++;
     590:	80 91 fc 02 	lds	r24, 0x02FC
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 fc 02 	sts	0x02FC, r24

			//brPrimljenih1++;

			break;
     59a:	23 c0       	rjmp	.+70     	; 0x5e2 <__vector_18+0x186>
		}

		// proveravam da li je uspesno poslat podatak (ako je MOb bio podesen kao predajnik)
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
     59c:	8e ee       	ldi	r24, 0xEE	; 238
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	fc 01       	movw	r30, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	82 95       	swap	r24
     5a6:	86 95       	lsr	r24
     5a8:	86 95       	lsr	r24
     5aa:	83 70       	andi	r24, 0x03	; 3
     5ac:	88 2f       	mov	r24, r24
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	81 70       	andi	r24, 0x01	; 1
     5b2:	99 27       	eor	r25, r25
     5b4:	89 2b       	or	r24, r25
     5b6:	71 f0       	breq	.+28     	; 0x5d4 <__vector_18+0x178>
		{
			CANCDMOB = 0; // disable mob
     5b8:	8f ee       	ldi	r24, 0xEF	; 239
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	fc 01       	movw	r30, r24
     5be:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     5c0:	8e ee       	ldi	r24, 0xEE	; 238
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	2e ee       	ldi	r18, 0xEE	; 238
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	2f 7b       	andi	r18, 0xBF	; 191
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 83       	st	Z, r18

			break;
     5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <__vector_18+0x186>
{
	unsigned char tempPage = CANPAGE;
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	89 83       	std	Y+1, r24	; 0x01
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	8f 30       	cpi	r24, 0x0F	; 15
     5de:	08 f4       	brcc	.+2      	; 0x5e2 <__vector_18+0x186>
     5e0:	5d cf       	rjmp	.-326    	; 0x49c <__vector_18+0x40>

			break;
		}
	}

	CANPAGE = tempPage;
     5e2:	8d ee       	ldi	r24, 0xED	; 237
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	2b 81       	ldd	r18, Y+3	; 0x03
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // jako retardirano
}
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	9f 91       	pop	r25
     5fc:	8f 91       	pop	r24
     5fe:	7f 91       	pop	r23
     600:	6f 91       	pop	r22
     602:	5f 91       	pop	r21
     604:	4f 91       	pop	r20
     606:	3f 91       	pop	r19
     608:	2f 91       	pop	r18
     60a:	0f 90       	pop	r0
     60c:	00 92 5b 00 	sts	0x005B, r0
     610:	0f 90       	pop	r0
     612:	00 92 5f 00 	sts	0x005F, r0
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <CAN_Init>:
					  Podrazumeva se da je frekvencija kontrolera 10MHz
* Parameters        : None
* Return Value      : void
*********************************************************************************/
void CAN_Init(void)
{
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	00 d0       	rcall	.+0      	; 0x622 <CAN_Init+0x6>
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     626:	88 ed       	ldi	r24, 0xD8	; 216
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     630:	19 82       	std	Y+1, r1	; 0x01
     632:	3e c0       	rjmp	.+124    	; 0x6b0 <CAN_Init+0x94>
	{
		CANPAGE = ch << 4;
     634:	8d ee       	ldi	r24, 0xED	; 237
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	29 81       	ldd	r18, Y+1	; 0x01
     63a:	22 95       	swap	r18
     63c:	20 7f       	andi	r18, 0xF0	; 240
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18

		CANSTMOB = 0;
     642:	8e ee       	ldi	r24, 0xEE	; 238
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	fc 01       	movw	r30, r24
     648:	10 82       	st	Z, r1
		CANCDMOB = 0;
     64a:	8f ee       	ldi	r24, 0xEF	; 239
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	fc 01       	movw	r30, r24
     650:	10 82       	st	Z, r1

		CANIDT1 = 0;
     652:	83 ef       	ldi	r24, 0xF3	; 243
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	fc 01       	movw	r30, r24
     658:	10 82       	st	Z, r1
		CANIDT2 = 0;
     65a:	82 ef       	ldi	r24, 0xF2	; 242
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	10 82       	st	Z, r1
		CANIDT3 = 0;
     662:	81 ef       	ldi	r24, 0xF1	; 241
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	fc 01       	movw	r30, r24
     668:	10 82       	st	Z, r1
		CANIDT4 = 0;
     66a:	80 ef       	ldi	r24, 0xF0	; 240
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	10 82       	st	Z, r1
		CANIDM1 = 0;
     672:	87 ef       	ldi	r24, 0xF7	; 247
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	fc 01       	movw	r30, r24
     678:	10 82       	st	Z, r1
		CANIDM2 = 0;
     67a:	86 ef       	ldi	r24, 0xF6	; 246
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	fc 01       	movw	r30, r24
     680:	10 82       	st	Z, r1
		CANIDM3 = 0;
     682:	85 ef       	ldi	r24, 0xF5	; 245
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	fc 01       	movw	r30, r24
     688:	10 82       	st	Z, r1
		CANIDM4 = 0;
     68a:	84 ef       	ldi	r24, 0xF4	; 244
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	fc 01       	movw	r30, r24
     690:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     692:	1a 82       	std	Y+2, r1	; 0x02
     694:	07 c0       	rjmp	.+14     	; 0x6a4 <CAN_Init+0x88>
			CANMSG = 0;
     696:	8a ef       	ldi	r24, 0xFA	; 250
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	fc 01       	movw	r30, r24
     69c:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	8f 5f       	subi	r24, 0xFF	; 255
     6a2:	8a 83       	std	Y+2, r24	; 0x02
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	88 30       	cpi	r24, 0x08	; 8
     6a8:	b0 f3       	brcs	.-20     	; 0x696 <CAN_Init+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	8f 30       	cpi	r24, 0x0F	; 15
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <CAN_Init+0x9c>
     6b6:	be cf       	rjmp	.-132    	; 0x634 <CAN_Init+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     6b8:	88 ed       	ldi	r24, 0xD8	; 216
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	22 e0       	ldi	r18, 0x02	; 2
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     6c2:	82 ee       	ldi	r24, 0xE2	; 226
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2) | (1 << PRS0); // Propagation Time Segment-> 6xTq-> BILO 5
     6cc:	83 ee       	ldi	r24, 0xE3	; 227
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	2a e0       	ldi	r18, 0x0A	; 10
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS21) /*| (1 << PHS20) */| (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 7xTq, Phase Segment 1-> 8xTq
     6d6:	84 ee       	ldi	r24, 0xE4	; 228
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	2e e6       	ldi	r18, 0x6E	; 110
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     6e0:	85 ee       	ldi	r24, 0xE5	; 229
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	fc 01       	movw	r30, r24
     6e6:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     6e8:	8b ed       	ldi	r24, 0xDB	; 219
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	20 eb       	ldi	r18, 0xB0	; 176
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     6f2:	8f ed       	ldi	r24, 0xDF	; 223
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	2f e7       	ldi	r18, 0x7F	; 127
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     6fc:	8e ed       	ldi	r24, 0xDE	; 222
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	2f ef       	ldi	r18, 0xFF	; 255
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18

	//sei();
}
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <CAN_InitRxMob>:
					  ide. U slucaju neuspesne inicijalizacije MOb- a vraca 0
* Parameters        : unsigned int ide
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	00 d0       	rcall	.+0      	; 0x716 <CAN_InitRxMob+0x6>
     716:	00 d0       	rcall	.+0      	; 0x718 <CAN_InitRxMob+0x8>
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	9c 83       	std	Y+4, r25	; 0x04
     71e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     720:	8d ee       	ldi	r24, 0xED	; 237
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	80 81       	ld	r24, Z
     728:	8a 83       	std	Y+2, r24	; 0x02

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     72a:	00 00       	nop
     72c:	89 ed       	ldi	r24, 0xD9	; 217
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	82 95       	swap	r24
     736:	8f 70       	andi	r24, 0x0F	; 15
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	81 70       	andi	r24, 0x01	; 1
     73e:	99 27       	eor	r25, r25
     740:	89 2b       	or	r24, r25
     742:	a1 f7       	brne	.-24     	; 0x72c <CAN_InitRxMob+0x1c>
     744:	89 ed       	ldi	r24, 0xD9	; 217
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	80 81       	ld	r24, Z
     74c:	86 95       	lsr	r24
     74e:	86 95       	lsr	r24
     750:	86 95       	lsr	r24
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	81 70       	andi	r24, 0x01	; 1
     758:	99 27       	eor	r25, r25
     75a:	89 2b       	or	r24, r25
     75c:	39 f7       	brne	.-50     	; 0x72c <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     75e:	19 82       	std	Y+1, r1	; 0x01
     760:	4a c0       	rjmp	.+148    	; 0x7f6 <CAN_InitRxMob+0xe6>
	{
		CANPAGE = ch << 4;
     762:	8d ee       	ldi	r24, 0xED	; 237
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	29 81       	ldd	r18, Y+1	; 0x01
     768:	22 95       	swap	r18
     76a:	20 7f       	andi	r18, 0xF0	; 240
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     770:	8f ee       	ldi	r24, 0xEF	; 239
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	fc 01       	movw	r30, r24
     776:	80 81       	ld	r24, Z
     778:	82 95       	swap	r24
     77a:	86 95       	lsr	r24
     77c:	86 95       	lsr	r24
     77e:	83 70       	andi	r24, 0x03	; 3
     780:	88 23       	and	r24, r24
     782:	21 f0       	breq	.+8      	; 0x78c <CAN_InitRxMob+0x7c>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	8f 5f       	subi	r24, 0xFF	; 255
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	35 c0       	rjmp	.+106    	; 0x7f6 <CAN_InitRxMob+0xe6>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     78c:	8f ee       	ldi	r24, 0xEF	; 239
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	2f e0       	ldi	r18, 0x0F	; 15
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     796:	83 ef       	ldi	r24, 0xF3	; 243
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	2b 81       	ldd	r18, Y+3	; 0x03
     79c:	3c 81       	ldd	r19, Y+4	; 0x04
     79e:	33 27       	eor	r19, r19
     7a0:	36 95       	lsr	r19
     7a2:	27 95       	ror	r18
     7a4:	36 95       	lsr	r19
     7a6:	27 95       	ror	r18
     7a8:	36 95       	lsr	r19
     7aa:	27 95       	ror	r18
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     7b0:	82 ef       	ldi	r24, 0xF2	; 242
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	2b 81       	ldd	r18, Y+3	; 0x03
     7b6:	22 95       	swap	r18
     7b8:	22 0f       	add	r18, r18
     7ba:	20 7e       	andi	r18, 0xE0	; 224
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     7c0:	86 ef       	ldi	r24, 0xF6	; 246
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	20 ee       	ldi	r18, 0xE0	; 224
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     7ca:	87 ef       	ldi	r24, 0xF7	; 247
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	2f ef       	ldi	r18, 0xFF	; 255
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     7d4:	8f ee       	ldi	r24, 0xEF	; 239
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	2f ee       	ldi	r18, 0xEF	; 239
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	20 81       	ld	r18, Z
     7e0:	20 68       	ori	r18, 0x80	; 128
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
		sei();
     7e6:	78 94       	sei
		CANPAGE = tempPage;
     7e8:	8d ee       	ldi	r24, 0xED	; 237
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	2a 81       	ldd	r18, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18

		return 1;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0a c0       	rjmp	.+20     	; 0x80a <CAN_InitRxMob+0xfa>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	8f 30       	cpi	r24, 0x0F	; 15
     7fa:	08 f4       	brcc	.+2      	; 0x7fe <CAN_InitRxMob+0xee>
     7fc:	b2 cf       	rjmp	.-156    	; 0x762 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     7fe:	8d ee       	ldi	r24, 0xED	; 237
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2a 81       	ldd	r18, Y+2	; 0x02
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18

	return 0;
     808:	80 e0       	ldi	r24, 0x00	; 0
}
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <CAN_checkRX>:
					  Ako ima vraca 1, u suprotnom vraca 0
* Parameters        : None
* Return Value      : char info da li ima primljenih podataka
*********************************************************************************/
char CAN_checkRX(void)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
	if(rxCounter)
     820:	80 91 fc 02 	lds	r24, 0x02FC
     824:	88 23       	and	r24, r24
     826:	11 f0       	breq	.+4      	; 0x82c <CAN_checkRX+0x14>
		return 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	01 c0       	rjmp	.+2      	; 0x82e <CAN_checkRX+0x16>

	return 0;
     82c:	80 e0       	ldi	r24, 0x00	; 0
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	00 d0       	rcall	.+0      	; 0x83a <CAN_read+0x6>
     83a:	1f 92       	push	r1
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	9b 83       	std	Y+3, r25	; 0x03
     842:	8a 83       	std	Y+2, r24	; 0x02
	// sve dok ne stigne neki podatak ostajem u funkciji

	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
     844:	00 00       	nop
     846:	80 91 fc 02 	lds	r24, 0x02FC
     84a:	88 23       	and	r24, r24
     84c:	e1 f3       	breq	.-8      	; 0x846 <CAN_read+0x12>
	cli();
     84e:	f8 94       	cli
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     850:	19 82       	std	Y+1, r1	; 0x01
     852:	22 c0       	rjmp	.+68     	; 0x898 <CAN_read+0x64>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	28 2f       	mov	r18, r24
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	80 91 fa 02 	lds	r24, 0x02FA
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	49 81       	ldd	r20, Y+1	; 0x01
     864:	44 2f       	mov	r20, r20
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	bc 01       	movw	r22, r24
     86e:	66 0f       	add	r22, r22
     870:	77 1f       	adc	r23, r23
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	86 0f       	add	r24, r22
     878:	97 1f       	adc	r25, r23
     87a:	84 0f       	add	r24, r20
     87c:	95 1f       	adc	r25, r21
     87e:	8a 5f       	subi	r24, 0xFA	; 250
     880:	9e 4f       	sbci	r25, 0xFE	; 254
     882:	fc 01       	movw	r30, r24
     884:	40 81       	ld	r20, Z
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	9b 81       	ldd	r25, Y+3	; 0x03
     88a:	82 0f       	add	r24, r18
     88c:	93 1f       	adc	r25, r19
     88e:	fc 01       	movw	r30, r24
     890:	40 83       	st	Z, r20
	while(rxCounter == 0);
	cli();
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	88 30       	cpi	r24, 0x08	; 8
     89c:	d8 f2       	brcs	.-74     	; 0x854 <CAN_read+0x20>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];

	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
     89e:	80 91 fa 02 	lds	r24, 0x02FA
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	9c 01       	movw	r18, r24
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	82 0f       	add	r24, r18
     8b6:	93 1f       	adc	r25, r19
     8b8:	82 5f       	subi	r24, 0xF2	; 242
     8ba:	9e 4f       	sbci	r25, 0xFE	; 254
     8bc:	fc 01       	movw	r30, r24
     8be:	20 81       	ld	r18, Z
     8c0:	31 81       	ldd	r19, Z+1	; 0x01
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	9b 81       	ldd	r25, Y+3	; 0x03
     8c6:	fc 01       	movw	r30, r24
     8c8:	31 87       	std	Z+9, r19	; 0x09
     8ca:	20 87       	std	Z+8, r18	; 0x08

	if(++rxRdIndex == RX_BUFFER_SIZE)
     8cc:	80 91 fa 02 	lds	r24, 0x02FA
     8d0:	8f 5f       	subi	r24, 0xFF	; 255
     8d2:	80 93 fa 02 	sts	0x02FA, r24
     8d6:	82 33       	cpi	r24, 0x32	; 50
     8d8:	11 f4       	brne	.+4      	; 0x8de <CAN_read+0xaa>
		rxRdIndex = 0;
     8da:	10 92 fa 02 	sts	0x02FA, r1


	rxCounter--;
     8de:	80 91 fc 02 	lds	r24, 0x02FC
     8e2:	81 50       	subi	r24, 0x01	; 1
     8e4:	80 93 fc 02 	sts	0x02FC, r24
	sei();
     8e8:	78 94       	sei
}
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <CAN_write>:
					  identifikator messIdentificator.
* Parameters        : canMgs txData
* Return Value      : void
*********************************************************************************/
char CAN_write(canMsg txData)
{
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	2d 97       	sbiw	r28, 0x0d	; 13
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	0c 83       	std	Y+4, r16	; 0x04
     910:	1d 83       	std	Y+5, r17	; 0x05
     912:	2e 83       	std	Y+6, r18	; 0x06
     914:	3f 83       	std	Y+7, r19	; 0x07
     916:	48 87       	std	Y+8, r20	; 0x08
     918:	59 87       	std	Y+9, r21	; 0x09
     91a:	6a 87       	std	Y+10, r22	; 0x0a
     91c:	7b 87       	std	Y+11, r23	; 0x0b
     91e:	8c 87       	std	Y+12, r24	; 0x0c
     920:	9d 87       	std	Y+13, r25	; 0x0d
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     922:	00 00       	nop
     924:	89 ed       	ldi	r24, 0xD9	; 217
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	82 95       	swap	r24
     92e:	8f 70       	andi	r24, 0x0F	; 15
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	81 70       	andi	r24, 0x01	; 1
     936:	99 27       	eor	r25, r25
     938:	89 2b       	or	r24, r25
     93a:	a1 f7       	brne	.-24     	; 0x924 <CAN_write+0x2e>
     93c:	89 ed       	ldi	r24, 0xD9	; 217
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	86 95       	lsr	r24
     946:	86 95       	lsr	r24
     948:	86 95       	lsr	r24
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	81 70       	andi	r24, 0x01	; 1
     950:	99 27       	eor	r25, r25
     952:	89 2b       	or	r24, r25
     954:	39 f7       	brne	.-50     	; 0x924 <CAN_write+0x2e>
	//taskENTER_CRITICAL();
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     956:	8d ee       	ldi	r24, 0xED	; 237
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	fc 01       	movw	r30, r24
     95c:	80 81       	ld	r24, Z
     95e:	8b 83       	std	Y+3, r24	; 0x03

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     960:	19 82       	std	Y+1, r1	; 0x01
     962:	15 c0       	rjmp	.+42     	; 0x98e <CAN_write+0x98>
	{
		CANPAGE = ch << 4;
     964:	8d ee       	ldi	r24, 0xED	; 237
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	29 81       	ldd	r18, Y+1	; 0x01
     96a:	22 95       	swap	r18
     96c:	20 7f       	andi	r18, 0xF0	; 240
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     972:	8f ee       	ldi	r24, 0xEF	; 239
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	fc 01       	movw	r30, r24
     978:	80 81       	ld	r24, Z
     97a:	82 95       	swap	r24
     97c:	86 95       	lsr	r24
     97e:	86 95       	lsr	r24
     980:	83 70       	andi	r24, 0x03	; 3
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <CAN_write+0x92>
			break;
     986:	06 c0       	rjmp	.+12     	; 0x994 <CAN_write+0x9e>

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	8f 30       	cpi	r24, 0x0F	; 15
     992:	40 f3       	brcs	.-48     	; 0x964 <CAN_write+0x6e>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	8f 30       	cpi	r24, 0x0F	; 15
     998:	11 f4       	brne	.+4      	; 0x99e <CAN_write+0xa8>
	{
		//taskEXIT_CRITICAL();

		return 0;
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	3f c0       	rjmp	.+126    	; 0xa1c <CAN_write+0x126>
	}

	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (txData.msgIde & 0x0F) << 5;
     99e:	82 ef       	ldi	r24, 0xF2	; 242
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	2c 85       	ldd	r18, Y+12	; 0x0c
     9a4:	3d 85       	ldd	r19, Y+13	; 0x0d
     9a6:	22 95       	swap	r18
     9a8:	22 0f       	add	r18, r18
     9aa:	20 7e       	andi	r18, 0xE0	; 224
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
	CANIDT1 = (txData.msgIde) >> 3;
     9b0:	83 ef       	ldi	r24, 0xF3	; 243
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	2c 85       	ldd	r18, Y+12	; 0x0c
     9b6:	3d 85       	ldd	r19, Y+13	; 0x0d
     9b8:	36 95       	lsr	r19
     9ba:	27 95       	ror	r18
     9bc:	36 95       	lsr	r19
     9be:	27 95       	ror	r18
     9c0:	36 95       	lsr	r19
     9c2:	27 95       	ror	r18
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     9c8:	8f ee       	ldi	r24, 0xEF	; 239
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	28 e0       	ldi	r18, 0x08	; 8
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <CAN_write+0x102>
		CANMSG = txData.data[i];
     9d6:	8a ef       	ldi	r24, 0xFA	; 250
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	2a 81       	ldd	r18, Y+2	; 0x02
     9dc:	22 2f       	mov	r18, r18
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	ae 01       	movw	r20, r28
     9e2:	4c 5f       	subi	r20, 0xFC	; 252
     9e4:	5f 4f       	sbci	r21, 0xFF	; 255
     9e6:	24 0f       	add	r18, r20
     9e8:	35 1f       	adc	r19, r21
     9ea:	f9 01       	movw	r30, r18
     9ec:	20 81       	ld	r18, Z
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	8a 83       	std	Y+2, r24	; 0x02
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	88 30       	cpi	r24, 0x08	; 8
     9fc:	60 f3       	brcs	.-40     	; 0x9d6 <CAN_write+0xe0>
		CANMSG = txData.data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     9fe:	8f ee       	ldi	r24, 0xEF	; 239
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	2f ee       	ldi	r18, 0xEF	; 239
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	20 64       	ori	r18, 0x40	; 64
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     a10:	8d ee       	ldi	r24, 0xED	; 237
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	2b 81       	ldd	r18, Y+3	; 0x03
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18

	//taskEXIT_CRITICAL();

	return 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
}
     a1c:	2d 96       	adiw	r28, 0x0d	; 13
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <TIMER3_Init>:

#define SPEED_H 0x02
#define SPEED_L 0x00

void TIMER3_Init(unsigned int f_pwm)
{
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <TIMER3_Init+0xa>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     a44:	8d e2       	ldi	r24, 0x2D	; 45
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	2d e2       	ldi	r18, 0x2D	; 45
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	28 63       	ori	r18, 0x38	; 56
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18

	TCNT3 = 0;
     a56:	84 e9       	ldi	r24, 0x94	; 148
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc 01       	movw	r30, r24
     a5c:	11 82       	std	Z+1, r1	; 0x01
     a5e:	10 82       	st	Z, r1
	OCR3A = 0;
     a60:	88 e9       	ldi	r24, 0x98	; 152
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	fc 01       	movw	r30, r24
     a66:	11 82       	std	Z+1, r1	; 0x01
     a68:	10 82       	st	Z, r1
	OCR3B = 0;
     a6a:	8a e9       	ldi	r24, 0x9A	; 154
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	fc 01       	movw	r30, r24
     a70:	11 82       	std	Z+1, r1	; 0x01
     a72:	10 82       	st	Z, r1
	OCR3C = 0;
     a74:	8c e9       	ldi	r24, 0x9C	; 156
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	fc 01       	movw	r30, r24
     a7a:	11 82       	std	Z+1, r1	; 0x01
     a7c:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     a7e:	80 e9       	ldi	r24, 0x90	; 144
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	2e e3       	ldi	r18, 0x3E	; 62
     a84:	fc 01       	movw	r30, r24
     a86:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS30); // PRESKALER = 1
     a88:	81 e9       	ldi	r24, 0x91	; 145
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	29 e1       	ldi	r18, 0x19	; 25
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
	ICR3 = (double)F_CPU / f_pwm - 0.5;
     a92:	06 e9       	ldi	r16, 0x96	; 150
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	cc 01       	movw	r24, r24
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__floatunsisf>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9c 01       	movw	r18, r24
     aae:	ad 01       	movw	r20, r26
     ab0:	60 e8       	ldi	r22, 0x80	; 128
     ab2:	76 e9       	ldi	r23, 0x96	; 150
     ab4:	88 e1       	ldi	r24, 0x18	; 24
     ab6:	9b e4       	ldi	r25, 0x4B	; 75
     ab8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__divsf3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	5f e3       	ldi	r21, 0x3F	; 63
     ac8:	bc 01       	movw	r22, r24
     aca:	cd 01       	movw	r24, r26
     acc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__subsf3>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	bc 01       	movw	r22, r24
     ad6:	cd 01       	movw	r24, r26
     ad8:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	f8 01       	movw	r30, r16
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	80 83       	st	Z, r24
}
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	08 95       	ret

00000af4 <TIMER1_Init>:

void TIMER1_Init(void)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = (1 << WGM01) | (1 << CS02);
     afc:	84 e4       	ldi	r24, 0x44	; 68
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	2c e0       	ldi	r18, 0x0C	; 12
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);
     b06:	8e e6       	ldi	r24, 0x6E	; 110
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	2e e6       	ldi	r18, 0x6E	; 110
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	22 60       	ori	r18, 0x02	; 2
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
	OCR0A = 43;
     b18:	87 e4       	ldi	r24, 0x47	; 71
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	2b e2       	ldi	r18, 0x2B	; 43
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18

	SREG |= 0x80;
     b22:	8f e5       	ldi	r24, 0x5F	; 95
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	2f e5       	ldi	r18, 0x5F	; 95
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	f9 01       	movw	r30, r18
     b2c:	20 81       	ld	r18, Z
     b2e:	20 68       	ori	r18, 0x80	; 128
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
}
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <AX_UART_Init>:

void AX_UART_Init(void)
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	2e 97       	sbiw	r28, 0x0e	; 14
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRE &= ~((1 << 0x00) | (1 << 0x01));
     b4e:	8d e2       	ldi	r24, 0x2D	; 45
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	2d e2       	ldi	r18, 0x2D	; 45
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	f9 01       	movw	r30, r18
     b58:	20 81       	ld	r18, Z
     b5a:	2c 7f       	andi	r18, 0xFC	; 252
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR0A = 0;
     b60:	80 ec       	ldi	r24, 0xC0	; 192
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	fc 01       	movw	r30, r24
     b66:	10 82       	st	Z, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     b68:	81 ec       	ldi	r24, 0xC1	; 193
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	28 e1       	ldi	r18, 0x18	; 24
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
     b72:	82 ec       	ldi	r24, 0xC2	; 194
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	26 e0       	ldi	r18, 0x06	; 6
     b78:	fc 01       	movw	r30, r24
     b7a:	20 83       	st	Z, r18

	UBRR0H = 0;
     b7c:	85 ec       	ldi	r24, 0xC5	; 197
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	fc 01       	movw	r30, r24
     b82:	10 82       	st	Z, r1
	UBRR0L = 5;
     b84:	84 ec       	ldi	r24, 0xC4	; 196
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	25 e0       	ldi	r18, 0x05	; 5
     b8a:	fc 01       	movw	r30, r24
     b8c:	20 83       	st	Z, r18
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a8 ec       	ldi	r26, 0xC8	; 200
     b94:	b2 e4       	ldi	r27, 0x42	; 66
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	9a 83       	std	Y+2, r25	; 0x02
     b9a:	ab 83       	std	Y+3, r26	; 0x03
     b9c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e4       	ldi	r19, 0x40	; 64
     ba2:	4c e1       	ldi	r20, 0x1C	; 28
     ba4:	55 e4       	ldi	r21, 0x45	; 69
     ba6:	69 81       	ldd	r22, Y+1	; 0x01
     ba8:	7a 81       	ldd	r23, Y+2	; 0x02
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	9e 83       	std	Y+6, r25	; 0x06
     bba:	af 83       	std	Y+7, r26	; 0x07
     bbc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e8       	ldi	r20, 0x80	; 128
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	6d 81       	ldd	r22, Y+5	; 0x05
     bc8:	7e 81       	ldd	r23, Y+6	; 0x06
     bca:	8f 81       	ldd	r24, Y+7	; 0x07
     bcc:	98 85       	ldd	r25, Y+8	; 0x08
     bce:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__cmpsf2>
     bd2:	88 23       	and	r24, r24
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <AX_UART_Init+0xa6>
		__ticks = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9a 87       	std	Y+10, r25	; 0x0a
     bdc:	89 87       	std	Y+9, r24	; 0x09
     bde:	3f c0       	rjmp	.+126    	; 0xc5e <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	57 e4       	ldi	r21, 0x47	; 71
     be8:	6d 81       	ldd	r22, Y+5	; 0x05
     bea:	7e 81       	ldd	r23, Y+6	; 0x06
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	4c f5       	brge	.+82     	; 0xc4a <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e2       	ldi	r20, 0x20	; 32
     bfe:	51 e4       	ldi	r21, 0x41	; 65
     c00:	69 81       	ldd	r22, Y+1	; 0x01
     c02:	7a 81       	ldd	r23, Y+2	; 0x02
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	9a 87       	std	Y+10, r25	; 0x0a
     c1e:	89 87       	std	Y+9, r24	; 0x09
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <AX_UART_Init+0x106>
     c22:	8a ef       	ldi	r24, 0xFA	; 250
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9c 87       	std	Y+12, r25	; 0x0c
     c28:	8b 87       	std	Y+11, r24	; 0x0b
     c2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <AX_UART_Init+0xf4>
     c32:	9c 87       	std	Y+12, r25	; 0x0c
     c34:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	89 85       	ldd	r24, Y+9	; 0x09
     c38:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9a 87       	std	Y+10, r25	; 0x0a
     c3e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	89 2b       	or	r24, r25
     c46:	69 f7       	brne	.-38     	; 0xc22 <AX_UART_Init+0xe8>
     c48:	14 c0       	rjmp	.+40     	; 0xc72 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4a:	6d 81       	ldd	r22, Y+5	; 0x05
     c4c:	7e 81       	ldd	r23, Y+6	; 0x06
     c4e:	8f 81       	ldd	r24, Y+7	; 0x07
     c50:	98 85       	ldd	r25, Y+8	; 0x08
     c52:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9a 87       	std	Y+10, r25	; 0x0a
     c5c:	89 87       	std	Y+9, r24	; 0x09
     c5e:	89 85       	ldd	r24, Y+9	; 0x09
     c60:	9a 85       	ldd	r25, Y+10	; 0x0a
     c62:	9e 87       	std	Y+14, r25	; 0x0e
     c64:	8d 87       	std	Y+13, r24	; 0x0d
     c66:	8d 85       	ldd	r24, Y+13	; 0x0d
     c68:	9e 85       	ldd	r25, Y+14	; 0x0e
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <AX_UART_Init+0x130>
     c6e:	9e 87       	std	Y+14, r25	; 0x0e
     c70:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     c72:	2e 96       	adiw	r28, 0x0e	; 14
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	1f 92       	push	r1
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR0A & (1<<UDRE0)) );
     c90:	00 00       	nop
     c92:	80 ec       	ldi	r24, 0xC0	; 192
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	80 72       	andi	r24, 0x20	; 32
     ca0:	99 27       	eor	r25, r25
     ca2:	89 2b       	or	r24, r25
     ca4:	b1 f3       	breq	.-20     	; 0xc92 <AX_SendChar+0xe>
	UDR0 = data;
     ca6:	86 ec       	ldi	r24, 0xC6	; 198
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	29 81       	ldd	r18, Y+1	; 0x01
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
}
     cb0:	0f 90       	pop	r0
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR0A & (1<< RXC0)) );
     cc0:	00 00       	nop
     cc2:	80 ec       	ldi	r24, 0xC0	; 192
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	88 23       	and	r24, r24
     ccc:	d4 f7       	brge	.-12     	; 0xcc2 <AX_ReadChar+0xa>
   return UDR0;
     cce:	86 ec       	ldi	r24, 0xC6	; 198
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	27 97       	sbiw	r28, 0x07	; 7
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     cf0:	27 e0       	ldi	r18, 0x07	; 7
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	fc 01       	movw	r30, r24
     cf8:	32 2f       	mov	r19, r18
     cfa:	11 92       	st	Z+, r1
     cfc:	3a 95       	dec	r19
     cfe:	e9 f7       	brne	.-6      	; 0xcfa <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     d00:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_ReadChar>
     d04:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     d06:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_ReadChar>
     d0a:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     d0c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_ReadChar>
     d10:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     d12:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_ReadChar>
     d16:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     d18:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_ReadChar>
     d1c:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     d1e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_ReadChar>
     d22:	8e 83       	std	Y+6, r24	; 0x06
}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR0A & (1<<TXC0)) );
     d3e:	00 00       	nop
     d40:	80 ec       	ldi	r24, 0xC0	; 192
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	80 74       	andi	r24, 0x40	; 64
     d4e:	99 27       	eor	r25, r25
     d50:	89 2b       	or	r24, r25
     d52:	b1 f3       	breq	.-20     	; 0xd40 <AX_StopTransmitter+0xa>
	UCSR0B &= 0xF7;
     d54:	81 ec       	ldi	r24, 0xC1	; 193
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	21 ec       	ldi	r18, 0xC1	; 193
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	27 7f       	andi	r18, 0xF7	; 247
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
	UCSR0A |= 0x40;
     d66:	80 ec       	ldi	r24, 0xC0	; 192
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	20 ec       	ldi	r18, 0xC0	; 192
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	f9 01       	movw	r30, r18
     d70:	20 81       	ld	r18, Z
     d72:	20 64       	ori	r18, 0x40	; 64
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x08;
     d86:	81 ec       	ldi	r24, 0xC1	; 193
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	21 ec       	ldi	r18, 0xC1	; 193
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	20 81       	ld	r18, Z
     d92:	28 60       	ori	r18, 0x08	; 8
     d94:	fc 01       	movw	r30, r24
     d96:	20 83       	st	Z, r18
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= 0xEF;
     da6:	81 ec       	ldi	r24, 0xC1	; 193
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	21 ec       	ldi	r18, 0xC1	; 193
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	f9 01       	movw	r30, r18
     db0:	20 81       	ld	r18, Z
     db2:	2f 7e       	andi	r18, 0xEF	; 239
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x10;
     dc6:	81 ec       	ldi	r24, 0xC1	; 193
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	21 ec       	ldi	r18, 0xC1	; 193
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	f9 01       	movw	r30, r18
     dd0:	20 81       	ld	r18, Z
     dd2:	20 61       	ori	r18, 0x10	; 16
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 83       	st	Z, r18
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	6a 97       	sbiw	r28, 0x1a	; 26
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	9e 8b       	std	Y+22, r25	; 0x16
     df4:	8d 8b       	std	Y+21, r24	; 0x15
     df6:	78 8f       	std	Y+24, r23	; 0x18
     df8:	6f 8b       	std	Y+23, r22	; 0x17
     dfa:	49 8f       	std	Y+25, r20	; 0x19
     dfc:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     dfe:	8d 89       	ldd	r24, Y+21	; 0x15
     e00:	9e 89       	ldd	r25, Y+22	; 0x16
     e02:	cc 01       	movw	r24, r24
     e04:	a0 e0       	ldi	r26, 0x00	; 0
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	bc 01       	movw	r22, r24
     e0a:	cd 01       	movw	r24, r26
     e0c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__floatunsisf>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	46 e9       	ldi	r20, 0x96	; 150
     e1a:	53 e4       	ldi	r21, 0x43	; 67
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__divsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 ec       	ldi	r19, 0xC0	; 192
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	54 e4       	ldi	r21, 0x44	; 68
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9e 8b       	std	Y+22, r25	; 0x16
     e4a:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     e4c:	8d 89       	ldd	r24, Y+21	; 0x15
     e4e:	9e 89       	ldd	r25, Y+22	; 0x16
     e50:	89 2f       	mov	r24, r25
     e52:	99 27       	eor	r25, r25
     e54:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     e56:	8d 89       	ldd	r24, Y+21	; 0x15
     e58:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     e5a:	89 8d       	ldd	r24, Y+25	; 0x19
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	98 2f       	mov	r25, r24
     e62:	88 27       	eor	r24, r24
     e64:	99 0f       	add	r25, r25
     e66:	99 0f       	add	r25, r25
     e68:	9c 01       	movw	r18, r24
     e6a:	8f 89       	ldd	r24, Y+23	; 0x17
     e6c:	98 8d       	ldd	r25, Y+24	; 0x18
     e6e:	82 2b       	or	r24, r18
     e70:	93 2b       	or	r25, r19
     e72:	98 8f       	std	Y+24, r25	; 0x18
     e74:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     e76:	8f 89       	ldd	r24, Y+23	; 0x17
     e78:	98 8d       	ldd	r25, Y+24	; 0x18
     e7a:	89 2f       	mov	r24, r25
     e7c:	99 27       	eor	r25, r25
     e7e:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     e80:	8f 89       	ldd	r24, Y+23	; 0x17
     e82:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	9c 01       	movw	r18, r24
     e8c:	28 5d       	subi	r18, 0xD8	; 216
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 0f       	add	r18, r24
     e98:	39 1f       	adc	r19, r25
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	28 0f       	add	r18, r24
     ea2:	39 1f       	adc	r19, r25
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	28 0f       	add	r18, r24
     eac:	39 1f       	adc	r19, r25
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	80 95       	com	r24
     eba:	90 95       	com	r25
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     ec0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <AX_StopReceiver>

	AX_SendChar(START);
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(START);
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(id);
     ed0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed2:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(LENGTH);
     ed6:	87 e0       	ldi	r24, 0x07	; 7
     ed8:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(INSTR);
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(ADDRESS);
     ee2:	8e e1       	ldi	r24, 0x1E	; 30
     ee4:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(angle_L);
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(angle_H);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(speed_L);
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(speed_H);
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(checksum);
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>

	AX_StopTransmitter();
     f06:	0e 94 9b 06 	call	0xd36	; 0xd36 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     f0a:	0e 94 df 06 	call	0xdbe	; 0xdbe <AX_ReleaseReceiver>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a8 e4       	ldi	r26, 0x48	; 72
     f14:	b2 e4       	ldi	r27, 0x42	; 66
     f16:	8f 83       	std	Y+7, r24	; 0x07
     f18:	98 87       	std	Y+8, r25	; 0x08
     f1a:	a9 87       	std	Y+9, r26	; 0x09
     f1c:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e4       	ldi	r19, 0x40	; 64
     f22:	4c e1       	ldi	r20, 0x1C	; 28
     f24:	55 e4       	ldi	r21, 0x45	; 69
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	8b 87       	std	Y+11, r24	; 0x0b
     f38:	9c 87       	std	Y+12, r25	; 0x0c
     f3a:	ad 87       	std	Y+13, r26	; 0x0d
     f3c:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e8       	ldi	r20, 0x80	; 128
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	6b 85       	ldd	r22, Y+11	; 0x0b
     f48:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__cmpsf2>
     f52:	88 23       	and	r24, r24
     f54:	2c f4       	brge	.+10     	; 0xf60 <AX_SetAngle+0x182>
		__ticks = 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	98 8b       	std	Y+16, r25	; 0x10
     f5c:	8f 87       	std	Y+15, r24	; 0x0f
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f e7       	ldi	r20, 0x7F	; 127
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
     f74:	18 16       	cp	r1, r24
     f76:	4c f5       	brge	.+82     	; 0xfca <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e2       	ldi	r20, 0x20	; 32
     f7e:	51 e4       	ldi	r21, 0x41	; 65
     f80:	6f 81       	ldd	r22, Y+7	; 0x07
     f82:	78 85       	ldd	r23, Y+8	; 0x08
     f84:	89 85       	ldd	r24, Y+9	; 0x09
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	98 8b       	std	Y+16, r25	; 0x10
     f9e:	8f 87       	std	Y+15, r24	; 0x0f
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <AX_SetAngle+0x1e2>
     fa2:	8a ef       	ldi	r24, 0xFA	; 250
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9a 8b       	std	Y+18, r25	; 0x12
     fa8:	89 8b       	std	Y+17, r24	; 0x11
     faa:	89 89       	ldd	r24, Y+17	; 0x11
     fac:	9a 89       	ldd	r25, Y+18	; 0x12
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <AX_SetAngle+0x1d0>
     fb2:	9a 8b       	std	Y+18, r25	; 0x12
     fb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb8:	98 89       	ldd	r25, Y+16	; 0x10
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	98 8b       	std	Y+16, r25	; 0x10
     fbe:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	98 89       	ldd	r25, Y+16	; 0x10
     fc4:	89 2b       	or	r24, r25
     fc6:	69 f7       	brne	.-38     	; 0xfa2 <AX_SetAngle+0x1c4>
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	98 8b       	std	Y+16, r25	; 0x10
     fdc:	8f 87       	std	Y+15, r24	; 0x0f
     fde:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe0:	98 89       	ldd	r25, Y+16	; 0x10
     fe2:	9c 8b       	std	Y+20, r25	; 0x14
     fe4:	8b 8b       	std	Y+19, r24	; 0x13
     fe6:	8b 89       	ldd	r24, Y+19	; 0x13
     fe8:	9c 89       	ldd	r25, Y+20	; 0x14
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <AX_SetAngle+0x20c>
     fee:	9c 8b       	std	Y+20, r25	; 0x14
     ff0:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     ff2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <AX_ReleaseTransmitter>
}
     ff6:	6a 96       	adiw	r28, 0x1a	; 26
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	60 97       	sbiw	r28, 0x10	; 16
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
    101c:	8c ee       	ldi	r24, 0xEC	; 236
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
    1024:	0e 94 cf 06 	call	0xd9e	; 0xd9e <AX_StopReceiver>

	AX_SendChar(0xFF);
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0xFF);
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x01);
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x07);
    103a:	87 e0       	ldi	r24, 0x07	; 7
    103c:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x03);
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x06);
    1046:	86 e0       	ldi	r24, 0x06	; 6
    1048:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x00);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x00);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(1023 >> 8);
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(checksum);
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>

	AX_StopTransmitter();
    106a:	0e 94 9b 06 	call	0xd36	; 0xd36 <AX_StopTransmitter>
	AX_ReleaseReceiver();
    106e:	0e 94 df 06 	call	0xdbe	; 0xdbe <AX_ReleaseReceiver>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a8 e4       	ldi	r26, 0x48	; 72
    1078:	b2 e4       	ldi	r27, 0x42	; 66
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	9c 83       	std	Y+4, r25	; 0x04
    107e:	ad 83       	std	Y+5, r26	; 0x05
    1080:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e4       	ldi	r19, 0x40	; 64
    1086:	4c e1       	ldi	r20, 0x1C	; 28
    1088:	55 e4       	ldi	r21, 0x45	; 69
    108a:	6b 81       	ldd	r22, Y+3	; 0x03
    108c:	7c 81       	ldd	r23, Y+4	; 0x04
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	8f 83       	std	Y+7, r24	; 0x07
    109c:	98 87       	std	Y+8, r25	; 0x08
    109e:	a9 87       	std	Y+9, r26	; 0x09
    10a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__cmpsf2>
    10b6:	88 23       	and	r24, r24
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <AX_EndlessTurn+0xbc>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	8b 87       	std	Y+11, r24	; 0x0b
    10c2:	3f c0       	rjmp	.+126    	; 0x1142 <__stack+0x43>
	else if (__tmp > 65535)
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    10d8:	18 16       	cp	r1, r24
    10da:	4c f5       	brge	.+82     	; 0x112e <__stack+0x2f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e2       	ldi	r20, 0x20	; 32
    10e2:	51 e4       	ldi	r21, 0x41	; 65
    10e4:	6b 81       	ldd	r22, Y+3	; 0x03
    10e6:	7c 81       	ldd	r23, Y+4	; 0x04
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	9c 87       	std	Y+12, r25	; 0x0c
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	0f c0       	rjmp	.+30     	; 0x1124 <__stack+0x25>
    1106:	8a ef       	ldi	r24, 0xFA	; 250
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9e 87       	std	Y+14, r25	; 0x0e
    110c:	8d 87       	std	Y+13, r24	; 0x0d
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <__stack+0x13>
    1116:	9e 87       	std	Y+14, r25	; 0x0e
    1118:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111a:	8b 85       	ldd	r24, Y+11	; 0x0b
    111c:	9c 85       	ldd	r25, Y+12	; 0x0c
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9c 87       	std	Y+12, r25	; 0x0c
    1122:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1124:	8b 85       	ldd	r24, Y+11	; 0x0b
    1126:	9c 85       	ldd	r25, Y+12	; 0x0c
    1128:	89 2b       	or	r24, r25
    112a:	69 f7       	brne	.-38     	; 0x1106 <__stack+0x7>
    112c:	14 c0       	rjmp	.+40     	; 0x1156 <__stack+0x57>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112e:	6f 81       	ldd	r22, Y+7	; 0x07
    1130:	78 85       	ldd	r23, Y+8	; 0x08
    1132:	89 85       	ldd	r24, Y+9	; 0x09
    1134:	9a 85       	ldd	r25, Y+10	; 0x0a
    1136:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9c 87       	std	Y+12, r25	; 0x0c
    1140:	8b 87       	std	Y+11, r24	; 0x0b
    1142:	8b 85       	ldd	r24, Y+11	; 0x0b
    1144:	9c 85       	ldd	r25, Y+12	; 0x0c
    1146:	98 8b       	std	Y+16, r25	; 0x10
    1148:	8f 87       	std	Y+15, r24	; 0x0f
    114a:	8f 85       	ldd	r24, Y+15	; 0x0f
    114c:	98 89       	ldd	r25, Y+16	; 0x10
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <__stack+0x4f>
    1152:	98 8b       	std	Y+16, r25	; 0x10
    1154:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
    1156:	0e 94 bf 06 	call	0xd7e	; 0xd7e <AX_ReleaseTransmitter>
}
    115a:	60 96       	adiw	r28, 0x10	; 16
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	28 97       	sbiw	r28, 0x08	; 8
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	78 87       	std	Y+8, r23	; 0x08
    1186:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
    1188:	1a 82       	std	Y+2, r1	; 0x02
    118a:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
    118c:	1c 82       	std	Y+4, r1	; 0x04
    118e:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	98 85       	ldd	r25, Y+8	; 0x08
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	98 2f       	mov	r25, r24
    119e:	88 27       	eor	r24, r24
    11a0:	99 0f       	add	r25, r25
    11a2:	99 0f       	add	r25, r25
    11a4:	29 81       	ldd	r18, Y+1	; 0x01
    11a6:	3a 81       	ldd	r19, Y+2	; 0x02
    11a8:	82 2b       	or	r24, r18
    11aa:	93 2b       	or	r25, r19
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	89 96       	adiw	r24, 0x29	; 41
    11b6:	80 95       	com	r24
    11b8:	90 95       	com	r25
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
    11be:	0e 94 cf 06 	call	0xd9e	; 0xd9e <AX_StopReceiver>

	AX_SendChar(0xFF);
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0xFF);
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x01);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x05);
    11d4:	85 e0       	ldi	r24, 0x05	; 5
    11d6:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x03);
    11da:	83 e0       	ldi	r24, 0x03	; 3
    11dc:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(0x20);
    11e0:	80 e2       	ldi	r24, 0x20	; 32
    11e2:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(data);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(data >> 8);
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	89 2f       	mov	r24, r25
    11f2:	99 27       	eor	r25, r25
    11f4:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>
	AX_SendChar(checksum);
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	0e 94 42 06 	call	0xc84	; 0xc84 <AX_SendChar>

	AX_StopTransmitter();
    11fe:	0e 94 9b 06 	call	0xd36	; 0xd36 <AX_StopTransmitter>
	AX_ReleaseReceiver();
    1202:	0e 94 df 06 	call	0xdbe	; 0xdbe <AX_ReleaseReceiver>

	AX_ReadStatus();
    1206:	0e 94 6e 06 	call	0xcdc	; 0xcdc <AX_ReadStatus>

	AX_ReleaseTransmitter();
    120a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <AX_ReleaseTransmitter>
}
    120e:	28 96       	adiw	r28, 0x08	; 8
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <main>:
#include "system.h"



int main(void)
{
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	68 97       	sbiw	r28, 0x18	; 24
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61

	AX_UART_Init();
    1238:	0e 94 9d 05 	call	0xb3a	; 0xb3a <AX_UART_Init>
	CAN_Init();
    123c:	0e 94 0e 03 	call	0x61c	; 0x61c <CAN_Init>
	CAN_InitRxMob(LIFT_IDE);
    1240:	84 ed       	ldi	r24, 0xD4	; 212
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 88 03 	call	0x710	; 0x710 <CAN_InitRxMob>
	systemInit();
    1248:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <systemInit>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	aa e7       	ldi	r26, 0x7A	; 122
    1252:	b4 e4       	ldi	r27, 0x44	; 68
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	ab 83       	std	Y+3, r26	; 0x03
    125a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e4       	ldi	r19, 0x40	; 64
    1260:	4c e1       	ldi	r20, 0x1C	; 28
    1262:	55 e4       	ldi	r21, 0x45	; 69
    1264:	69 81       	ldd	r22, Y+1	; 0x01
    1266:	7a 81       	ldd	r23, Y+2	; 0x02
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	af 83       	std	Y+7, r26	; 0x07
    127a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	6d 81       	ldd	r22, Y+5	; 0x05
    1286:	7e 81       	ldd	r23, Y+6	; 0x06
    1288:	8f 81       	ldd	r24, Y+7	; 0x07
    128a:	98 85       	ldd	r25, Y+8	; 0x08
    128c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__cmpsf2>
    1290:	88 23       	and	r24, r24
    1292:	2c f4       	brge	.+10     	; 0x129e <main+0x7e>
		__ticks = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	9a 87       	std	Y+10, r25	; 0x0a
    129a:	89 87       	std	Y+9, r24	; 0x09
    129c:	3f c0       	rjmp	.+126    	; 0x131c <main+0xfc>
	else if (__tmp > 65535)
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	6d 81       	ldd	r22, Y+5	; 0x05
    12a8:	7e 81       	ldd	r23, Y+6	; 0x06
    12aa:	8f 81       	ldd	r24, Y+7	; 0x07
    12ac:	98 85       	ldd	r25, Y+8	; 0x08
    12ae:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    12b2:	18 16       	cp	r1, r24
    12b4:	4c f5       	brge	.+82     	; 0x1308 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	69 81       	ldd	r22, Y+1	; 0x01
    12c0:	7a 81       	ldd	r23, Y+2	; 0x02
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__mulsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9a 87       	std	Y+10, r25	; 0x0a
    12dc:	89 87       	std	Y+9, r24	; 0x09
    12de:	0f c0       	rjmp	.+30     	; 0x12fe <main+0xde>
    12e0:	8a ef       	ldi	r24, 0xFA	; 250
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9c 87       	std	Y+12, r25	; 0x0c
    12e6:	8b 87       	std	Y+11, r24	; 0x0b
    12e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <main+0xcc>
    12f0:	9c 87       	std	Y+12, r25	; 0x0c
    12f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	9a 87       	std	Y+10, r25	; 0x0a
    12fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	89 2b       	or	r24, r25
    1304:	69 f7       	brne	.-38     	; 0x12e0 <main+0xc0>
    1306:	14 c0       	rjmp	.+40     	; 0x1330 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1308:	6d 81       	ldd	r22, Y+5	; 0x05
    130a:	7e 81       	ldd	r23, Y+6	; 0x06
    130c:	8f 81       	ldd	r24, Y+7	; 0x07
    130e:	98 85       	ldd	r25, Y+8	; 0x08
    1310:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	9a 87       	std	Y+10, r25	; 0x0a
    131a:	89 87       	std	Y+9, r24	; 0x09
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	9e 87       	std	Y+14, r25	; 0x0e
    1322:	8d 87       	std	Y+13, r24	; 0x0d
    1324:	8d 85       	ldd	r24, Y+13	; 0x0d
    1326:	9e 85       	ldd	r25, Y+14	; 0x0e
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <main+0x108>
    132c:	9e 87       	std	Y+14, r25	; 0x0e
    132e:	8d 87       	std	Y+13, r24	; 0x0d

	canMsg message;

    while(1)
    {
    	action(message);
    1330:	0f 85       	ldd	r16, Y+15	; 0x0f
    1332:	18 89       	ldd	r17, Y+16	; 0x10
    1334:	29 89       	ldd	r18, Y+17	; 0x11
    1336:	3a 89       	ldd	r19, Y+18	; 0x12
    1338:	4b 89       	ldd	r20, Y+19	; 0x13
    133a:	5c 89       	ldd	r21, Y+20	; 0x14
    133c:	6d 89       	ldd	r22, Y+21	; 0x15
    133e:	7e 89       	ldd	r23, Y+22	; 0x16
    1340:	8f 89       	ldd	r24, Y+23	; 0x17
    1342:	98 8d       	ldd	r25, Y+24	; 0x18
    1344:	0e 94 27 01 	call	0x24e	; 0x24e <action>
    	/*
    	CAN_read(&message);

		message.data[0] = 0;*/

    }
    1348:	f3 cf       	rjmp	.-26     	; 0x1330 <main+0x110>

0000134a <GPIO_PinRegister>:
static volatile GPIOOutData *outputs[MAX_OUTPUTS];
static volatile unsigned char inputsNumber = 0;
static volatile unsigned char outputsNumber = 0;

unsigned char GPIO_PinRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 d0       	rcall	.+0      	; 0x1354 <GPIO_PinRegister+0xa>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <GPIO_PinRegister+0xc>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	9b 83       	std	Y+3, r25	; 0x03
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	6c 83       	std	Y+4, r22	; 0x04
	if(inputsNumber >= MAX_INPUTS)
    1360:	80 91 25 03 	lds	r24, 0x0325
    1364:	8a 30       	cpi	r24, 0x0A	; 10
    1366:	10 f0       	brcs	.+4      	; 0x136c <GPIO_PinRegister+0x22>
		return 0;
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	8f c0       	rjmp	.+286    	; 0x148a <GPIO_PinRegister+0x140>

	unsigned char i;

	gpios[inputsNumber] = (GPIOData *)malloc(sizeof(GPIOData));
    136c:	80 91 25 03 	lds	r24, 0x0325
    1370:	08 2f       	mov	r16, r24
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	86 e0       	ldi	r24, 0x06	; 6
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <malloc>
    137c:	9c 01       	movw	r18, r24
    137e:	c8 01       	movw	r24, r16
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	83 50       	subi	r24, 0x03	; 3
    1386:	9d 4f       	sbci	r25, 0xFD	; 253
    1388:	fc 01       	movw	r30, r24
    138a:	31 83       	std	Z+1, r19	; 0x01
    138c:	20 83       	st	Z, r18
	if(gpios[inputsNumber] == NULL)
    138e:	80 91 25 03 	lds	r24, 0x0325
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	83 50       	subi	r24, 0x03	; 3
    139c:	9d 4f       	sbci	r25, 0xFD	; 253
    139e:	fc 01       	movw	r30, r24
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	89 2b       	or	r24, r25
    13a6:	11 f4       	brne	.+4      	; 0x13ac <GPIO_PinRegister+0x62>
		return -1;
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	6f c0       	rjmp	.+222    	; 0x148a <GPIO_PinRegister+0x140>

	gpios[inputsNumber]->baseAddress = baseAddress;
    13ac:	80 91 25 03 	lds	r24, 0x0325
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	83 50       	subi	r24, 0x03	; 3
    13ba:	9d 4f       	sbci	r25, 0xFD	; 253
    13bc:	fc 01       	movw	r30, r24
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	2a 81       	ldd	r18, Y+2	; 0x02
    13c4:	3b 81       	ldd	r19, Y+3	; 0x03
    13c6:	fc 01       	movw	r30, r24
    13c8:	31 83       	std	Z+1, r19	; 0x01
    13ca:	20 83       	st	Z, r18
	gpios[inputsNumber]->pinPosition = pin;
    13cc:	80 91 25 03 	lds	r24, 0x0325
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	83 50       	subi	r24, 0x03	; 3
    13da:	9d 4f       	sbci	r25, 0xFD	; 253
    13dc:	fc 01       	movw	r30, r24
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	fc 01       	movw	r30, r24
    13e6:	22 83       	std	Z+2, r18	; 0x02
	for(i = 0; i < 3; i++)
    13e8:	19 82       	std	Y+1, r1	; 0x01
    13ea:	16 c0       	rjmp	.+44     	; 0x1418 <GPIO_PinRegister+0xce>
		gpios[inputsNumber]->buffer[i] = 0;
    13ec:	80 91 25 03 	lds	r24, 0x0325
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	83 50       	subi	r24, 0x03	; 3
    13fa:	9d 4f       	sbci	r25, 0xFD	; 253
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 81       	ld	r18, Z
    1400:	31 81       	ldd	r19, Z+1	; 0x01
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	03 96       	adiw	r24, 0x03	; 3
    140e:	fc 01       	movw	r30, r24
    1410:	10 82       	st	Z, r1
	if(gpios[inputsNumber] == NULL)
		return -1;

	gpios[inputsNumber]->baseAddress = baseAddress;
	gpios[inputsNumber]->pinPosition = pin;
	for(i = 0; i < 3; i++)
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	38 f3       	brcs	.-50     	; 0x13ec <GPIO_PinRegister+0xa2>
		gpios[inputsNumber]->buffer[i] = 0;

	_MMIO_BYTE(baseAddress - 1) &= ~(1 << pin);
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	9b 81       	ldd	r25, Y+3	; 0x03
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	2a 81       	ldd	r18, Y+2	; 0x02
    1426:	3b 81       	ldd	r19, Y+3	; 0x03
    1428:	21 50       	subi	r18, 0x01	; 1
    142a:	31 09       	sbc	r19, r1
    142c:	f9 01       	movw	r30, r18
    142e:	20 81       	ld	r18, Z
    1430:	62 2f       	mov	r22, r18
    1432:	2c 81       	ldd	r18, Y+4	; 0x04
    1434:	42 2f       	mov	r20, r18
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	21 e0       	ldi	r18, 0x01	; 1
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_PinRegister+0xf8>
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	4a 95       	dec	r20
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_PinRegister+0xf4>
    1446:	20 95       	com	r18
    1448:	26 23       	and	r18, r22
    144a:	fc 01       	movw	r30, r24
    144c:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) |= (1 << pin);
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	9b 81       	ldd	r25, Y+3	; 0x03
    1452:	fc 01       	movw	r30, r24
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_PinRegister+0x11e>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	2a 95       	dec	r18
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_PinRegister+0x11a>
    146c:	84 2b       	or	r24, r20
    146e:	28 2f       	mov	r18, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18

	i = inputsNumber;
    1478:	80 91 25 03 	lds	r24, 0x0325
    147c:	89 83       	std	Y+1, r24	; 0x01
	inputsNumber++;
    147e:	80 91 25 03 	lds	r24, 0x0325
    1482:	8f 5f       	subi	r24, 0xFF	; 255
    1484:	80 93 25 03 	sts	0x0325, r24

	return i;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <GPIO_OutputRegister>:

signed char GPIO_OutputRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <GPIO_OutputRegister+0xa>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <GPIO_OutputRegister+0xc>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9b 83       	std	Y+3, r25	; 0x03
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	6c 83       	std	Y+4, r22	; 0x04
	if(outputsNumber >= MAX_OUTPUTS)
    14b2:	80 91 26 03 	lds	r24, 0x0326
    14b6:	8a 30       	cpi	r24, 0x0A	; 10
    14b8:	10 f0       	brcs	.+4      	; 0x14be <GPIO_OutputRegister+0x22>
		return -1;
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	74 c0       	rjmp	.+232    	; 0x15a6 <GPIO_OutputRegister+0x10a>

	unsigned char i;

	outputs[outputsNumber] = (GPIOOutData *)malloc(sizeof(GPIOOutData));
    14be:	80 91 26 03 	lds	r24, 0x0326
    14c2:	08 2f       	mov	r16, r24
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <malloc>
    14ce:	9c 01       	movw	r18, r24
    14d0:	c8 01       	movw	r24, r16
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	8f 5e       	subi	r24, 0xEF	; 239
    14d8:	9c 4f       	sbci	r25, 0xFC	; 252
    14da:	fc 01       	movw	r30, r24
    14dc:	31 83       	std	Z+1, r19	; 0x01
    14de:	20 83       	st	Z, r18
	if(outputs[outputsNumber] == NULL)
    14e0:	80 91 26 03 	lds	r24, 0x0326
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	8f 5e       	subi	r24, 0xEF	; 239
    14ee:	9c 4f       	sbci	r25, 0xFC	; 252
    14f0:	fc 01       	movw	r30, r24
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	89 2b       	or	r24, r25
    14f8:	11 f4       	brne	.+4      	; 0x14fe <GPIO_OutputRegister+0x62>
		return -1;
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	54 c0       	rjmp	.+168    	; 0x15a6 <GPIO_OutputRegister+0x10a>

	outputs[outputsNumber]->baseAddress = baseAddress;
    14fe:	80 91 26 03 	lds	r24, 0x0326
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	8f 5e       	subi	r24, 0xEF	; 239
    150c:	9c 4f       	sbci	r25, 0xFC	; 252
    150e:	fc 01       	movw	r30, r24
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	2a 81       	ldd	r18, Y+2	; 0x02
    1516:	3b 81       	ldd	r19, Y+3	; 0x03
    1518:	fc 01       	movw	r30, r24
    151a:	31 83       	std	Z+1, r19	; 0x01
    151c:	20 83       	st	Z, r18
	outputs[outputsNumber]->pinPosition = pin;
    151e:	80 91 26 03 	lds	r24, 0x0326
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	8f 5e       	subi	r24, 0xEF	; 239
    152c:	9c 4f       	sbci	r25, 0xFC	; 252
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	2c 81       	ldd	r18, Y+4	; 0x04
    1536:	fc 01       	movw	r30, r24
    1538:	22 83       	std	Z+2, r18	; 0x02

	_MMIO_BYTE(baseAddress - 1) |= (1 << pin);
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	9b 81       	ldd	r25, Y+3	; 0x03
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	2a 81       	ldd	r18, Y+2	; 0x02
    1542:	3b 81       	ldd	r19, Y+3	; 0x03
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	31 09       	sbc	r19, r1
    1548:	f9 01       	movw	r30, r18
    154a:	20 81       	ld	r18, Z
    154c:	62 2f       	mov	r22, r18
    154e:	2c 81       	ldd	r18, Y+4	; 0x04
    1550:	42 2f       	mov	r20, r18
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <GPIO_OutputRegister+0xc2>
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	4a 95       	dec	r20
    1560:	e2 f7       	brpl	.-8      	; 0x155a <GPIO_OutputRegister+0xbe>
    1562:	26 2b       	or	r18, r22
    1564:	fc 01       	movw	r30, r24
    1566:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) &= ~(1 << pin);
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_OutputRegister+0xe6>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	2a 95       	dec	r18
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_OutputRegister+0xe2>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	28 2f       	mov	r18, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18

	i = outputsNumber;
    1594:	80 91 26 03 	lds	r24, 0x0326
    1598:	89 83       	std	Y+1, r24	; 0x01
	outputsNumber++;
    159a:	80 91 26 03 	lds	r24, 0x0326
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	80 93 26 03 	sts	0x0326, r24

	return i;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	08 95       	ret

000015b8 <GPIO_OutputSet>:

signed char GPIO_OutputSet(unsigned char outHandler)
{
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	1f 92       	push	r1
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    15c4:	80 91 26 03 	lds	r24, 0x0326
    15c8:	99 81       	ldd	r25, Y+1	; 0x01
    15ca:	98 17       	cp	r25, r24
    15cc:	10 f0       	brcs	.+4      	; 0x15d2 <GPIO_OutputSet+0x1a>
		return -1;
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	2a c0       	rjmp	.+84     	; 0x1626 <GPIO_OutputSet+0x6e>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) |= (1 << outputs[outHandler]->pinPosition);
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	8f 5e       	subi	r24, 0xEF	; 239
    15de:	9c 4f       	sbci	r25, 0xFC	; 252
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	fc 01       	movw	r30, r24
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	ac 01       	movw	r20, r24
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_OutputSet+0x42>
    15f6:	44 0f       	add	r20, r20
    15f8:	55 1f       	adc	r21, r21
    15fa:	2a 95       	dec	r18
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_OutputSet+0x3e>
    15fe:	9a 01       	movw	r18, r20
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	8f 5e       	subi	r24, 0xEF	; 239
    160c:	9c 4f       	sbci	r25, 0xFC	; 252
    160e:	fc 01       	movw	r30, r24
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	fc 01       	movw	r30, r24
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	fc 01       	movw	r30, r24
    161c:	40 81       	ld	r20, Z
    161e:	24 2b       	or	r18, r20
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18

	return 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
}
    1626:	0f 90       	pop	r0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <GPIO_OutputReset>:

signed char GPIO_OutputReset(unsigned char outHandler)
{
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	1f 92       	push	r1
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    163a:	80 91 26 03 	lds	r24, 0x0326
    163e:	99 81       	ldd	r25, Y+1	; 0x01
    1640:	98 17       	cp	r25, r24
    1642:	10 f0       	brcs	.+4      	; 0x1648 <GPIO_OutputReset+0x1a>
		return -1;
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	2b c0       	rjmp	.+86     	; 0x169e <GPIO_OutputReset+0x70>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) &= ~(1 << outputs[outHandler]->pinPosition);
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	8f 5e       	subi	r24, 0xEF	; 239
    1654:	9c 4f       	sbci	r25, 0xFC	; 252
    1656:	fc 01       	movw	r30, r24
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	fc 01       	movw	r30, r24
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_OutputReset+0x40>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	2a 95       	dec	r18
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_OutputReset+0x3c>
    1672:	9c 01       	movw	r18, r24
    1674:	20 95       	com	r18
    1676:	30 95       	com	r19
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	8f 5e       	subi	r24, 0xEF	; 239
    1684:	9c 4f       	sbci	r25, 0xFC	; 252
    1686:	fc 01       	movw	r30, r24
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	fc 01       	movw	r30, r24
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	fc 01       	movw	r30, r24
    1694:	40 81       	ld	r20, Z
    1696:	24 23       	and	r18, r20
    1698:	fc 01       	movw	r30, r24
    169a:	20 83       	st	Z, r18

	return 0;
    169c:	80 e0       	ldi	r24, 0x00	; 0
}
    169e:	0f 90       	pop	r0
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <GPIO_PinRead>:

unsigned char GPIO_PinRead(unsigned char pinHandler)
{
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	1f 92       	push	r1
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	89 83       	std	Y+1, r24	; 0x01
	return !( (gpios[pinHandler]->buffer[0]) | (gpios[pinHandler]->buffer[1]) | (gpios[pinHandler]->buffer[2]) );
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	83 50       	subi	r24, 0x03	; 3
    16be:	9d 4f       	sbci	r25, 0xFD	; 253
    16c0:	fc 01       	movw	r30, r24
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	fc 01       	movw	r30, r24
    16c8:	23 81       	ldd	r18, Z+3	; 0x03
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	83 50       	subi	r24, 0x03	; 3
    16d6:	9d 4f       	sbci	r25, 0xFD	; 253
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	fc 01       	movw	r30, r24
    16e0:	84 81       	ldd	r24, Z+4	; 0x04
    16e2:	28 2b       	or	r18, r24
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	83 50       	subi	r24, 0x03	; 3
    16f0:	9d 4f       	sbci	r25, 0xFD	; 253
    16f2:	fc 01       	movw	r30, r24
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	fc 01       	movw	r30, r24
    16fa:	85 81       	ldd	r24, Z+5	; 0x05
    16fc:	92 2f       	mov	r25, r18
    16fe:	98 2b       	or	r25, r24
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	99 23       	and	r25, r25
    1704:	09 f0       	breq	.+2      	; 0x1708 <GPIO_PinRead+0x62>
    1706:	80 e0       	ldi	r24, 0x00	; 0
}
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <GPIO_ReadFromRegister>:

unsigned char GPIO_ReadFromRegister(unsigned char pinHandler)
{
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	00 d0       	rcall	.+0      	; 0x1716 <GPIO_ReadFromRegister+0x6>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char state = 0;
    171c:	19 82       	std	Y+1, r1	; 0x01

	state = ((_MMIO_BYTE(gpios[pinHandler]->baseAddress - 2)) >> (gpios[pinHandler]->pinPosition)) & 0x01;
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	83 50       	subi	r24, 0x03	; 3
    172a:	9d 4f       	sbci	r25, 0xFD	; 253
    172c:	fc 01       	movw	r30, r24
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	fc 01       	movw	r30, r24
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	02 97       	sbiw	r24, 0x02	; 2
    173a:	fc 01       	movw	r30, r24
    173c:	80 81       	ld	r24, Z
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	2a 81       	ldd	r18, Y+2	; 0x02
    1744:	22 2f       	mov	r18, r18
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	23 50       	subi	r18, 0x03	; 3
    174e:	3d 4f       	sbci	r19, 0xFD	; 253
    1750:	f9 01       	movw	r30, r18
    1752:	20 81       	ld	r18, Z
    1754:	31 81       	ldd	r19, Z+1	; 0x01
    1756:	f9 01       	movw	r30, r18
    1758:	22 81       	ldd	r18, Z+2	; 0x02
    175a:	22 2f       	mov	r18, r18
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <GPIO_ReadFromRegister+0x54>
    1760:	95 95       	asr	r25
    1762:	87 95       	ror	r24
    1764:	2a 95       	dec	r18
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <GPIO_ReadFromRegister+0x50>
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01

	return state;
    176c:	89 81       	ldd	r24, Y+1	; 0x01
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <fillDebaunsingData>:

void fillDebaunsingData(void)
{
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	1f 92       	push	r1
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	static char j = 0;

	if(++j >= 3)
    178a:	80 91 27 03 	lds	r24, 0x0327
    178e:	8f 5f       	subi	r24, 0xFF	; 255
    1790:	80 93 27 03 	sts	0x0327, r24
    1794:	80 91 27 03 	lds	r24, 0x0327
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	10 f0       	brcs	.+4      	; 0x17a0 <fillDebaunsingData+0x28>
		j = 0;
    179c:	10 92 27 03 	sts	0x0327, r1

	for(i = 0; i < inputsNumber; ++i)
    17a0:	19 82       	std	Y+1, r1	; 0x01
    17a2:	1b c0       	rjmp	.+54     	; 0x17da <fillDebaunsingData+0x62>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	83 50       	subi	r24, 0x03	; 3
    17b0:	9d 4f       	sbci	r25, 0xFD	; 253
    17b2:	fc 01       	movw	r30, r24
    17b4:	e0 80       	ld	r14, Z
    17b6:	f1 80       	ldd	r15, Z+1	; 0x01
    17b8:	80 91 27 03 	lds	r24, 0x0327
    17bc:	08 2f       	mov	r16, r24
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	0e 94 88 0b 	call	0x1710	; 0x1710 <GPIO_ReadFromRegister>
    17c6:	28 2f       	mov	r18, r24
    17c8:	c7 01       	movw	r24, r14
    17ca:	80 0f       	add	r24, r16
    17cc:	91 1f       	adc	r25, r17
    17ce:	03 96       	adiw	r24, 0x03	; 3
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18
	static char j = 0;

	if(++j >= 3)
		j = 0;

	for(i = 0; i < inputsNumber; ++i)
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	80 91 25 03 	lds	r24, 0x0325
    17de:	99 81       	ldd	r25, Y+1	; 0x01
    17e0:	98 17       	cp	r25, r24
    17e2:	00 f3       	brcs	.-64     	; 0x17a4 <fillDebaunsingData+0x2c>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
}
    17e4:	0f 90       	pop	r0
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	08 95       	ret

000017f4 <Timer_Init>:

void Timer_Init(unsigned int freq)
{
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <Timer_Init+0xa>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1806:	80 e8       	ldi	r24, 0x80	; 128
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	fc 01       	movw	r30, r24
    180c:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    180e:	81 e8       	ldi	r24, 0x81	; 129
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	29 e0       	ldi	r18, 0x09	; 9
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / freq + 0.5;
    1818:	08 e8       	ldi	r16, 0x88	; 136
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	cc 01       	movw	r24, r24
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__floatunsisf>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9c 01       	movw	r18, r24
    1834:	ad 01       	movw	r20, r26
    1836:	60 e8       	ldi	r22, 0x80	; 128
    1838:	76 e9       	ldi	r23, 0x96	; 150
    183a:	88 e1       	ldi	r24, 0x18	; 24
    183c:	9b e4       	ldi	r25, 0x4B	; 75
    183e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__divsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__addsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    186c:	8f e6       	ldi	r24, 0x6F	; 111
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	22 e0       	ldi	r18, 0x02	; 2
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18

	SREG |= 0x80;
    1876:	8f e5       	ldi	r24, 0x5F	; 95
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	2f e5       	ldi	r18, 0x5F	; 95
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	f9 01       	movw	r30, r18
    1880:	20 81       	ld	r18, Z
    1882:	20 68       	ori	r18, 0x80	; 128
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	08 95       	ret

00001896 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
    1896:	1f 92       	push	r1
    1898:	0f 92       	push	r0
    189a:	00 90 5f 00 	lds	r0, 0x005F
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	00 90 5b 00 	lds	r0, 0x005B
    18a6:	0f 92       	push	r0
    18a8:	2f 93       	push	r18
    18aa:	3f 93       	push	r19
    18ac:	4f 93       	push	r20
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	fillDebaunsingData();
    18c8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fillDebaunsingData>
    #if USE_TIMER_HOOK == 1
    Timer_Hook();
    #endif // USE_TIMER_HOOK
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	00 92 5b 00 	sts	0x005B, r0
    18ee:	0f 90       	pop	r0
    18f0:	00 92 5f 00 	sts	0x005F, r0
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <systemInit>:

void systemInit(void)
{
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	Timer_Init(1000);
    1902:	88 ee       	ldi	r24, 0xE8	; 232
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <Timer_Init>

	chipSelect = GPIO_OutputRegister(GPIOF_BASE, 7);
    190a:	67 e0       	ldi	r22, 0x07	; 7
    190c:	81 e3       	ldi	r24, 0x31	; 49
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 4e 0a 	call	0x149c	; 0x149c <GPIO_OutputRegister>
    1914:	80 93 28 03 	sts	0x0328, r24
	INA1 = GPIO_OutputRegister(GPIOF_BASE, 6);
    1918:	66 e0       	ldi	r22, 0x06	; 6
    191a:	81 e3       	ldi	r24, 0x31	; 49
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 4e 0a 	call	0x149c	; 0x149c <GPIO_OutputRegister>
    1922:	80 93 29 03 	sts	0x0329, r24
	INB1 = GPIO_OutputRegister(GPIOF_BASE, 5);
    1926:	65 e0       	ldi	r22, 0x05	; 5
    1928:	81 e3       	ldi	r24, 0x31	; 49
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 4e 0a 	call	0x149c	; 0x149c <GPIO_OutputRegister>
    1930:	80 93 2c 03 	sts	0x032C, r24
	PWM = GPIO_OutputRegister(GPIOE_BASE, 3);
    1934:	63 e0       	ldi	r22, 0x03	; 3
    1936:	8e e2       	ldi	r24, 0x2E	; 46
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 4e 0a 	call	0x149c	; 0x149c <GPIO_OutputRegister>
    193e:	80 93 2a 03 	sts	0x032A, r24
	pinE4 = GPIO_OutputRegister(GPIOE_BASE, 4);
    1942:	64 e0       	ldi	r22, 0x04	; 4
    1944:	8e e2       	ldi	r24, 0x2E	; 46
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 4e 0a 	call	0x149c	; 0x149c <GPIO_OutputRegister>
    194c:	80 93 2b 03 	sts	0x032B, r24
	pinE5 = GPIO_OutputRegister(GPIOE_BASE, 5);
    1950:	65 e0       	ldi	r22, 0x05	; 5
    1952:	8e e2       	ldi	r24, 0x2E	; 46
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 4e 0a 	call	0x149c	; 0x149c <GPIO_OutputRegister>
    195a:	80 93 2d 03 	sts	0x032D, r24

}
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	08 95       	ret

00001964 <__subsf3>:
    1964:	50 58       	subi	r21, 0x80	; 128

00001966 <__addsf3>:
    1966:	bb 27       	eor	r27, r27
    1968:	aa 27       	eor	r26, r26
    196a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__addsf3x>
    196e:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_round>
    1972:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_pscA>
    1976:	38 f0       	brcs	.+14     	; 0x1986 <__addsf3+0x20>
    1978:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_pscB>
    197c:	20 f0       	brcs	.+8      	; 0x1986 <__addsf3+0x20>
    197e:	39 f4       	brne	.+14     	; 0x198e <__addsf3+0x28>
    1980:	9f 3f       	cpi	r25, 0xFF	; 255
    1982:	19 f4       	brne	.+6      	; 0x198a <__addsf3+0x24>
    1984:	26 f4       	brtc	.+8      	; 0x198e <__addsf3+0x28>
    1986:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_nan>
    198a:	0e f4       	brtc	.+2      	; 0x198e <__addsf3+0x28>
    198c:	e0 95       	com	r30
    198e:	e7 fb       	bst	r30, 7
    1990:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>

00001994 <__addsf3x>:
    1994:	e9 2f       	mov	r30, r25
    1996:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    199a:	58 f3       	brcs	.-42     	; 0x1972 <__addsf3+0xc>
    199c:	ba 17       	cp	r27, r26
    199e:	62 07       	cpc	r22, r18
    19a0:	73 07       	cpc	r23, r19
    19a2:	84 07       	cpc	r24, r20
    19a4:	95 07       	cpc	r25, r21
    19a6:	20 f0       	brcs	.+8      	; 0x19b0 <__addsf3x+0x1c>
    19a8:	79 f4       	brne	.+30     	; 0x19c8 <__addsf3x+0x34>
    19aa:	a6 f5       	brtc	.+104    	; 0x1a14 <__addsf3x+0x80>
    19ac:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_zero>
    19b0:	0e f4       	brtc	.+2      	; 0x19b4 <__addsf3x+0x20>
    19b2:	e0 95       	com	r30
    19b4:	0b 2e       	mov	r0, r27
    19b6:	ba 2f       	mov	r27, r26
    19b8:	a0 2d       	mov	r26, r0
    19ba:	0b 01       	movw	r0, r22
    19bc:	b9 01       	movw	r22, r18
    19be:	90 01       	movw	r18, r0
    19c0:	0c 01       	movw	r0, r24
    19c2:	ca 01       	movw	r24, r20
    19c4:	a0 01       	movw	r20, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	ff 27       	eor	r31, r31
    19ca:	59 1b       	sub	r21, r25
    19cc:	99 f0       	breq	.+38     	; 0x19f4 <__addsf3x+0x60>
    19ce:	59 3f       	cpi	r21, 0xF9	; 249
    19d0:	50 f4       	brcc	.+20     	; 0x19e6 <__addsf3x+0x52>
    19d2:	50 3e       	cpi	r21, 0xE0	; 224
    19d4:	68 f1       	brcs	.+90     	; 0x1a30 <__addsf3x+0x9c>
    19d6:	1a 16       	cp	r1, r26
    19d8:	f0 40       	sbci	r31, 0x00	; 0
    19da:	a2 2f       	mov	r26, r18
    19dc:	23 2f       	mov	r18, r19
    19de:	34 2f       	mov	r19, r20
    19e0:	44 27       	eor	r20, r20
    19e2:	58 5f       	subi	r21, 0xF8	; 248
    19e4:	f3 cf       	rjmp	.-26     	; 0x19cc <__addsf3x+0x38>
    19e6:	46 95       	lsr	r20
    19e8:	37 95       	ror	r19
    19ea:	27 95       	ror	r18
    19ec:	a7 95       	ror	r26
    19ee:	f0 40       	sbci	r31, 0x00	; 0
    19f0:	53 95       	inc	r21
    19f2:	c9 f7       	brne	.-14     	; 0x19e6 <__addsf3x+0x52>
    19f4:	7e f4       	brtc	.+30     	; 0x1a14 <__addsf3x+0x80>
    19f6:	1f 16       	cp	r1, r31
    19f8:	ba 0b       	sbc	r27, r26
    19fa:	62 0b       	sbc	r22, r18
    19fc:	73 0b       	sbc	r23, r19
    19fe:	84 0b       	sbc	r24, r20
    1a00:	ba f0       	brmi	.+46     	; 0x1a30 <__addsf3x+0x9c>
    1a02:	91 50       	subi	r25, 0x01	; 1
    1a04:	a1 f0       	breq	.+40     	; 0x1a2e <__addsf3x+0x9a>
    1a06:	ff 0f       	add	r31, r31
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	66 1f       	adc	r22, r22
    1a0c:	77 1f       	adc	r23, r23
    1a0e:	88 1f       	adc	r24, r24
    1a10:	c2 f7       	brpl	.-16     	; 0x1a02 <__addsf3x+0x6e>
    1a12:	0e c0       	rjmp	.+28     	; 0x1a30 <__addsf3x+0x9c>
    1a14:	ba 0f       	add	r27, r26
    1a16:	62 1f       	adc	r22, r18
    1a18:	73 1f       	adc	r23, r19
    1a1a:	84 1f       	adc	r24, r20
    1a1c:	48 f4       	brcc	.+18     	; 0x1a30 <__addsf3x+0x9c>
    1a1e:	87 95       	ror	r24
    1a20:	77 95       	ror	r23
    1a22:	67 95       	ror	r22
    1a24:	b7 95       	ror	r27
    1a26:	f7 95       	ror	r31
    1a28:	9e 3f       	cpi	r25, 0xFE	; 254
    1a2a:	08 f0       	brcs	.+2      	; 0x1a2e <__addsf3x+0x9a>
    1a2c:	b0 cf       	rjmp	.-160    	; 0x198e <__addsf3+0x28>
    1a2e:	93 95       	inc	r25
    1a30:	88 0f       	add	r24, r24
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <__addsf3x+0xa2>
    1a34:	99 27       	eor	r25, r25
    1a36:	ee 0f       	add	r30, r30
    1a38:	97 95       	ror	r25
    1a3a:	87 95       	ror	r24
    1a3c:	08 95       	ret

00001a3e <__cmpsf2>:
    1a3e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fp_cmp>
    1a42:	08 f4       	brcc	.+2      	; 0x1a46 <__cmpsf2+0x8>
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	08 95       	ret

00001a48 <__divsf3>:
    1a48:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__divsf3x>
    1a4c:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_round>
    1a50:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_pscB>
    1a54:	58 f0       	brcs	.+22     	; 0x1a6c <__divsf3+0x24>
    1a56:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_pscA>
    1a5a:	40 f0       	brcs	.+16     	; 0x1a6c <__divsf3+0x24>
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <__divsf3+0x20>
    1a5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a60:	29 f0       	breq	.+10     	; 0x1a6c <__divsf3+0x24>
    1a62:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1a66:	51 11       	cpse	r21, r1
    1a68:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1a6c:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_nan>

00001a70 <__divsf3x>:
    1a70:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    1a74:	68 f3       	brcs	.-38     	; 0x1a50 <__divsf3+0x8>

00001a76 <__divsf3_pse>:
    1a76:	99 23       	and	r25, r25
    1a78:	b1 f3       	breq	.-20     	; 0x1a66 <__divsf3+0x1e>
    1a7a:	55 23       	and	r21, r21
    1a7c:	91 f3       	breq	.-28     	; 0x1a62 <__divsf3+0x1a>
    1a7e:	95 1b       	sub	r25, r21
    1a80:	55 0b       	sbc	r21, r21
    1a82:	bb 27       	eor	r27, r27
    1a84:	aa 27       	eor	r26, r26
    1a86:	62 17       	cp	r22, r18
    1a88:	73 07       	cpc	r23, r19
    1a8a:	84 07       	cpc	r24, r20
    1a8c:	38 f0       	brcs	.+14     	; 0x1a9c <__divsf3_pse+0x26>
    1a8e:	9f 5f       	subi	r25, 0xFF	; 255
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	44 1f       	adc	r20, r20
    1a98:	aa 1f       	adc	r26, r26
    1a9a:	a9 f3       	breq	.-22     	; 0x1a86 <__divsf3_pse+0x10>
    1a9c:	35 d0       	rcall	.+106    	; 0x1b08 <__divsf3_pse+0x92>
    1a9e:	0e 2e       	mov	r0, r30
    1aa0:	3a f0       	brmi	.+14     	; 0x1ab0 <__divsf3_pse+0x3a>
    1aa2:	e0 e8       	ldi	r30, 0x80	; 128
    1aa4:	32 d0       	rcall	.+100    	; 0x1b0a <__divsf3_pse+0x94>
    1aa6:	91 50       	subi	r25, 0x01	; 1
    1aa8:	50 40       	sbci	r21, 0x00	; 0
    1aaa:	e6 95       	lsr	r30
    1aac:	00 1c       	adc	r0, r0
    1aae:	ca f7       	brpl	.-14     	; 0x1aa2 <__divsf3_pse+0x2c>
    1ab0:	2b d0       	rcall	.+86     	; 0x1b08 <__divsf3_pse+0x92>
    1ab2:	fe 2f       	mov	r31, r30
    1ab4:	29 d0       	rcall	.+82     	; 0x1b08 <__divsf3_pse+0x92>
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	bb 1f       	adc	r27, r27
    1abe:	26 17       	cp	r18, r22
    1ac0:	37 07       	cpc	r19, r23
    1ac2:	48 07       	cpc	r20, r24
    1ac4:	ab 07       	cpc	r26, r27
    1ac6:	b0 e8       	ldi	r27, 0x80	; 128
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <__divsf3_pse+0x56>
    1aca:	bb 0b       	sbc	r27, r27
    1acc:	80 2d       	mov	r24, r0
    1ace:	bf 01       	movw	r22, r30
    1ad0:	ff 27       	eor	r31, r31
    1ad2:	93 58       	subi	r25, 0x83	; 131
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad6:	3a f0       	brmi	.+14     	; 0x1ae6 <__divsf3_pse+0x70>
    1ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    1ada:	51 05       	cpc	r21, r1
    1adc:	78 f0       	brcs	.+30     	; 0x1afc <__divsf3_pse+0x86>
    1ade:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1ae2:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae8:	e4 f3       	brlt	.-8      	; 0x1ae2 <__divsf3_pse+0x6c>
    1aea:	98 3e       	cpi	r25, 0xE8	; 232
    1aec:	d4 f3       	brlt	.-12     	; 0x1ae2 <__divsf3_pse+0x6c>
    1aee:	86 95       	lsr	r24
    1af0:	77 95       	ror	r23
    1af2:	67 95       	ror	r22
    1af4:	b7 95       	ror	r27
    1af6:	f7 95       	ror	r31
    1af8:	9f 5f       	subi	r25, 0xFF	; 255
    1afa:	c9 f7       	brne	.-14     	; 0x1aee <__divsf3_pse+0x78>
    1afc:	88 0f       	add	r24, r24
    1afe:	91 1d       	adc	r25, r1
    1b00:	96 95       	lsr	r25
    1b02:	87 95       	ror	r24
    1b04:	97 f9       	bld	r25, 7
    1b06:	08 95       	ret
    1b08:	e1 e0       	ldi	r30, 0x01	; 1
    1b0a:	66 0f       	add	r22, r22
    1b0c:	77 1f       	adc	r23, r23
    1b0e:	88 1f       	adc	r24, r24
    1b10:	bb 1f       	adc	r27, r27
    1b12:	62 17       	cp	r22, r18
    1b14:	73 07       	cpc	r23, r19
    1b16:	84 07       	cpc	r24, r20
    1b18:	ba 07       	cpc	r27, r26
    1b1a:	20 f0       	brcs	.+8      	; 0x1b24 <__divsf3_pse+0xae>
    1b1c:	62 1b       	sub	r22, r18
    1b1e:	73 0b       	sbc	r23, r19
    1b20:	84 0b       	sbc	r24, r20
    1b22:	ba 0b       	sbc	r27, r26
    1b24:	ee 1f       	adc	r30, r30
    1b26:	88 f7       	brcc	.-30     	; 0x1b0a <__divsf3_pse+0x94>
    1b28:	e0 95       	com	r30
    1b2a:	08 95       	ret

00001b2c <__fixunssfsi>:
    1b2c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_splitA>
    1b30:	88 f0       	brcs	.+34     	; 0x1b54 <__fixunssfsi+0x28>
    1b32:	9f 57       	subi	r25, 0x7F	; 127
    1b34:	98 f0       	brcs	.+38     	; 0x1b5c <__fixunssfsi+0x30>
    1b36:	b9 2f       	mov	r27, r25
    1b38:	99 27       	eor	r25, r25
    1b3a:	b7 51       	subi	r27, 0x17	; 23
    1b3c:	b0 f0       	brcs	.+44     	; 0x1b6a <__fixunssfsi+0x3e>
    1b3e:	e1 f0       	breq	.+56     	; 0x1b78 <__fixunssfsi+0x4c>
    1b40:	66 0f       	add	r22, r22
    1b42:	77 1f       	adc	r23, r23
    1b44:	88 1f       	adc	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	1a f0       	brmi	.+6      	; 0x1b50 <__fixunssfsi+0x24>
    1b4a:	ba 95       	dec	r27
    1b4c:	c9 f7       	brne	.-14     	; 0x1b40 <__fixunssfsi+0x14>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <__fixunssfsi+0x4c>
    1b50:	b1 30       	cpi	r27, 0x01	; 1
    1b52:	91 f0       	breq	.+36     	; 0x1b78 <__fixunssfsi+0x4c>
    1b54:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_zero>
    1b58:	b1 e0       	ldi	r27, 0x01	; 1
    1b5a:	08 95       	ret
    1b5c:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_zero>
    1b60:	67 2f       	mov	r22, r23
    1b62:	78 2f       	mov	r23, r24
    1b64:	88 27       	eor	r24, r24
    1b66:	b8 5f       	subi	r27, 0xF8	; 248
    1b68:	39 f0       	breq	.+14     	; 0x1b78 <__fixunssfsi+0x4c>
    1b6a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b6c:	cc f3       	brlt	.-14     	; 0x1b60 <__fixunssfsi+0x34>
    1b6e:	86 95       	lsr	r24
    1b70:	77 95       	ror	r23
    1b72:	67 95       	ror	r22
    1b74:	b3 95       	inc	r27
    1b76:	d9 f7       	brne	.-10     	; 0x1b6e <__fixunssfsi+0x42>
    1b78:	3e f4       	brtc	.+14     	; 0x1b88 <__fixunssfsi+0x5c>
    1b7a:	90 95       	com	r25
    1b7c:	80 95       	com	r24
    1b7e:	70 95       	com	r23
    1b80:	61 95       	neg	r22
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f 4f       	sbci	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	08 95       	ret

00001b8a <__floatunsisf>:
    1b8a:	e8 94       	clt
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <__floatsisf+0x12>

00001b8e <__floatsisf>:
    1b8e:	97 fb       	bst	r25, 7
    1b90:	3e f4       	brtc	.+14     	; 0x1ba0 <__floatsisf+0x12>
    1b92:	90 95       	com	r25
    1b94:	80 95       	com	r24
    1b96:	70 95       	com	r23
    1b98:	61 95       	neg	r22
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	99 23       	and	r25, r25
    1ba2:	a9 f0       	breq	.+42     	; 0x1bce <__floatsisf+0x40>
    1ba4:	f9 2f       	mov	r31, r25
    1ba6:	96 e9       	ldi	r25, 0x96	; 150
    1ba8:	bb 27       	eor	r27, r27
    1baa:	93 95       	inc	r25
    1bac:	f6 95       	lsr	r31
    1bae:	87 95       	ror	r24
    1bb0:	77 95       	ror	r23
    1bb2:	67 95       	ror	r22
    1bb4:	b7 95       	ror	r27
    1bb6:	f1 11       	cpse	r31, r1
    1bb8:	f8 cf       	rjmp	.-16     	; 0x1baa <__floatsisf+0x1c>
    1bba:	fa f4       	brpl	.+62     	; 0x1bfa <__floatsisf+0x6c>
    1bbc:	bb 0f       	add	r27, r27
    1bbe:	11 f4       	brne	.+4      	; 0x1bc4 <__floatsisf+0x36>
    1bc0:	60 ff       	sbrs	r22, 0
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <__floatsisf+0x6c>
    1bc4:	6f 5f       	subi	r22, 0xFF	; 255
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	16 c0       	rjmp	.+44     	; 0x1bfa <__floatsisf+0x6c>
    1bce:	88 23       	and	r24, r24
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <__floatsisf+0x48>
    1bd2:	96 e9       	ldi	r25, 0x96	; 150
    1bd4:	11 c0       	rjmp	.+34     	; 0x1bf8 <__floatsisf+0x6a>
    1bd6:	77 23       	and	r23, r23
    1bd8:	21 f0       	breq	.+8      	; 0x1be2 <__floatsisf+0x54>
    1bda:	9e e8       	ldi	r25, 0x8E	; 142
    1bdc:	87 2f       	mov	r24, r23
    1bde:	76 2f       	mov	r23, r22
    1be0:	05 c0       	rjmp	.+10     	; 0x1bec <__floatsisf+0x5e>
    1be2:	66 23       	and	r22, r22
    1be4:	71 f0       	breq	.+28     	; 0x1c02 <__floatsisf+0x74>
    1be6:	96 e8       	ldi	r25, 0x86	; 134
    1be8:	86 2f       	mov	r24, r22
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	2a f0       	brmi	.+10     	; 0x1bfa <__floatsisf+0x6c>
    1bf0:	9a 95       	dec	r25
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	da f7       	brpl	.-10     	; 0x1bf0 <__floatsisf+0x62>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	96 95       	lsr	r25
    1bfe:	87 95       	ror	r24
    1c00:	97 f9       	bld	r25, 7
    1c02:	08 95       	ret

00001c04 <__fp_cmp>:
    1c04:	99 0f       	add	r25, r25
    1c06:	00 08       	sbc	r0, r0
    1c08:	55 0f       	add	r21, r21
    1c0a:	aa 0b       	sbc	r26, r26
    1c0c:	e0 e8       	ldi	r30, 0x80	; 128
    1c0e:	fe ef       	ldi	r31, 0xFE	; 254
    1c10:	16 16       	cp	r1, r22
    1c12:	17 06       	cpc	r1, r23
    1c14:	e8 07       	cpc	r30, r24
    1c16:	f9 07       	cpc	r31, r25
    1c18:	c0 f0       	brcs	.+48     	; 0x1c4a <__fp_cmp+0x46>
    1c1a:	12 16       	cp	r1, r18
    1c1c:	13 06       	cpc	r1, r19
    1c1e:	e4 07       	cpc	r30, r20
    1c20:	f5 07       	cpc	r31, r21
    1c22:	98 f0       	brcs	.+38     	; 0x1c4a <__fp_cmp+0x46>
    1c24:	62 1b       	sub	r22, r18
    1c26:	73 0b       	sbc	r23, r19
    1c28:	84 0b       	sbc	r24, r20
    1c2a:	95 0b       	sbc	r25, r21
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <__fp_cmp+0x38>
    1c2e:	0a 26       	eor	r0, r26
    1c30:	61 f0       	breq	.+24     	; 0x1c4a <__fp_cmp+0x46>
    1c32:	23 2b       	or	r18, r19
    1c34:	24 2b       	or	r18, r20
    1c36:	25 2b       	or	r18, r21
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <__fp_cmp+0x3e>
    1c3a:	08 95       	ret
    1c3c:	0a 26       	eor	r0, r26
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <__fp_cmp+0x3e>
    1c40:	a1 40       	sbci	r26, 0x01	; 1
    1c42:	a6 95       	lsr	r26
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	81 1d       	adc	r24, r1
    1c48:	81 1d       	adc	r24, r1
    1c4a:	08 95       	ret

00001c4c <__fp_inf>:
    1c4c:	97 f9       	bld	r25, 7
    1c4e:	9f 67       	ori	r25, 0x7F	; 127
    1c50:	80 e8       	ldi	r24, 0x80	; 128
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	08 95       	ret

00001c58 <__fp_nan>:
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	80 ec       	ldi	r24, 0xC0	; 192
    1c5c:	08 95       	ret

00001c5e <__fp_pscA>:
    1c5e:	00 24       	eor	r0, r0
    1c60:	0a 94       	dec	r0
    1c62:	16 16       	cp	r1, r22
    1c64:	17 06       	cpc	r1, r23
    1c66:	18 06       	cpc	r1, r24
    1c68:	09 06       	cpc	r0, r25
    1c6a:	08 95       	ret

00001c6c <__fp_pscB>:
    1c6c:	00 24       	eor	r0, r0
    1c6e:	0a 94       	dec	r0
    1c70:	12 16       	cp	r1, r18
    1c72:	13 06       	cpc	r1, r19
    1c74:	14 06       	cpc	r1, r20
    1c76:	05 06       	cpc	r0, r21
    1c78:	08 95       	ret

00001c7a <__fp_round>:
    1c7a:	09 2e       	mov	r0, r25
    1c7c:	03 94       	inc	r0
    1c7e:	00 0c       	add	r0, r0
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <__fp_round+0xc>
    1c82:	88 23       	and	r24, r24
    1c84:	52 f0       	brmi	.+20     	; 0x1c9a <__fp_round+0x20>
    1c86:	bb 0f       	add	r27, r27
    1c88:	40 f4       	brcc	.+16     	; 0x1c9a <__fp_round+0x20>
    1c8a:	bf 2b       	or	r27, r31
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <__fp_round+0x18>
    1c8e:	60 ff       	sbrs	r22, 0
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <__fp_round+0x20>
    1c92:	6f 5f       	subi	r22, 0xFF	; 255
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	8f 4f       	sbci	r24, 0xFF	; 255
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	08 95       	ret

00001c9c <__fp_split3>:
    1c9c:	57 fd       	sbrc	r21, 7
    1c9e:	90 58       	subi	r25, 0x80	; 128
    1ca0:	44 0f       	add	r20, r20
    1ca2:	55 1f       	adc	r21, r21
    1ca4:	59 f0       	breq	.+22     	; 0x1cbc <__fp_splitA+0x10>
    1ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca8:	71 f0       	breq	.+28     	; 0x1cc6 <__fp_splitA+0x1a>
    1caa:	47 95       	ror	r20

00001cac <__fp_splitA>:
    1cac:	88 0f       	add	r24, r24
    1cae:	97 fb       	bst	r25, 7
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	61 f0       	breq	.+24     	; 0x1ccc <__fp_splitA+0x20>
    1cb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb6:	79 f0       	breq	.+30     	; 0x1cd6 <__fp_splitA+0x2a>
    1cb8:	87 95       	ror	r24
    1cba:	08 95       	ret
    1cbc:	12 16       	cp	r1, r18
    1cbe:	13 06       	cpc	r1, r19
    1cc0:	14 06       	cpc	r1, r20
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	f2 cf       	rjmp	.-28     	; 0x1caa <__fp_split3+0xe>
    1cc6:	46 95       	lsr	r20
    1cc8:	f1 df       	rcall	.-30     	; 0x1cac <__fp_splitA>
    1cca:	08 c0       	rjmp	.+16     	; 0x1cdc <__fp_splitA+0x30>
    1ccc:	16 16       	cp	r1, r22
    1cce:	17 06       	cpc	r1, r23
    1cd0:	18 06       	cpc	r1, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	f1 cf       	rjmp	.-30     	; 0x1cb8 <__fp_splitA+0xc>
    1cd6:	86 95       	lsr	r24
    1cd8:	71 05       	cpc	r23, r1
    1cda:	61 05       	cpc	r22, r1
    1cdc:	08 94       	sec
    1cde:	08 95       	ret

00001ce0 <__fp_zero>:
    1ce0:	e8 94       	clt

00001ce2 <__fp_szero>:
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	66 27       	eor	r22, r22
    1ce6:	77 27       	eor	r23, r23
    1ce8:	cb 01       	movw	r24, r22
    1cea:	97 f9       	bld	r25, 7
    1cec:	08 95       	ret

00001cee <__gesf2>:
    1cee:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fp_cmp>
    1cf2:	08 f4       	brcc	.+2      	; 0x1cf6 <__gesf2+0x8>
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	08 95       	ret

00001cf8 <__mulsf3>:
    1cf8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3x>
    1cfc:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_round>
    1d00:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_pscA>
    1d04:	38 f0       	brcs	.+14     	; 0x1d14 <__mulsf3+0x1c>
    1d06:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_pscB>
    1d0a:	20 f0       	brcs	.+8      	; 0x1d14 <__mulsf3+0x1c>
    1d0c:	95 23       	and	r25, r21
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <__mulsf3+0x1c>
    1d10:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1d14:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__fp_nan>
    1d18:	11 24       	eor	r1, r1
    1d1a:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>

00001d1e <__mulsf3x>:
    1d1e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_split3>
    1d22:	70 f3       	brcs	.-36     	; 0x1d00 <__mulsf3+0x8>

00001d24 <__mulsf3_pse>:
    1d24:	95 9f       	mul	r25, r21
    1d26:	c1 f3       	breq	.-16     	; 0x1d18 <__mulsf3+0x20>
    1d28:	95 0f       	add	r25, r21
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	55 1f       	adc	r21, r21
    1d2e:	62 9f       	mul	r22, r18
    1d30:	f0 01       	movw	r30, r0
    1d32:	72 9f       	mul	r23, r18
    1d34:	bb 27       	eor	r27, r27
    1d36:	f0 0d       	add	r31, r0
    1d38:	b1 1d       	adc	r27, r1
    1d3a:	63 9f       	mul	r22, r19
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	f0 0d       	add	r31, r0
    1d40:	b1 1d       	adc	r27, r1
    1d42:	aa 1f       	adc	r26, r26
    1d44:	64 9f       	mul	r22, r20
    1d46:	66 27       	eor	r22, r22
    1d48:	b0 0d       	add	r27, r0
    1d4a:	a1 1d       	adc	r26, r1
    1d4c:	66 1f       	adc	r22, r22
    1d4e:	82 9f       	mul	r24, r18
    1d50:	22 27       	eor	r18, r18
    1d52:	b0 0d       	add	r27, r0
    1d54:	a1 1d       	adc	r26, r1
    1d56:	62 1f       	adc	r22, r18
    1d58:	73 9f       	mul	r23, r19
    1d5a:	b0 0d       	add	r27, r0
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	62 1f       	adc	r22, r18
    1d60:	83 9f       	mul	r24, r19
    1d62:	a0 0d       	add	r26, r0
    1d64:	61 1d       	adc	r22, r1
    1d66:	22 1f       	adc	r18, r18
    1d68:	74 9f       	mul	r23, r20
    1d6a:	33 27       	eor	r19, r19
    1d6c:	a0 0d       	add	r26, r0
    1d6e:	61 1d       	adc	r22, r1
    1d70:	23 1f       	adc	r18, r19
    1d72:	84 9f       	mul	r24, r20
    1d74:	60 0d       	add	r22, r0
    1d76:	21 1d       	adc	r18, r1
    1d78:	82 2f       	mov	r24, r18
    1d7a:	76 2f       	mov	r23, r22
    1d7c:	6a 2f       	mov	r22, r26
    1d7e:	11 24       	eor	r1, r1
    1d80:	9f 57       	subi	r25, 0x7F	; 127
    1d82:	50 40       	sbci	r21, 0x00	; 0
    1d84:	9a f0       	brmi	.+38     	; 0x1dac <__mulsf3_pse+0x88>
    1d86:	f1 f0       	breq	.+60     	; 0x1dc4 <__mulsf3_pse+0xa0>
    1d88:	88 23       	and	r24, r24
    1d8a:	4a f0       	brmi	.+18     	; 0x1d9e <__mulsf3_pse+0x7a>
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	bb 1f       	adc	r27, r27
    1d92:	66 1f       	adc	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	91 50       	subi	r25, 0x01	; 1
    1d9a:	50 40       	sbci	r21, 0x00	; 0
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <__mulsf3_pse+0x64>
    1d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1da0:	51 05       	cpc	r21, r1
    1da2:	80 f0       	brcs	.+32     	; 0x1dc4 <__mulsf3_pse+0xa0>
    1da4:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_inf>
    1da8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__fp_szero>
    1dac:	5f 3f       	cpi	r21, 0xFF	; 255
    1dae:	e4 f3       	brlt	.-8      	; 0x1da8 <__mulsf3_pse+0x84>
    1db0:	98 3e       	cpi	r25, 0xE8	; 232
    1db2:	d4 f3       	brlt	.-12     	; 0x1da8 <__mulsf3_pse+0x84>
    1db4:	86 95       	lsr	r24
    1db6:	77 95       	ror	r23
    1db8:	67 95       	ror	r22
    1dba:	b7 95       	ror	r27
    1dbc:	f7 95       	ror	r31
    1dbe:	e7 95       	ror	r30
    1dc0:	9f 5f       	subi	r25, 0xFF	; 255
    1dc2:	c1 f7       	brne	.-16     	; 0x1db4 <__mulsf3_pse+0x90>
    1dc4:	fe 2b       	or	r31, r30
    1dc6:	88 0f       	add	r24, r24
    1dc8:	91 1d       	adc	r25, r1
    1dca:	96 95       	lsr	r25
    1dcc:	87 95       	ror	r24
    1dce:	97 f9       	bld	r25, 7
    1dd0:	08 95       	ret

00001dd2 <malloc>:
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	91 05       	cpc	r25, r1
    1dda:	10 f4       	brcc	.+4      	; 0x1de0 <malloc+0xe>
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	e0 91 30 03 	lds	r30, 0x0330
    1de4:	f0 91 31 03 	lds	r31, 0x0331
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	c0 e0       	ldi	r28, 0x00	; 0
    1dee:	d0 e0       	ldi	r29, 0x00	; 0
    1df0:	30 97       	sbiw	r30, 0x00	; 0
    1df2:	11 f1       	breq	.+68     	; 0x1e38 <malloc+0x66>
    1df4:	40 81       	ld	r20, Z
    1df6:	51 81       	ldd	r21, Z+1	; 0x01
    1df8:	48 17       	cp	r20, r24
    1dfa:	59 07       	cpc	r21, r25
    1dfc:	c0 f0       	brcs	.+48     	; 0x1e2e <malloc+0x5c>
    1dfe:	48 17       	cp	r20, r24
    1e00:	59 07       	cpc	r21, r25
    1e02:	61 f4       	brne	.+24     	; 0x1e1c <malloc+0x4a>
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	20 97       	sbiw	r28, 0x00	; 0
    1e0a:	19 f0       	breq	.+6      	; 0x1e12 <malloc+0x40>
    1e0c:	9b 83       	std	Y+3, r25	; 0x03
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
    1e10:	2b c0       	rjmp	.+86     	; 0x1e68 <malloc+0x96>
    1e12:	90 93 31 03 	sts	0x0331, r25
    1e16:	80 93 30 03 	sts	0x0330, r24
    1e1a:	26 c0       	rjmp	.+76     	; 0x1e68 <malloc+0x96>
    1e1c:	21 15       	cp	r18, r1
    1e1e:	31 05       	cpc	r19, r1
    1e20:	19 f0       	breq	.+6      	; 0x1e28 <malloc+0x56>
    1e22:	42 17       	cp	r20, r18
    1e24:	53 07       	cpc	r21, r19
    1e26:	18 f4       	brcc	.+6      	; 0x1e2e <malloc+0x5c>
    1e28:	9a 01       	movw	r18, r20
    1e2a:	be 01       	movw	r22, r28
    1e2c:	df 01       	movw	r26, r30
    1e2e:	ef 01       	movw	r28, r30
    1e30:	02 80       	ldd	r0, Z+2	; 0x02
    1e32:	f3 81       	ldd	r31, Z+3	; 0x03
    1e34:	e0 2d       	mov	r30, r0
    1e36:	dc cf       	rjmp	.-72     	; 0x1df0 <malloc+0x1e>
    1e38:	21 15       	cp	r18, r1
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	09 f1       	breq	.+66     	; 0x1e80 <malloc+0xae>
    1e3e:	28 1b       	sub	r18, r24
    1e40:	39 0b       	sbc	r19, r25
    1e42:	24 30       	cpi	r18, 0x04	; 4
    1e44:	31 05       	cpc	r19, r1
    1e46:	90 f4       	brcc	.+36     	; 0x1e6c <malloc+0x9a>
    1e48:	12 96       	adiw	r26, 0x02	; 2
    1e4a:	8d 91       	ld	r24, X+
    1e4c:	9c 91       	ld	r25, X
    1e4e:	13 97       	sbiw	r26, 0x03	; 3
    1e50:	61 15       	cp	r22, r1
    1e52:	71 05       	cpc	r23, r1
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <malloc+0x8c>
    1e56:	fb 01       	movw	r30, r22
    1e58:	93 83       	std	Z+3, r25	; 0x03
    1e5a:	82 83       	std	Z+2, r24	; 0x02
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <malloc+0x94>
    1e5e:	90 93 31 03 	sts	0x0331, r25
    1e62:	80 93 30 03 	sts	0x0330, r24
    1e66:	fd 01       	movw	r30, r26
    1e68:	32 96       	adiw	r30, 0x02	; 2
    1e6a:	44 c0       	rjmp	.+136    	; 0x1ef4 <malloc+0x122>
    1e6c:	fd 01       	movw	r30, r26
    1e6e:	e2 0f       	add	r30, r18
    1e70:	f3 1f       	adc	r31, r19
    1e72:	81 93       	st	Z+, r24
    1e74:	91 93       	st	Z+, r25
    1e76:	22 50       	subi	r18, 0x02	; 2
    1e78:	31 09       	sbc	r19, r1
    1e7a:	2d 93       	st	X+, r18
    1e7c:	3c 93       	st	X, r19
    1e7e:	3a c0       	rjmp	.+116    	; 0x1ef4 <malloc+0x122>
    1e80:	20 91 2e 03 	lds	r18, 0x032E
    1e84:	30 91 2f 03 	lds	r19, 0x032F
    1e88:	23 2b       	or	r18, r19
    1e8a:	41 f4       	brne	.+16     	; 0x1e9c <malloc+0xca>
    1e8c:	20 91 02 01 	lds	r18, 0x0102
    1e90:	30 91 03 01 	lds	r19, 0x0103
    1e94:	30 93 2f 03 	sts	0x032F, r19
    1e98:	20 93 2e 03 	sts	0x032E, r18
    1e9c:	20 91 00 01 	lds	r18, 0x0100
    1ea0:	30 91 01 01 	lds	r19, 0x0101
    1ea4:	21 15       	cp	r18, r1
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	41 f4       	brne	.+16     	; 0x1eba <malloc+0xe8>
    1eaa:	2d b7       	in	r18, 0x3d	; 61
    1eac:	3e b7       	in	r19, 0x3e	; 62
    1eae:	40 91 04 01 	lds	r20, 0x0104
    1eb2:	50 91 05 01 	lds	r21, 0x0105
    1eb6:	24 1b       	sub	r18, r20
    1eb8:	35 0b       	sbc	r19, r21
    1eba:	e0 91 2e 03 	lds	r30, 0x032E
    1ebe:	f0 91 2f 03 	lds	r31, 0x032F
    1ec2:	e2 17       	cp	r30, r18
    1ec4:	f3 07       	cpc	r31, r19
    1ec6:	a0 f4       	brcc	.+40     	; 0x1ef0 <malloc+0x11e>
    1ec8:	2e 1b       	sub	r18, r30
    1eca:	3f 0b       	sbc	r19, r31
    1ecc:	28 17       	cp	r18, r24
    1ece:	39 07       	cpc	r19, r25
    1ed0:	78 f0       	brcs	.+30     	; 0x1ef0 <malloc+0x11e>
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	4e 5f       	subi	r20, 0xFE	; 254
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	24 17       	cp	r18, r20
    1eda:	35 07       	cpc	r19, r21
    1edc:	48 f0       	brcs	.+18     	; 0x1ef0 <malloc+0x11e>
    1ede:	4e 0f       	add	r20, r30
    1ee0:	5f 1f       	adc	r21, r31
    1ee2:	50 93 2f 03 	sts	0x032F, r21
    1ee6:	40 93 2e 03 	sts	0x032E, r20
    1eea:	81 93       	st	Z+, r24
    1eec:	91 93       	st	Z+, r25
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <malloc+0x122>
    1ef0:	e0 e0       	ldi	r30, 0x00	; 0
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	cf 01       	movw	r24, r30
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	08 95       	ret

00001efc <free>:
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <free+0xe>
    1f08:	8c c0       	rjmp	.+280    	; 0x2022 <free+0x126>
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	32 97       	sbiw	r30, 0x02	; 2
    1f0e:	13 82       	std	Z+3, r1	; 0x03
    1f10:	12 82       	std	Z+2, r1	; 0x02
    1f12:	00 91 30 03 	lds	r16, 0x0330
    1f16:	10 91 31 03 	lds	r17, 0x0331
    1f1a:	01 15       	cp	r16, r1
    1f1c:	11 05       	cpc	r17, r1
    1f1e:	81 f4       	brne	.+32     	; 0x1f40 <free+0x44>
    1f20:	20 81       	ld	r18, Z
    1f22:	31 81       	ldd	r19, Z+1	; 0x01
    1f24:	82 0f       	add	r24, r18
    1f26:	93 1f       	adc	r25, r19
    1f28:	20 91 2e 03 	lds	r18, 0x032E
    1f2c:	30 91 2f 03 	lds	r19, 0x032F
    1f30:	28 17       	cp	r18, r24
    1f32:	39 07       	cpc	r19, r25
    1f34:	79 f5       	brne	.+94     	; 0x1f94 <free+0x98>
    1f36:	f0 93 2f 03 	sts	0x032F, r31
    1f3a:	e0 93 2e 03 	sts	0x032E, r30
    1f3e:	71 c0       	rjmp	.+226    	; 0x2022 <free+0x126>
    1f40:	d8 01       	movw	r26, r16
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	ae 17       	cp	r26, r30
    1f48:	bf 07       	cpc	r27, r31
    1f4a:	50 f4       	brcc	.+20     	; 0x1f60 <free+0x64>
    1f4c:	12 96       	adiw	r26, 0x02	; 2
    1f4e:	2d 91       	ld	r18, X+
    1f50:	3c 91       	ld	r19, X
    1f52:	13 97       	sbiw	r26, 0x03	; 3
    1f54:	ad 01       	movw	r20, r26
    1f56:	21 15       	cp	r18, r1
    1f58:	31 05       	cpc	r19, r1
    1f5a:	09 f1       	breq	.+66     	; 0x1f9e <free+0xa2>
    1f5c:	d9 01       	movw	r26, r18
    1f5e:	f3 cf       	rjmp	.-26     	; 0x1f46 <free+0x4a>
    1f60:	9d 01       	movw	r18, r26
    1f62:	da 01       	movw	r26, r20
    1f64:	33 83       	std	Z+3, r19	; 0x03
    1f66:	22 83       	std	Z+2, r18	; 0x02
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	86 0f       	add	r24, r22
    1f6e:	97 1f       	adc	r25, r23
    1f70:	82 17       	cp	r24, r18
    1f72:	93 07       	cpc	r25, r19
    1f74:	69 f4       	brne	.+26     	; 0x1f90 <free+0x94>
    1f76:	ec 01       	movw	r28, r24
    1f78:	28 81       	ld	r18, Y
    1f7a:	39 81       	ldd	r19, Y+1	; 0x01
    1f7c:	26 0f       	add	r18, r22
    1f7e:	37 1f       	adc	r19, r23
    1f80:	2e 5f       	subi	r18, 0xFE	; 254
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	31 83       	std	Z+1, r19	; 0x01
    1f86:	20 83       	st	Z, r18
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	93 83       	std	Z+3, r25	; 0x03
    1f8e:	82 83       	std	Z+2, r24	; 0x02
    1f90:	45 2b       	or	r20, r21
    1f92:	29 f4       	brne	.+10     	; 0x1f9e <free+0xa2>
    1f94:	f0 93 31 03 	sts	0x0331, r31
    1f98:	e0 93 30 03 	sts	0x0330, r30
    1f9c:	42 c0       	rjmp	.+132    	; 0x2022 <free+0x126>
    1f9e:	13 96       	adiw	r26, 0x03	; 3
    1fa0:	fc 93       	st	X, r31
    1fa2:	ee 93       	st	-X, r30
    1fa4:	12 97       	sbiw	r26, 0x02	; 2
    1fa6:	ed 01       	movw	r28, r26
    1fa8:	49 91       	ld	r20, Y+
    1faa:	59 91       	ld	r21, Y+
    1fac:	9e 01       	movw	r18, r28
    1fae:	24 0f       	add	r18, r20
    1fb0:	35 1f       	adc	r19, r21
    1fb2:	e2 17       	cp	r30, r18
    1fb4:	f3 07       	cpc	r31, r19
    1fb6:	71 f4       	brne	.+28     	; 0x1fd4 <free+0xd8>
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	84 0f       	add	r24, r20
    1fbe:	95 1f       	adc	r25, r21
    1fc0:	02 96       	adiw	r24, 0x02	; 2
    1fc2:	11 96       	adiw	r26, 0x01	; 1
    1fc4:	9c 93       	st	X, r25
    1fc6:	8e 93       	st	-X, r24
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	13 96       	adiw	r26, 0x03	; 3
    1fce:	9c 93       	st	X, r25
    1fd0:	8e 93       	st	-X, r24
    1fd2:	12 97       	sbiw	r26, 0x02	; 2
    1fd4:	e0 e0       	ldi	r30, 0x00	; 0
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	d8 01       	movw	r26, r16
    1fda:	12 96       	adiw	r26, 0x02	; 2
    1fdc:	8d 91       	ld	r24, X+
    1fde:	9c 91       	ld	r25, X
    1fe0:	13 97       	sbiw	r26, 0x03	; 3
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <free+0xf0>
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	8c 01       	movw	r16, r24
    1fea:	f6 cf       	rjmp	.-20     	; 0x1fd8 <free+0xdc>
    1fec:	8d 91       	ld	r24, X+
    1fee:	9c 91       	ld	r25, X
    1ff0:	98 01       	movw	r18, r16
    1ff2:	2e 5f       	subi	r18, 0xFE	; 254
    1ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff6:	82 0f       	add	r24, r18
    1ff8:	93 1f       	adc	r25, r19
    1ffa:	20 91 2e 03 	lds	r18, 0x032E
    1ffe:	30 91 2f 03 	lds	r19, 0x032F
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	69 f4       	brne	.+26     	; 0x2022 <free+0x126>
    2008:	30 97       	sbiw	r30, 0x00	; 0
    200a:	29 f4       	brne	.+10     	; 0x2016 <free+0x11a>
    200c:	10 92 31 03 	sts	0x0331, r1
    2010:	10 92 30 03 	sts	0x0330, r1
    2014:	02 c0       	rjmp	.+4      	; 0x201a <free+0x11e>
    2016:	13 82       	std	Z+3, r1	; 0x03
    2018:	12 82       	std	Z+2, r1	; 0x02
    201a:	10 93 2f 03 	sts	0x032F, r17
    201e:	00 93 2e 03 	sts	0x032E, r16
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <_exit>:
    202c:	f8 94       	cli

0000202e <__stop_program>:
    202e:	ff cf       	rjmp	.-2      	; 0x202e <__stop_program>
