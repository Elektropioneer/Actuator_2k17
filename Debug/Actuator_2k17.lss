
Actuator_2k17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000204c  000020e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000204c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  00800106  00800106  000020e6  2**0
                  ALLOC
  3 .stab         00002cc4  00000000  00000000  000020e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144c  00000000  00000000  00004dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000620c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a6 e0       	ldi	r26, 0x06	; 6
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a2 33       	cpi	r26, 0x32	; 50
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e4       	ldi	r30, 0x4C	; 76
      b8:	f0 e2       	ldi	r31, 0x20	; 32
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a6 30       	cpi	r26, 0x06	; 6
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
      ca:	0e 94 1e 09 	call	0x123c	; 0x123c <main>
      ce:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ball_grabbers>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the ball grabbers servos
 *	Help: 			to adjust parameters go to control.h
 */
static void ball_grabbers(unsigned char side, unsigned char state)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <ball_grabbers+0x6>
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	89 83       	std	Y+1, r24	; 0x01
      e2:	6a 83       	std	Y+2, r22	; 0x02
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	09 f5       	brne	.+66     	; 0x12c <ball_grabbers+0x56>
	{
		if(state == UP)
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	49 f4       	brne	.+18     	; 0x102 <ball_grabbers+0x2c>
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_LEFT);
      f0:	2a e0       	ldi	r18, 0x0A	; 10
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	60 ef       	ldi	r22, 0xF0	; 240
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	88 e0       	ldi	r24, 0x08	; 8
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     100:	35 c0       	rjmp	.+106    	; 0x16c <ball_grabbers+0x96>
		}
		else if(state == DOWN)
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	88 23       	and	r24, r24
     106:	49 f4       	brne	.+18     	; 0x11a <ball_grabbers+0x44>
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_LEFT);
     108:	2a e0       	ldi	r18, 0x0A	; 10
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	60 ef       	ldi	r22, 0xF0	; 240
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	84 e9       	ldi	r24, 0x94	; 148
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     118:	29 c0       	rjmp	.+82     	; 0x16c <ball_grabbers+0x96>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_MID, AX_SPEED_FAST, CW, ID_BALLGRABBER_LEFT);
     11a:	2a e0       	ldi	r18, 0x0A	; 10
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	60 ef       	ldi	r22, 0xF0	; 240
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	8b ee       	ldi	r24, 0xEB	; 235
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     12a:	20 c0       	rjmp	.+64     	; 0x16c <ball_grabbers+0x96>
		}
	}
	else
	{
		if(state == UP)
     12c:	8a 81       	ldd	r24, Y+2	; 0x02
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	49 f4       	brne	.+18     	; 0x144 <ball_grabbers+0x6e>
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_RIGHT);
     132:	23 e0       	ldi	r18, 0x03	; 3
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	60 ef       	ldi	r22, 0xF0	; 240
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	80 e9       	ldi	r24, 0x90	; 144
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     142:	14 c0       	rjmp	.+40     	; 0x16c <ball_grabbers+0x96>
		}
		else if(state == DOWN)
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	88 23       	and	r24, r24
     148:	49 f4       	brne	.+18     	; 0x15c <ball_grabbers+0x86>
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_RIGHT);
     14a:	23 e0       	ldi	r18, 0x03	; 3
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	60 ef       	ldi	r22, 0xF0	; 240
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	80 ef       	ldi	r24, 0xF0	; 240
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     15a:	08 c0       	rjmp	.+16     	; 0x16c <ball_grabbers+0x96>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_MID, AX_SPEED_FAST, CW, ID_BALLGRABBER_RIGHT);
     15c:	23 e0       	ldi	r18, 0x03	; 3
     15e:	40 e0       	ldi	r20, 0x00	; 0
     160:	60 ef       	ldi	r22, 0xF0	; 240
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	80 ea       	ldi	r24, 0xA0	; 160
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
		}
	}
}
     16c:	0f 90       	pop	r0
     16e:	0f 90       	pop	r0
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <dispenser>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the dispensers position
 *	Help: 			to adjust parameters go to control.h
 */
static void dispenser(unsigned char side, unsigned char state)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <dispenser+0x6>
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	6a 83       	std	Y+2, r22	; 0x02
	// ! configure the ax servo id's in control.h file !
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	a9 f4       	brne	.+42     	; 0x1b4 <dispenser+0x3e>
	{
		if(state == UP)
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	49 f4       	brne	.+18     	; 0x1a2 <dispenser+0x2c>
		{
			AX_SetAngle(POS_DISPENSERLEFT_UP, AX_SPEED_FAST, CW, ID_DISPENSER_LEFT);
     190:	22 e0       	ldi	r18, 0x02	; 2
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	60 ef       	ldi	r22, 0xF0	; 240
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	8b ef       	ldi	r24, 0xFB	; 251
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     1a0:	1d c0       	rjmp	.+58     	; 0x1dc <dispenser+0x66>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERLEFT_DOWN, AX_SPEED_FAST, CCW, ID_DISPENSER_LEFT);
     1a2:	22 e0       	ldi	r18, 0x02	; 2
     1a4:	41 e0       	ldi	r20, 0x01	; 1
     1a6:	60 ef       	ldi	r22, 0xF0	; 240
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	8b e9       	ldi	r24, 0x9B	; 155
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     1b2:	14 c0       	rjmp	.+40     	; 0x1dc <dispenser+0x66>
		}
	}
	else
	{
		if(state == UP)
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	49 f4       	brne	.+18     	; 0x1cc <dispenser+0x56>
		{
			AX_SetAngle(POS_DISPENSERRIGHT_UP, AX_SPEED_FAST, CW, ID_DISPENSER_RIGHT);
     1ba:	24 e0       	ldi	r18, 0x04	; 4
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	60 ef       	ldi	r22, 0xF0	; 240
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	82 e3       	ldi	r24, 0x32	; 50
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
     1ca:	08 c0       	rjmp	.+16     	; 0x1dc <dispenser+0x66>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERRIGHT_DOWN, AX_SPEED_FAST, CW, ID_DISPENSER_RIGHT);
     1cc:	24 e0       	ldi	r18, 0x04	; 4
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	60 ef       	ldi	r22, 0xF0	; 240
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	8e e8       	ldi	r24, 0x8E	; 142
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <AX_SetAngle>
		}
	}
}
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <mosfet>:
 *	Parameters: unsigned char side 	- which side diafram to control
 *				unsigned char state	- ON or OFF state
 *	Description: controls the mosfets that turn 12V on or off
 */
static void mosfet(unsigned char side, unsigned char state)
{
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <mosfet+0x6>
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	6a 83       	std	Y+2, r22	; 0x02
	if(side == LEFT)
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	69 f4       	brne	.+26     	; 0x214 <mosfet+0x2e>
	{
		if(state == ON)
     1fa:	8a 81       	ldd	r24, Y+2	; 0x02
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	29 f4       	brne	.+10     	; 0x20a <mosfet+0x24>
		{
			GPIO_OutputSet(pinE4);
     200:	80 91 2b 03 	lds	r24, 0x032B
     204:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <GPIO_OutputSet>
     208:	11 c0       	rjmp	.+34     	; 0x22c <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE4);
     20a:	80 91 2b 03 	lds	r24, 0x032B
     20e:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_OutputReset>
     212:	0c c0       	rjmp	.+24     	; 0x22c <mosfet+0x46>
		}
	}
	else
	{
		if(state == ON)
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	29 f4       	brne	.+10     	; 0x224 <mosfet+0x3e>
		{
			GPIO_OutputSet(pinE5);
     21a:	80 91 2d 03 	lds	r24, 0x032D
     21e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <GPIO_OutputSet>
     222:	04 c0       	rjmp	.+8      	; 0x22c <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE5);
     224:	80 91 2d 03 	lds	r24, 0x032D
     228:	0e 94 25 0b 	call	0x164a	; 0x164a <GPIO_OutputReset>
		}
	}
}
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <motor>:

static void motor(unsigned char direction, int8_t pwm)
{
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <motor+0x6>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	6a 83       	std	Y+2, r22	; 0x02
	}
	else
	{

	}
}
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <action>:
 *	Function: 		void action(canMsg msg)
 *	Parameters: 	canMsg msg
 *	Description: 	decides actions on can msg received
 */
void action(canMsg msg)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	a6 97       	sbiw	r28, 0x26	; 38
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	0d 8f       	std	Y+29, r16	; 0x1d
     268:	1e 8f       	std	Y+30, r17	; 0x1e
     26a:	2f 8f       	std	Y+31, r18	; 0x1f
     26c:	38 a3       	std	Y+32, r19	; 0x20
     26e:	49 a3       	std	Y+33, r20	; 0x21
     270:	5a a3       	std	Y+34, r21	; 0x22
     272:	6b a3       	std	Y+35, r22	; 0x23
     274:	7c a3       	std	Y+36, r23	; 0x24
     276:	8d a3       	std	Y+37, r24	; 0x25
     278:	9e a3       	std	Y+38, r25	; 0x26
	dispenser(RIGHT, UP);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 bb 00 	call	0x176	; 0x176 <dispenser>
	dispenser(LEFT, UP);
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 bb 00 	call	0x176	; 0x176 <dispenser>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	aa ef       	ldi	r26, 0xFA	; 250
     290:	b4 e4       	ldi	r27, 0x44	; 68
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	9a 83       	std	Y+2, r25	; 0x02
     296:	ab 83       	std	Y+3, r26	; 0x03
     298:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e4       	ldi	r19, 0x40	; 64
     29e:	4c e1       	ldi	r20, 0x1C	; 28
     2a0:	55 e4       	ldi	r21, 0x45	; 69
     2a2:	69 81       	ldd	r22, Y+1	; 0x01
     2a4:	7a 81       	ldd	r23, Y+2	; 0x02
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	9c 81       	ldd	r25, Y+4	; 0x04
     2aa:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     2ae:	dc 01       	movw	r26, r24
     2b0:	cb 01       	movw	r24, r22
     2b2:	8d 83       	std	Y+5, r24	; 0x05
     2b4:	9e 83       	std	Y+6, r25	; 0x06
     2b6:	af 83       	std	Y+7, r26	; 0x07
     2b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e8       	ldi	r20, 0x80	; 128
     2c0:	5f e3       	ldi	r21, 0x3F	; 63
     2c2:	6d 81       	ldd	r22, Y+5	; 0x05
     2c4:	7e 81       	ldd	r23, Y+6	; 0x06
     2c6:	8f 81       	ldd	r24, Y+7	; 0x07
     2c8:	98 85       	ldd	r25, Y+8	; 0x08
     2ca:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__cmpsf2>
     2ce:	88 23       	and	r24, r24
     2d0:	2c f4       	brge	.+10     	; 0x2dc <action+0x8e>
		__ticks = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	9a 87       	std	Y+10, r25	; 0x0a
     2d8:	89 87       	std	Y+9, r24	; 0x09
     2da:	3f c0       	rjmp	.+126    	; 0x35a <action+0x10c>
	else if (__tmp > 65535)
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	3f ef       	ldi	r19, 0xFF	; 255
     2e0:	4f e7       	ldi	r20, 0x7F	; 127
     2e2:	57 e4       	ldi	r21, 0x47	; 71
     2e4:	6d 81       	ldd	r22, Y+5	; 0x05
     2e6:	7e 81       	ldd	r23, Y+6	; 0x06
     2e8:	8f 81       	ldd	r24, Y+7	; 0x07
     2ea:	98 85       	ldd	r25, Y+8	; 0x08
     2ec:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__gesf2>
     2f0:	18 16       	cp	r1, r24
     2f2:	4c f5       	brge	.+82     	; 0x346 <action+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e2       	ldi	r20, 0x20	; 32
     2fa:	51 e4       	ldi	r21, 0x41	; 65
     2fc:	69 81       	ldd	r22, Y+1	; 0x01
     2fe:	7a 81       	ldd	r23, Y+2	; 0x02
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	9c 81       	ldd	r25, Y+4	; 0x04
     304:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	bc 01       	movw	r22, r24
     30e:	cd 01       	movw	r24, r26
     310:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     314:	dc 01       	movw	r26, r24
     316:	cb 01       	movw	r24, r22
     318:	9a 87       	std	Y+10, r25	; 0x0a
     31a:	89 87       	std	Y+9, r24	; 0x09
     31c:	0f c0       	rjmp	.+30     	; 0x33c <action+0xee>
     31e:	8a ef       	ldi	r24, 0xFA	; 250
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	9c 87       	std	Y+12, r25	; 0x0c
     324:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     326:	8b 85       	ldd	r24, Y+11	; 0x0b
     328:	9c 85       	ldd	r25, Y+12	; 0x0c
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <action+0xdc>
     32e:	9c 87       	std	Y+12, r25	; 0x0c
     330:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     332:	89 85       	ldd	r24, Y+9	; 0x09
     334:	9a 85       	ldd	r25, Y+10	; 0x0a
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	9a 87       	std	Y+10, r25	; 0x0a
     33a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     33c:	89 85       	ldd	r24, Y+9	; 0x09
     33e:	9a 85       	ldd	r25, Y+10	; 0x0a
     340:	89 2b       	or	r24, r25
     342:	69 f7       	brne	.-38     	; 0x31e <action+0xd0>
     344:	14 c0       	rjmp	.+40     	; 0x36e <action+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     346:	6d 81       	ldd	r22, Y+5	; 0x05
     348:	7e 81       	ldd	r23, Y+6	; 0x06
     34a:	8f 81       	ldd	r24, Y+7	; 0x07
     34c:	98 85       	ldd	r25, Y+8	; 0x08
     34e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	9a 87       	std	Y+10, r25	; 0x0a
     358:	89 87       	std	Y+9, r24	; 0x09
     35a:	89 85       	ldd	r24, Y+9	; 0x09
     35c:	9a 85       	ldd	r25, Y+10	; 0x0a
     35e:	9e 87       	std	Y+14, r25	; 0x0e
     360:	8d 87       	std	Y+13, r24	; 0x0d
     362:	8d 85       	ldd	r24, Y+13	; 0x0d
     364:	9e 85       	ldd	r25, Y+14	; 0x0e
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <action+0x118>
     36a:	9e 87       	std	Y+14, r25	; 0x0e
     36c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2000);
	dispenser(RIGHT, DOWN);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 bb 00 	call	0x176	; 0x176 <dispenser>
	dispenser(LEFT, DOWN);
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 bb 00 	call	0x176	; 0x176 <dispenser>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	aa ef       	ldi	r26, 0xFA	; 250
     384:	b4 e4       	ldi	r27, 0x44	; 68
     386:	8f 87       	std	Y+15, r24	; 0x0f
     388:	98 8b       	std	Y+16, r25	; 0x10
     38a:	a9 8b       	std	Y+17, r26	; 0x11
     38c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e4       	ldi	r19, 0x40	; 64
     392:	4c e1       	ldi	r20, 0x1C	; 28
     394:	55 e4       	ldi	r21, 0x45	; 69
     396:	6f 85       	ldd	r22, Y+15	; 0x0f
     398:	78 89       	ldd	r23, Y+16	; 0x10
     39a:	89 89       	ldd	r24, Y+17	; 0x11
     39c:	9a 89       	ldd	r25, Y+18	; 0x12
     39e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     3a2:	dc 01       	movw	r26, r24
     3a4:	cb 01       	movw	r24, r22
     3a6:	8b 8b       	std	Y+19, r24	; 0x13
     3a8:	9c 8b       	std	Y+20, r25	; 0x14
     3aa:	ad 8b       	std	Y+21, r26	; 0x15
     3ac:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e8       	ldi	r20, 0x80	; 128
     3b4:	5f e3       	ldi	r21, 0x3F	; 63
     3b6:	6b 89       	ldd	r22, Y+19	; 0x13
     3b8:	7c 89       	ldd	r23, Y+20	; 0x14
     3ba:	8d 89       	ldd	r24, Y+21	; 0x15
     3bc:	9e 89       	ldd	r25, Y+22	; 0x16
     3be:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__cmpsf2>
     3c2:	88 23       	and	r24, r24
     3c4:	2c f4       	brge	.+10     	; 0x3d0 <action+0x182>
		__ticks = 1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	98 8f       	std	Y+24, r25	; 0x18
     3cc:	8f 8b       	std	Y+23, r24	; 0x17
     3ce:	3f c0       	rjmp	.+126    	; 0x44e <action+0x200>
	else if (__tmp > 65535)
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	3f ef       	ldi	r19, 0xFF	; 255
     3d4:	4f e7       	ldi	r20, 0x7F	; 127
     3d6:	57 e4       	ldi	r21, 0x47	; 71
     3d8:	6b 89       	ldd	r22, Y+19	; 0x13
     3da:	7c 89       	ldd	r23, Y+20	; 0x14
     3dc:	8d 89       	ldd	r24, Y+21	; 0x15
     3de:	9e 89       	ldd	r25, Y+22	; 0x16
     3e0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__gesf2>
     3e4:	18 16       	cp	r1, r24
     3e6:	4c f5       	brge	.+82     	; 0x43a <action+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e2       	ldi	r20, 0x20	; 32
     3ee:	51 e4       	ldi	r21, 0x41	; 65
     3f0:	6f 85       	ldd	r22, Y+15	; 0x0f
     3f2:	78 89       	ldd	r23, Y+16	; 0x10
     3f4:	89 89       	ldd	r24, Y+17	; 0x11
     3f6:	9a 89       	ldd	r25, Y+18	; 0x12
     3f8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     408:	dc 01       	movw	r26, r24
     40a:	cb 01       	movw	r24, r22
     40c:	98 8f       	std	Y+24, r25	; 0x18
     40e:	8f 8b       	std	Y+23, r24	; 0x17
     410:	0f c0       	rjmp	.+30     	; 0x430 <action+0x1e2>
     412:	8a ef       	ldi	r24, 0xFA	; 250
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9a 8f       	std	Y+26, r25	; 0x1a
     418:	89 8f       	std	Y+25, r24	; 0x19
     41a:	89 8d       	ldd	r24, Y+25	; 0x19
     41c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <action+0x1d0>
     422:	9a 8f       	std	Y+26, r25	; 0x1a
     424:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     426:	8f 89       	ldd	r24, Y+23	; 0x17
     428:	98 8d       	ldd	r25, Y+24	; 0x18
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	98 8f       	std	Y+24, r25	; 0x18
     42e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     430:	8f 89       	ldd	r24, Y+23	; 0x17
     432:	98 8d       	ldd	r25, Y+24	; 0x18
     434:	89 2b       	or	r24, r25
     436:	69 f7       	brne	.-38     	; 0x412 <action+0x1c4>
     438:	14 c0       	rjmp	.+40     	; 0x462 <action+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     43a:	6b 89       	ldd	r22, Y+19	; 0x13
     43c:	7c 89       	ldd	r23, Y+20	; 0x14
     43e:	8d 89       	ldd	r24, Y+21	; 0x15
     440:	9e 89       	ldd	r25, Y+22	; 0x16
     442:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	98 8f       	std	Y+24, r25	; 0x18
     44c:	8f 8b       	std	Y+23, r24	; 0x17
     44e:	8f 89       	ldd	r24, Y+23	; 0x17
     450:	98 8d       	ldd	r25, Y+24	; 0x18
     452:	9c 8f       	std	Y+28, r25	; 0x1c
     454:	8b 8f       	std	Y+27, r24	; 0x1b
     456:	8b 8d       	ldd	r24, Y+27	; 0x1b
     458:	9c 8d       	ldd	r25, Y+28	; 0x1c
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <action+0x20c>
     45e:	9c 8f       	std	Y+28, r25	; 0x1c
     460:	8b 8f       	std	Y+27, r24	; 0x1b
			pwm		= msg.data[2];
			motor(state, pwm);

			break;
	}*/
}
     462:	a6 96       	adiw	r28, 0x26	; 38
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	08 95       	ret

00000478 <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	00 90 5f 00 	lds	r0, 0x005F
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	00 90 5b 00 	lds	r0, 0x005B
     488:	0f 92       	push	r0
     48a:	2f 93       	push	r18
     48c:	3f 93       	push	r19
     48e:	4f 93       	push	r20
     490:	5f 93       	push	r21
     492:	6f 93       	push	r22
     494:	7f 93       	push	r23
     496:	8f 93       	push	r24
     498:	9f 93       	push	r25
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <__vector_18+0x2c>
     4a4:	1f 92       	push	r1
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     4aa:	8d ee       	ldi	r24, 0xED	; 237
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	fc 01       	movw	r30, r24
     4b0:	80 81       	ld	r24, Z
     4b2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     4b4:	19 82       	std	Y+1, r1	; 0x01
     4b6:	9f c0       	rjmp	.+318    	; 0x5f6 <__vector_18+0x17e>
	{
		CANPAGE = ch << 4;
     4b8:	8d ee       	ldi	r24, 0xED	; 237
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	29 81       	ldd	r18, Y+1	; 0x01
     4be:	22 95       	swap	r18
     4c0:	20 7f       	andi	r18, 0xF0	; 240
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18

		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
     4c6:	8e ee       	ldi	r24, 0xEE	; 238
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	82 95       	swap	r24
     4d0:	86 95       	lsr	r24
     4d2:	87 70       	andi	r24, 0x07	; 7
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	81 70       	andi	r24, 0x01	; 1
     4da:	99 27       	eor	r25, r25
     4dc:	89 2b       	or	r24, r25
     4de:	09 f4       	brne	.+2      	; 0x4e2 <__vector_18+0x6a>
     4e0:	6b c0       	rjmp	.+214    	; 0x5b8 <__vector_18+0x140>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     4e2:	8f ee       	ldi	r24, 0xEF	; 239
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	20 e8       	ldi	r18, 0x80	; 128
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     4ec:	8e ee       	ldi	r24, 0xEE	; 238
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	2e ee       	ldi	r18, 0xEE	; 238
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	2f 7d       	andi	r18, 0xDF	; 223
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18

			for(unsigned char i = 0; i < 8; i++)
     4fe:	1a 82       	std	Y+2, r1	; 0x02
     500:	1e c0       	rjmp	.+60     	; 0x53e <__vector_18+0xc6>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
     502:	80 91 fb 02 	lds	r24, 0x02FB
     506:	48 2f       	mov	r20, r24
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	28 2f       	mov	r18, r24
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	8a ef       	ldi	r24, 0xFA	; 250
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	fc 01       	movw	r30, r24
     516:	60 81       	ld	r22, Z
     518:	ca 01       	movw	r24, r20
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	ac 01       	movw	r20, r24
     520:	44 0f       	add	r20, r20
     522:	55 1f       	adc	r21, r21
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	84 0f       	add	r24, r20
     52a:	95 1f       	adc	r25, r21
     52c:	82 0f       	add	r24, r18
     52e:	93 1f       	adc	r25, r19
     530:	8a 5f       	subi	r24, 0xFA	; 250
     532:	9e 4f       	sbci	r25, 0xFE	; 254
     534:	fc 01       	movw	r30, r24
     536:	60 83       	st	Z, r22
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			for(unsigned char i = 0; i < 8; i++)
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	8a 83       	std	Y+2, r24	; 0x02
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	f8 f2       	brcs	.-66     	; 0x502 <__vector_18+0x8a>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);

			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
     544:	80 91 fb 02 	lds	r24, 0x02FB
     548:	68 2f       	mov	r22, r24
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	82 ef       	ldi	r24, 0xF2	; 242
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	80 81       	ld	r24, Z
     554:	82 95       	swap	r24
     556:	86 95       	lsr	r24
     558:	87 70       	andi	r24, 0x07	; 7
     55a:	28 2f       	mov	r18, r24
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	83 ef       	ldi	r24, 0xF3	; 243
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	fc 01       	movw	r30, r24
     564:	80 81       	ld	r24, Z
     566:	88 2f       	mov	r24, r24
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	82 2b       	or	r24, r18
     578:	93 2b       	or	r25, r19
     57a:	ac 01       	movw	r20, r24
     57c:	cb 01       	movw	r24, r22
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	9c 01       	movw	r18, r24
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	22 0f       	add	r18, r18
     58a:	33 1f       	adc	r19, r19
     58c:	82 0f       	add	r24, r18
     58e:	93 1f       	adc	r25, r19
     590:	82 5f       	subi	r24, 0xF2	; 242
     592:	9e 4f       	sbci	r25, 0xFE	; 254
     594:	fc 01       	movw	r30, r24
     596:	51 83       	std	Z+1, r21	; 0x01
     598:	40 83       	st	Z, r20

			if(++rxWrIndex == RX_BUFFER_SIZE)
     59a:	80 91 fb 02 	lds	r24, 0x02FB
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 93 fb 02 	sts	0x02FB, r24
     5a4:	82 33       	cpi	r24, 0x32	; 50
     5a6:	11 f4       	brne	.+4      	; 0x5ac <__vector_18+0x134>
				rxWrIndex = 0;
     5a8:	10 92 fb 02 	sts	0x02FB, r1

			rxCounter++;
     5ac:	80 91 fc 02 	lds	r24, 0x02FC
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	80 93 fc 02 	sts	0x02FC, r24

			//brPrimljenih1++;

			break;
     5b6:	23 c0       	rjmp	.+70     	; 0x5fe <__vector_18+0x186>
		}

		// proveravam da li je uspesno poslat podatak (ako je MOb bio podesen kao predajnik)
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
     5b8:	8e ee       	ldi	r24, 0xEE	; 238
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	fc 01       	movw	r30, r24
     5be:	80 81       	ld	r24, Z
     5c0:	82 95       	swap	r24
     5c2:	86 95       	lsr	r24
     5c4:	86 95       	lsr	r24
     5c6:	83 70       	andi	r24, 0x03	; 3
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	81 70       	andi	r24, 0x01	; 1
     5ce:	99 27       	eor	r25, r25
     5d0:	89 2b       	or	r24, r25
     5d2:	71 f0       	breq	.+28     	; 0x5f0 <__vector_18+0x178>
		{
			CANCDMOB = 0; // disable mob
     5d4:	8f ee       	ldi	r24, 0xEF	; 239
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	fc 01       	movw	r30, r24
     5da:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     5dc:	8e ee       	ldi	r24, 0xEE	; 238
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2e ee       	ldi	r18, 0xEE	; 238
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	2f 7b       	andi	r18, 0xBF	; 191
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18

			break;
     5ee:	07 c0       	rjmp	.+14     	; 0x5fe <__vector_18+0x186>
{
	unsigned char tempPage = CANPAGE;
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	8f 5f       	subi	r24, 0xFF	; 255
     5f4:	89 83       	std	Y+1, r24	; 0x01
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	8f 30       	cpi	r24, 0x0F	; 15
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <__vector_18+0x186>
     5fc:	5d cf       	rjmp	.-326    	; 0x4b8 <__vector_18+0x40>

			break;
		}
	}

	CANPAGE = tempPage;
     5fe:	8d ee       	ldi	r24, 0xED	; 237
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	2b 81       	ldd	r18, Y+3	; 0x03
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // jako retardirano
}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	9f 91       	pop	r25
     618:	8f 91       	pop	r24
     61a:	7f 91       	pop	r23
     61c:	6f 91       	pop	r22
     61e:	5f 91       	pop	r21
     620:	4f 91       	pop	r20
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	00 92 5b 00 	sts	0x005B, r0
     62c:	0f 90       	pop	r0
     62e:	00 92 5f 00 	sts	0x005F, r0
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <CAN_Init>:
					  Podrazumeva se da je frekvencija kontrolera 10MHz
* Parameters        : None
* Return Value      : void
*********************************************************************************/
void CAN_Init(void)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	00 d0       	rcall	.+0      	; 0x63e <CAN_Init+0x6>
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     642:	88 ed       	ldi	r24, 0xD8	; 216
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	21 e0       	ldi	r18, 0x01	; 1
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     64c:	19 82       	std	Y+1, r1	; 0x01
     64e:	3e c0       	rjmp	.+124    	; 0x6cc <CAN_Init+0x94>
	{
		CANPAGE = ch << 4;
     650:	8d ee       	ldi	r24, 0xED	; 237
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	29 81       	ldd	r18, Y+1	; 0x01
     656:	22 95       	swap	r18
     658:	20 7f       	andi	r18, 0xF0	; 240
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18

		CANSTMOB = 0;
     65e:	8e ee       	ldi	r24, 0xEE	; 238
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	fc 01       	movw	r30, r24
     664:	10 82       	st	Z, r1
		CANCDMOB = 0;
     666:	8f ee       	ldi	r24, 0xEF	; 239
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	fc 01       	movw	r30, r24
     66c:	10 82       	st	Z, r1

		CANIDT1 = 0;
     66e:	83 ef       	ldi	r24, 0xF3	; 243
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	10 82       	st	Z, r1
		CANIDT2 = 0;
     676:	82 ef       	ldi	r24, 0xF2	; 242
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	fc 01       	movw	r30, r24
     67c:	10 82       	st	Z, r1
		CANIDT3 = 0;
     67e:	81 ef       	ldi	r24, 0xF1	; 241
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	fc 01       	movw	r30, r24
     684:	10 82       	st	Z, r1
		CANIDT4 = 0;
     686:	80 ef       	ldi	r24, 0xF0	; 240
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	fc 01       	movw	r30, r24
     68c:	10 82       	st	Z, r1
		CANIDM1 = 0;
     68e:	87 ef       	ldi	r24, 0xF7	; 247
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	fc 01       	movw	r30, r24
     694:	10 82       	st	Z, r1
		CANIDM2 = 0;
     696:	86 ef       	ldi	r24, 0xF6	; 246
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	fc 01       	movw	r30, r24
     69c:	10 82       	st	Z, r1
		CANIDM3 = 0;
     69e:	85 ef       	ldi	r24, 0xF5	; 245
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	10 82       	st	Z, r1
		CANIDM4 = 0;
     6a6:	84 ef       	ldi	r24, 0xF4	; 244
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     6ae:	1a 82       	std	Y+2, r1	; 0x02
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <CAN_Init+0x88>
			CANMSG = 0;
     6b2:	8a ef       	ldi	r24, 0xFA	; 250
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	fc 01       	movw	r30, r24
     6b8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	8a 83       	std	Y+2, r24	; 0x02
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	88 30       	cpi	r24, 0x08	; 8
     6c4:	b0 f3       	brcs	.-20     	; 0x6b2 <CAN_Init+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	8f 30       	cpi	r24, 0x0F	; 15
     6d0:	08 f4       	brcc	.+2      	; 0x6d4 <CAN_Init+0x9c>
     6d2:	be cf       	rjmp	.-132    	; 0x650 <CAN_Init+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     6d4:	88 ed       	ldi	r24, 0xD8	; 216
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	22 e0       	ldi	r18, 0x02	; 2
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     6de:	82 ee       	ldi	r24, 0xE2	; 226
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2) | (1 << PRS0); // Propagation Time Segment-> 6xTq-> BILO 5
     6e8:	83 ee       	ldi	r24, 0xE3	; 227
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	2a e0       	ldi	r18, 0x0A	; 10
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS21) /*| (1 << PHS20) */| (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 7xTq, Phase Segment 1-> 8xTq
     6f2:	84 ee       	ldi	r24, 0xE4	; 228
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	2e e6       	ldi	r18, 0x6E	; 110
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     6fc:	85 ee       	ldi	r24, 0xE5	; 229
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	fc 01       	movw	r30, r24
     702:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     704:	8b ed       	ldi	r24, 0xDB	; 219
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	20 eb       	ldi	r18, 0xB0	; 176
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     70e:	8f ed       	ldi	r24, 0xDF	; 223
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	2f e7       	ldi	r18, 0x7F	; 127
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     718:	8e ed       	ldi	r24, 0xDE	; 222
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18

	//sei();
}
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <CAN_InitRxMob>:
					  ide. U slucaju neuspesne inicijalizacije MOb- a vraca 0
* Parameters        : unsigned int ide
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 d0       	rcall	.+0      	; 0x732 <CAN_InitRxMob+0x6>
     732:	00 d0       	rcall	.+0      	; 0x734 <CAN_InitRxMob+0x8>
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	9c 83       	std	Y+4, r25	; 0x04
     73a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     73c:	8d ee       	ldi	r24, 0xED	; 237
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	fc 01       	movw	r30, r24
     742:	80 81       	ld	r24, Z
     744:	8a 83       	std	Y+2, r24	; 0x02

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     746:	00 00       	nop
     748:	89 ed       	ldi	r24, 0xD9	; 217
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
     74e:	80 81       	ld	r24, Z
     750:	82 95       	swap	r24
     752:	8f 70       	andi	r24, 0x0F	; 15
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	81 70       	andi	r24, 0x01	; 1
     75a:	99 27       	eor	r25, r25
     75c:	89 2b       	or	r24, r25
     75e:	a1 f7       	brne	.-24     	; 0x748 <CAN_InitRxMob+0x1c>
     760:	89 ed       	ldi	r24, 0xD9	; 217
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	86 95       	lsr	r24
     76a:	86 95       	lsr	r24
     76c:	86 95       	lsr	r24
     76e:	88 2f       	mov	r24, r24
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	81 70       	andi	r24, 0x01	; 1
     774:	99 27       	eor	r25, r25
     776:	89 2b       	or	r24, r25
     778:	39 f7       	brne	.-50     	; 0x748 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     77a:	19 82       	std	Y+1, r1	; 0x01
     77c:	4a c0       	rjmp	.+148    	; 0x812 <CAN_InitRxMob+0xe6>
	{
		CANPAGE = ch << 4;
     77e:	8d ee       	ldi	r24, 0xED	; 237
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	29 81       	ldd	r18, Y+1	; 0x01
     784:	22 95       	swap	r18
     786:	20 7f       	andi	r18, 0xF0	; 240
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     78c:	8f ee       	ldi	r24, 0xEF	; 239
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	82 95       	swap	r24
     796:	86 95       	lsr	r24
     798:	86 95       	lsr	r24
     79a:	83 70       	andi	r24, 0x03	; 3
     79c:	88 23       	and	r24, r24
     79e:	21 f0       	breq	.+8      	; 0x7a8 <CAN_InitRxMob+0x7c>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	35 c0       	rjmp	.+106    	; 0x812 <CAN_InitRxMob+0xe6>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     7a8:	8f ee       	ldi	r24, 0xEF	; 239
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	2f e0       	ldi	r18, 0x0F	; 15
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     7b2:	83 ef       	ldi	r24, 0xF3	; 243
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	2b 81       	ldd	r18, Y+3	; 0x03
     7b8:	3c 81       	ldd	r19, Y+4	; 0x04
     7ba:	33 27       	eor	r19, r19
     7bc:	36 95       	lsr	r19
     7be:	27 95       	ror	r18
     7c0:	36 95       	lsr	r19
     7c2:	27 95       	ror	r18
     7c4:	36 95       	lsr	r19
     7c6:	27 95       	ror	r18
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     7cc:	82 ef       	ldi	r24, 0xF2	; 242
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2b 81       	ldd	r18, Y+3	; 0x03
     7d2:	22 95       	swap	r18
     7d4:	22 0f       	add	r18, r18
     7d6:	20 7e       	andi	r18, 0xE0	; 224
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     7dc:	86 ef       	ldi	r24, 0xF6	; 246
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	20 ee       	ldi	r18, 0xE0	; 224
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     7e6:	87 ef       	ldi	r24, 0xF7	; 247
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	2f ef       	ldi	r18, 0xFF	; 255
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     7f0:	8f ee       	ldi	r24, 0xEF	; 239
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	2f ee       	ldi	r18, 0xEF	; 239
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	f9 01       	movw	r30, r18
     7fa:	20 81       	ld	r18, Z
     7fc:	20 68       	ori	r18, 0x80	; 128
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
		sei();
     802:	78 94       	sei
		CANPAGE = tempPage;
     804:	8d ee       	ldi	r24, 0xED	; 237
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	2a 81       	ldd	r18, Y+2	; 0x02
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18

		return 1;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0a c0       	rjmp	.+20     	; 0x826 <CAN_InitRxMob+0xfa>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	8f 30       	cpi	r24, 0x0F	; 15
     816:	08 f4       	brcc	.+2      	; 0x81a <CAN_InitRxMob+0xee>
     818:	b2 cf       	rjmp	.-156    	; 0x77e <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     81a:	8d ee       	ldi	r24, 0xED	; 237
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	2a 81       	ldd	r18, Y+2	; 0x02
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18

	return 0;
     824:	80 e0       	ldi	r24, 0x00	; 0
}
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <CAN_checkRX>:
					  Ako ima vraca 1, u suprotnom vraca 0
* Parameters        : None
* Return Value      : char info da li ima primljenih podataka
*********************************************************************************/
char CAN_checkRX(void)
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
	if(rxCounter)
     83c:	80 91 fc 02 	lds	r24, 0x02FC
     840:	88 23       	and	r24, r24
     842:	11 f0       	breq	.+4      	; 0x848 <CAN_checkRX+0x14>
		return 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	01 c0       	rjmp	.+2      	; 0x84a <CAN_checkRX+0x16>

	return 0;
     848:	80 e0       	ldi	r24, 0x00	; 0
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <CAN_read+0x6>
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	8a 83       	std	Y+2, r24	; 0x02
	// sve dok ne stigne neki podatak ostajem u funkciji

	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
     860:	00 00       	nop
     862:	80 91 fc 02 	lds	r24, 0x02FC
     866:	88 23       	and	r24, r24
     868:	e1 f3       	breq	.-8      	; 0x862 <CAN_read+0x12>
	cli();
     86a:	f8 94       	cli
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     86c:	19 82       	std	Y+1, r1	; 0x01
     86e:	22 c0       	rjmp	.+68     	; 0x8b4 <CAN_read+0x64>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	28 2f       	mov	r18, r24
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	80 91 fa 02 	lds	r24, 0x02FA
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	49 81       	ldd	r20, Y+1	; 0x01
     880:	44 2f       	mov	r20, r20
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	bc 01       	movw	r22, r24
     88a:	66 0f       	add	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	66 0f       	add	r22, r22
     890:	77 1f       	adc	r23, r23
     892:	86 0f       	add	r24, r22
     894:	97 1f       	adc	r25, r23
     896:	84 0f       	add	r24, r20
     898:	95 1f       	adc	r25, r21
     89a:	8a 5f       	subi	r24, 0xFA	; 250
     89c:	9e 4f       	sbci	r25, 0xFE	; 254
     89e:	fc 01       	movw	r30, r24
     8a0:	40 81       	ld	r20, Z
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	9b 81       	ldd	r25, Y+3	; 0x03
     8a6:	82 0f       	add	r24, r18
     8a8:	93 1f       	adc	r25, r19
     8aa:	fc 01       	movw	r30, r24
     8ac:	40 83       	st	Z, r20
	while(rxCounter == 0);
	cli();
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	88 30       	cpi	r24, 0x08	; 8
     8b8:	d8 f2       	brcs	.-74     	; 0x870 <CAN_read+0x20>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];

	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
     8ba:	80 91 fa 02 	lds	r24, 0x02FA
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	9c 01       	movw	r18, r24
     8c8:	22 0f       	add	r18, r18
     8ca:	33 1f       	adc	r19, r19
     8cc:	22 0f       	add	r18, r18
     8ce:	33 1f       	adc	r19, r19
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	82 5f       	subi	r24, 0xF2	; 242
     8d6:	9e 4f       	sbci	r25, 0xFE	; 254
     8d8:	fc 01       	movw	r30, r24
     8da:	20 81       	ld	r18, Z
     8dc:	31 81       	ldd	r19, Z+1	; 0x01
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	9b 81       	ldd	r25, Y+3	; 0x03
     8e2:	fc 01       	movw	r30, r24
     8e4:	31 87       	std	Z+9, r19	; 0x09
     8e6:	20 87       	std	Z+8, r18	; 0x08

	if(++rxRdIndex == RX_BUFFER_SIZE)
     8e8:	80 91 fa 02 	lds	r24, 0x02FA
     8ec:	8f 5f       	subi	r24, 0xFF	; 255
     8ee:	80 93 fa 02 	sts	0x02FA, r24
     8f2:	82 33       	cpi	r24, 0x32	; 50
     8f4:	11 f4       	brne	.+4      	; 0x8fa <CAN_read+0xaa>
		rxRdIndex = 0;
     8f6:	10 92 fa 02 	sts	0x02FA, r1


	rxCounter--;
     8fa:	80 91 fc 02 	lds	r24, 0x02FC
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	80 93 fc 02 	sts	0x02FC, r24
	sei();
     904:	78 94       	sei
}
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <CAN_write>:
					  identifikator messIdentificator.
* Parameters        : canMgs txData
* Return Value      : void
*********************************************************************************/
char CAN_write(canMsg txData)
{
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	2d 97       	sbiw	r28, 0x0d	; 13
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	0c 83       	std	Y+4, r16	; 0x04
     92c:	1d 83       	std	Y+5, r17	; 0x05
     92e:	2e 83       	std	Y+6, r18	; 0x06
     930:	3f 83       	std	Y+7, r19	; 0x07
     932:	48 87       	std	Y+8, r20	; 0x08
     934:	59 87       	std	Y+9, r21	; 0x09
     936:	6a 87       	std	Y+10, r22	; 0x0a
     938:	7b 87       	std	Y+11, r23	; 0x0b
     93a:	8c 87       	std	Y+12, r24	; 0x0c
     93c:	9d 87       	std	Y+13, r25	; 0x0d
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     93e:	00 00       	nop
     940:	89 ed       	ldi	r24, 0xD9	; 217
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	fc 01       	movw	r30, r24
     946:	80 81       	ld	r24, Z
     948:	82 95       	swap	r24
     94a:	8f 70       	andi	r24, 0x0F	; 15
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	81 70       	andi	r24, 0x01	; 1
     952:	99 27       	eor	r25, r25
     954:	89 2b       	or	r24, r25
     956:	a1 f7       	brne	.-24     	; 0x940 <CAN_write+0x2e>
     958:	89 ed       	ldi	r24, 0xD9	; 217
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
     960:	86 95       	lsr	r24
     962:	86 95       	lsr	r24
     964:	86 95       	lsr	r24
     966:	88 2f       	mov	r24, r24
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	81 70       	andi	r24, 0x01	; 1
     96c:	99 27       	eor	r25, r25
     96e:	89 2b       	or	r24, r25
     970:	39 f7       	brne	.-50     	; 0x940 <CAN_write+0x2e>
	//taskENTER_CRITICAL();
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     972:	8d ee       	ldi	r24, 0xED	; 237
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	fc 01       	movw	r30, r24
     978:	80 81       	ld	r24, Z
     97a:	8b 83       	std	Y+3, r24	; 0x03

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     97c:	19 82       	std	Y+1, r1	; 0x01
     97e:	15 c0       	rjmp	.+42     	; 0x9aa <CAN_write+0x98>
	{
		CANPAGE = ch << 4;
     980:	8d ee       	ldi	r24, 0xED	; 237
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	29 81       	ldd	r18, Y+1	; 0x01
     986:	22 95       	swap	r18
     988:	20 7f       	andi	r18, 0xF0	; 240
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     98e:	8f ee       	ldi	r24, 0xEF	; 239
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	fc 01       	movw	r30, r24
     994:	80 81       	ld	r24, Z
     996:	82 95       	swap	r24
     998:	86 95       	lsr	r24
     99a:	86 95       	lsr	r24
     99c:	83 70       	andi	r24, 0x03	; 3
     99e:	88 23       	and	r24, r24
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <CAN_write+0x92>
			break;
     9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <CAN_write+0x9e>

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	8f 30       	cpi	r24, 0x0F	; 15
     9ae:	40 f3       	brcs	.-48     	; 0x980 <CAN_write+0x6e>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	8f 30       	cpi	r24, 0x0F	; 15
     9b4:	11 f4       	brne	.+4      	; 0x9ba <CAN_write+0xa8>
	{
		//taskEXIT_CRITICAL();

		return 0;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	3f c0       	rjmp	.+126    	; 0xa38 <CAN_write+0x126>
	}

	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (txData.msgIde & 0x0F) << 5;
     9ba:	82 ef       	ldi	r24, 0xF2	; 242
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	2c 85       	ldd	r18, Y+12	; 0x0c
     9c0:	3d 85       	ldd	r19, Y+13	; 0x0d
     9c2:	22 95       	swap	r18
     9c4:	22 0f       	add	r18, r18
     9c6:	20 7e       	andi	r18, 0xE0	; 224
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18
	CANIDT1 = (txData.msgIde) >> 3;
     9cc:	83 ef       	ldi	r24, 0xF3	; 243
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	2c 85       	ldd	r18, Y+12	; 0x0c
     9d2:	3d 85       	ldd	r19, Y+13	; 0x0d
     9d4:	36 95       	lsr	r19
     9d6:	27 95       	ror	r18
     9d8:	36 95       	lsr	r19
     9da:	27 95       	ror	r18
     9dc:	36 95       	lsr	r19
     9de:	27 95       	ror	r18
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     9e4:	8f ee       	ldi	r24, 0xEF	; 239
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	28 e0       	ldi	r18, 0x08	; 8
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     9ee:	1a 82       	std	Y+2, r1	; 0x02
     9f0:	11 c0       	rjmp	.+34     	; 0xa14 <CAN_write+0x102>
		CANMSG = txData.data[i];
     9f2:	8a ef       	ldi	r24, 0xFA	; 250
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	2a 81       	ldd	r18, Y+2	; 0x02
     9f8:	22 2f       	mov	r18, r18
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	ae 01       	movw	r20, r28
     9fe:	4c 5f       	subi	r20, 0xFC	; 252
     a00:	5f 4f       	sbci	r21, 0xFF	; 255
     a02:	24 0f       	add	r18, r20
     a04:	35 1f       	adc	r19, r21
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	8f 5f       	subi	r24, 0xFF	; 255
     a12:	8a 83       	std	Y+2, r24	; 0x02
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	88 30       	cpi	r24, 0x08	; 8
     a18:	60 f3       	brcs	.-40     	; 0x9f2 <CAN_write+0xe0>
		CANMSG = txData.data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     a1a:	8f ee       	ldi	r24, 0xEF	; 239
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	2f ee       	ldi	r18, 0xEF	; 239
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	f9 01       	movw	r30, r18
     a24:	20 81       	ld	r18, Z
     a26:	20 64       	ori	r18, 0x40	; 64
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     a2c:	8d ee       	ldi	r24, 0xED	; 237
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	2b 81       	ldd	r18, Y+3	; 0x03
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18

	//taskEXIT_CRITICAL();

	return 1;
     a36:	81 e0       	ldi	r24, 0x01	; 1
}
     a38:	2d 96       	adiw	r28, 0x0d	; 13
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	08 95       	ret

00000a4e <TIMER3_Init>:

#define SPEED_H 0x02
#define SPEED_L 0x00

void TIMER3_Init(unsigned int f_pwm)
{
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	00 d0       	rcall	.+0      	; 0xa58 <TIMER3_Init+0xa>
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	9a 83       	std	Y+2, r25	; 0x02
     a5e:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     a60:	8d e2       	ldi	r24, 0x2D	; 45
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	2d e2       	ldi	r18, 0x2D	; 45
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	f9 01       	movw	r30, r18
     a6a:	20 81       	ld	r18, Z
     a6c:	28 63       	ori	r18, 0x38	; 56
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18

	TCNT3 = 0;
     a72:	84 e9       	ldi	r24, 0x94	; 148
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	fc 01       	movw	r30, r24
     a78:	11 82       	std	Z+1, r1	; 0x01
     a7a:	10 82       	st	Z, r1
	OCR3A = 0;
     a7c:	88 e9       	ldi	r24, 0x98	; 152
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	11 82       	std	Z+1, r1	; 0x01
     a84:	10 82       	st	Z, r1
	OCR3B = 0;
     a86:	8a e9       	ldi	r24, 0x9A	; 154
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	fc 01       	movw	r30, r24
     a8c:	11 82       	std	Z+1, r1	; 0x01
     a8e:	10 82       	st	Z, r1
	OCR3C = 0;
     a90:	8c e9       	ldi	r24, 0x9C	; 156
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	fc 01       	movw	r30, r24
     a96:	11 82       	std	Z+1, r1	; 0x01
     a98:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     a9a:	80 e9       	ldi	r24, 0x90	; 144
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	2e e3       	ldi	r18, 0x3E	; 62
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS30); // PRESKALER = 1
     aa4:	81 e9       	ldi	r24, 0x91	; 145
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	29 e1       	ldi	r18, 0x19	; 25
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
	ICR3 = (double)F_CPU / f_pwm - 0.5;
     aae:	06 e9       	ldi	r16, 0x96	; 150
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	cc 01       	movw	r24, r24
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatunsisf>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	9c 01       	movw	r18, r24
     aca:	ad 01       	movw	r20, r26
     acc:	60 e8       	ldi	r22, 0x80	; 128
     ace:	76 e9       	ldi	r23, 0x96	; 150
     ad0:	88 e1       	ldi	r24, 0x18	; 24
     ad2:	9b e4       	ldi	r25, 0x4B	; 75
     ad4:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__divsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	5f e3       	ldi	r21, 0x3F	; 63
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__subsf3>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	bc 01       	movw	r22, r24
     af2:	cd 01       	movw	r24, r26
     af4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	f8 01       	movw	r30, r16
     afe:	91 83       	std	Z+1, r25	; 0x01
     b00:	80 83       	st	Z, r24
}
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	08 95       	ret

00000b10 <TIMER1_Init>:

void TIMER1_Init(void)
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = (1 << WGM01) | (1 << CS02);
     b18:	84 e4       	ldi	r24, 0x44	; 68
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	2c e0       	ldi	r18, 0x0C	; 12
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);
     b22:	8e e6       	ldi	r24, 0x6E	; 110
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	2e e6       	ldi	r18, 0x6E	; 110
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	f9 01       	movw	r30, r18
     b2c:	20 81       	ld	r18, Z
     b2e:	22 60       	ori	r18, 0x02	; 2
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
	OCR0A = 43;
     b34:	87 e4       	ldi	r24, 0x47	; 71
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	2b e2       	ldi	r18, 0x2B	; 43
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18

	SREG |= 0x80;
     b3e:	8f e5       	ldi	r24, 0x5F	; 95
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	2f e5       	ldi	r18, 0x5F	; 95
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	20 68       	ori	r18, 0x80	; 128
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <AX_UART_Init>:

void AX_UART_Init(void)
{
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	2e 97       	sbiw	r28, 0x0e	; 14
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRE &= ~((1 << 0x00) | (1 << 0x01));
     b6a:	8d e2       	ldi	r24, 0x2D	; 45
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	2d e2       	ldi	r18, 0x2D	; 45
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	f9 01       	movw	r30, r18
     b74:	20 81       	ld	r18, Z
     b76:	2c 7f       	andi	r18, 0xFC	; 252
     b78:	fc 01       	movw	r30, r24
     b7a:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR0A = 0;
     b7c:	80 ec       	ldi	r24, 0xC0	; 192
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	fc 01       	movw	r30, r24
     b82:	10 82       	st	Z, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     b84:	81 ec       	ldi	r24, 0xC1	; 193
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	28 e1       	ldi	r18, 0x18	; 24
     b8a:	fc 01       	movw	r30, r24
     b8c:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
     b8e:	82 ec       	ldi	r24, 0xC2	; 194
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	26 e0       	ldi	r18, 0x06	; 6
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18

	UBRR0H = 0;
     b98:	85 ec       	ldi	r24, 0xC5	; 197
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	fc 01       	movw	r30, r24
     b9e:	10 82       	st	Z, r1
	UBRR0L = 5;
     ba0:	84 ec       	ldi	r24, 0xC4	; 196
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	25 e0       	ldi	r18, 0x05	; 5
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a8 ec       	ldi	r26, 0xC8	; 200
     bb0:	b2 e4       	ldi	r27, 0x42	; 66
     bb2:	89 83       	std	Y+1, r24	; 0x01
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	ab 83       	std	Y+3, r26	; 0x03
     bb8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e4       	ldi	r19, 0x40	; 64
     bbe:	4c e1       	ldi	r20, 0x1C	; 28
     bc0:	55 e4       	ldi	r21, 0x45	; 69
     bc2:	69 81       	ldd	r22, Y+1	; 0x01
     bc4:	7a 81       	ldd	r23, Y+2	; 0x02
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	8d 83       	std	Y+5, r24	; 0x05
     bd4:	9e 83       	std	Y+6, r25	; 0x06
     bd6:	af 83       	std	Y+7, r26	; 0x07
     bd8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5f e3       	ldi	r21, 0x3F	; 63
     be2:	6d 81       	ldd	r22, Y+5	; 0x05
     be4:	7e 81       	ldd	r23, Y+6	; 0x06
     be6:	8f 81       	ldd	r24, Y+7	; 0x07
     be8:	98 85       	ldd	r25, Y+8	; 0x08
     bea:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__cmpsf2>
     bee:	88 23       	and	r24, r24
     bf0:	2c f4       	brge	.+10     	; 0xbfc <AX_UART_Init+0xa6>
		__ticks = 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9a 87       	std	Y+10, r25	; 0x0a
     bf8:	89 87       	std	Y+9, r24	; 0x09
     bfa:	3f c0       	rjmp	.+126    	; 0xc7a <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	4f e7       	ldi	r20, 0x7F	; 127
     c02:	57 e4       	ldi	r21, 0x47	; 71
     c04:	6d 81       	ldd	r22, Y+5	; 0x05
     c06:	7e 81       	ldd	r23, Y+6	; 0x06
     c08:	8f 81       	ldd	r24, Y+7	; 0x07
     c0a:	98 85       	ldd	r25, Y+8	; 0x08
     c0c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__gesf2>
     c10:	18 16       	cp	r1, r24
     c12:	4c f5       	brge	.+82     	; 0xc66 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e2       	ldi	r20, 0x20	; 32
     c1a:	51 e4       	ldi	r21, 0x41	; 65
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	7a 81       	ldd	r23, Y+2	; 0x02
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	9a 87       	std	Y+10, r25	; 0x0a
     c3a:	89 87       	std	Y+9, r24	; 0x09
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <AX_UART_Init+0x106>
     c3e:	8a ef       	ldi	r24, 0xFA	; 250
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9c 87       	std	Y+12, r25	; 0x0c
     c44:	8b 87       	std	Y+11, r24	; 0x0b
     c46:	8b 85       	ldd	r24, Y+11	; 0x0b
     c48:	9c 85       	ldd	r25, Y+12	; 0x0c
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <AX_UART_Init+0xf4>
     c4e:	9c 87       	std	Y+12, r25	; 0x0c
     c50:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c52:	89 85       	ldd	r24, Y+9	; 0x09
     c54:	9a 85       	ldd	r25, Y+10	; 0x0a
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	9a 87       	std	Y+10, r25	; 0x0a
     c5a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	89 2b       	or	r24, r25
     c62:	69 f7       	brne	.-38     	; 0xc3e <AX_UART_Init+0xe8>
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c66:	6d 81       	ldd	r22, Y+5	; 0x05
     c68:	7e 81       	ldd	r23, Y+6	; 0x06
     c6a:	8f 81       	ldd	r24, Y+7	; 0x07
     c6c:	98 85       	ldd	r25, Y+8	; 0x08
     c6e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	9a 87       	std	Y+10, r25	; 0x0a
     c78:	89 87       	std	Y+9, r24	; 0x09
     c7a:	89 85       	ldd	r24, Y+9	; 0x09
     c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7e:	9e 87       	std	Y+14, r25	; 0x0e
     c80:	8d 87       	std	Y+13, r24	; 0x0d
     c82:	8d 85       	ldd	r24, Y+13	; 0x0d
     c84:	9e 85       	ldd	r25, Y+14	; 0x0e
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <AX_UART_Init+0x130>
     c8a:	9e 87       	std	Y+14, r25	; 0x0e
     c8c:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     c8e:	2e 96       	adiw	r28, 0x0e	; 14
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	1f 92       	push	r1
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR0A & (1<<UDRE0)) );
     cac:	00 00       	nop
     cae:	80 ec       	ldi	r24, 0xC0	; 192
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	fc 01       	movw	r30, r24
     cb4:	80 81       	ld	r24, Z
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	80 72       	andi	r24, 0x20	; 32
     cbc:	99 27       	eor	r25, r25
     cbe:	89 2b       	or	r24, r25
     cc0:	b1 f3       	breq	.-20     	; 0xcae <AX_SendChar+0xe>
	UDR0 = data;
     cc2:	86 ec       	ldi	r24, 0xC6	; 198
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	29 81       	ldd	r18, Y+1	; 0x01
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
}
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR0A & (1<< RXC0)) );
     cdc:	00 00       	nop
     cde:	80 ec       	ldi	r24, 0xC0	; 192
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fc 01       	movw	r30, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	88 23       	and	r24, r24
     ce8:	d4 f7       	brge	.-12     	; 0xcde <AX_ReadChar+0xa>
   return UDR0;
     cea:	86 ec       	ldi	r24, 0xC6	; 198
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	27 97       	sbiw	r28, 0x07	; 7
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     d0c:	27 e0       	ldi	r18, 0x07	; 7
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	fc 01       	movw	r30, r24
     d14:	32 2f       	mov	r19, r18
     d16:	11 92       	st	Z+, r1
     d18:	3a 95       	dec	r19
     d1a:	e9 f7       	brne	.-6      	; 0xd16 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     d1c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <AX_ReadChar>
     d20:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     d22:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <AX_ReadChar>
     d26:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     d28:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <AX_ReadChar>
     d2c:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     d2e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <AX_ReadChar>
     d32:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     d34:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <AX_ReadChar>
     d38:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     d3a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <AX_ReadChar>
     d3e:	8e 83       	std	Y+6, r24	; 0x06
}
     d40:	27 96       	adiw	r28, 0x07	; 7
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR0A & (1<<TXC0)) );
     d5a:	00 00       	nop
     d5c:	80 ec       	ldi	r24, 0xC0	; 192
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	fc 01       	movw	r30, r24
     d62:	80 81       	ld	r24, Z
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	80 74       	andi	r24, 0x40	; 64
     d6a:	99 27       	eor	r25, r25
     d6c:	89 2b       	or	r24, r25
     d6e:	b1 f3       	breq	.-20     	; 0xd5c <AX_StopTransmitter+0xa>
	UCSR0B &= 0xF7;
     d70:	81 ec       	ldi	r24, 0xC1	; 193
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	21 ec       	ldi	r18, 0xC1	; 193
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	27 7f       	andi	r18, 0xF7	; 247
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
	UCSR0A |= 0x40;
     d82:	80 ec       	ldi	r24, 0xC0	; 192
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	20 ec       	ldi	r18, 0xC0	; 192
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	20 81       	ld	r18, Z
     d8e:	20 64       	ori	r18, 0x40	; 64
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x08;
     da2:	81 ec       	ldi	r24, 0xC1	; 193
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	21 ec       	ldi	r18, 0xC1	; 193
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	f9 01       	movw	r30, r18
     dac:	20 81       	ld	r18, Z
     dae:	28 60       	ori	r18, 0x08	; 8
     db0:	fc 01       	movw	r30, r24
     db2:	20 83       	st	Z, r18
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= 0xEF;
     dc2:	81 ec       	ldi	r24, 0xC1	; 193
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	21 ec       	ldi	r18, 0xC1	; 193
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	f9 01       	movw	r30, r18
     dcc:	20 81       	ld	r18, Z
     dce:	2f 7e       	andi	r18, 0xEF	; 239
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 83       	st	Z, r18
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x10;
     de2:	81 ec       	ldi	r24, 0xC1	; 193
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	21 ec       	ldi	r18, 0xC1	; 193
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	f9 01       	movw	r30, r18
     dec:	20 81       	ld	r18, Z
     dee:	20 61       	ori	r18, 0x10	; 16
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	6a 97       	sbiw	r28, 0x1a	; 26
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	9e 8b       	std	Y+22, r25	; 0x16
     e10:	8d 8b       	std	Y+21, r24	; 0x15
     e12:	78 8f       	std	Y+24, r23	; 0x18
     e14:	6f 8b       	std	Y+23, r22	; 0x17
     e16:	49 8f       	std	Y+25, r20	; 0x19
     e18:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     e1a:	8d 89       	ldd	r24, Y+21	; 0x15
     e1c:	9e 89       	ldd	r25, Y+22	; 0x16
     e1e:	cc 01       	movw	r24, r24
     e20:	a0 e0       	ldi	r26, 0x00	; 0
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatunsisf>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	46 e9       	ldi	r20, 0x96	; 150
     e36:	53 e4       	ldi	r21, 0x43	; 67
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__divsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 ec       	ldi	r19, 0xC0	; 192
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	54 e4       	ldi	r21, 0x44	; 68
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9e 8b       	std	Y+22, r25	; 0x16
     e66:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     e68:	8d 89       	ldd	r24, Y+21	; 0x15
     e6a:	9e 89       	ldd	r25, Y+22	; 0x16
     e6c:	89 2f       	mov	r24, r25
     e6e:	99 27       	eor	r25, r25
     e70:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     e72:	8d 89       	ldd	r24, Y+21	; 0x15
     e74:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     e76:	89 8d       	ldd	r24, Y+25	; 0x19
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	98 2f       	mov	r25, r24
     e7e:	88 27       	eor	r24, r24
     e80:	99 0f       	add	r25, r25
     e82:	99 0f       	add	r25, r25
     e84:	9c 01       	movw	r18, r24
     e86:	8f 89       	ldd	r24, Y+23	; 0x17
     e88:	98 8d       	ldd	r25, Y+24	; 0x18
     e8a:	82 2b       	or	r24, r18
     e8c:	93 2b       	or	r25, r19
     e8e:	98 8f       	std	Y+24, r25	; 0x18
     e90:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     e92:	8f 89       	ldd	r24, Y+23	; 0x17
     e94:	98 8d       	ldd	r25, Y+24	; 0x18
     e96:	89 2f       	mov	r24, r25
     e98:	99 27       	eor	r25, r25
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     e9c:	8f 89       	ldd	r24, Y+23	; 0x17
     e9e:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     ea0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9c 01       	movw	r18, r24
     ea8:	28 5d       	subi	r18, 0xD8	; 216
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	28 0f       	add	r18, r24
     eb4:	39 1f       	adc	r19, r25
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	28 0f       	add	r18, r24
     ebe:	39 1f       	adc	r19, r25
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	28 0f       	add	r18, r24
     ec8:	39 1f       	adc	r19, r25
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	80 95       	com	r24
     ed6:	90 95       	com	r25
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     edc:	0e 94 dd 06 	call	0xdba	; 0xdba <AX_StopReceiver>

	AX_SendChar(START);
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(START);
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(id);
     eec:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eee:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(LENGTH);
     ef2:	87 e0       	ldi	r24, 0x07	; 7
     ef4:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(INSTR);
     ef8:	83 e0       	ldi	r24, 0x03	; 3
     efa:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(ADDRESS);
     efe:	8e e1       	ldi	r24, 0x1E	; 30
     f00:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(angle_L);
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(angle_H);
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(speed_L);
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(speed_H);
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(checksum);
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>

	AX_StopTransmitter();
     f22:	0e 94 a9 06 	call	0xd52	; 0xd52 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     f26:	0e 94 ed 06 	call	0xdda	; 0xdda <AX_ReleaseReceiver>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a8 e4       	ldi	r26, 0x48	; 72
     f30:	b2 e4       	ldi	r27, 0x42	; 66
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	98 87       	std	Y+8, r25	; 0x08
     f36:	a9 87       	std	Y+9, r26	; 0x09
     f38:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e4       	ldi	r19, 0x40	; 64
     f3e:	4c e1       	ldi	r20, 0x1C	; 28
     f40:	55 e4       	ldi	r21, 0x45	; 69
     f42:	6f 81       	ldd	r22, Y+7	; 0x07
     f44:	78 85       	ldd	r23, Y+8	; 0x08
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	8b 87       	std	Y+11, r24	; 0x0b
     f54:	9c 87       	std	Y+12, r25	; 0x0c
     f56:	ad 87       	std	Y+13, r26	; 0x0d
     f58:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e8       	ldi	r20, 0x80	; 128
     f60:	5f e3       	ldi	r21, 0x3F	; 63
     f62:	6b 85       	ldd	r22, Y+11	; 0x0b
     f64:	7c 85       	ldd	r23, Y+12	; 0x0c
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__cmpsf2>
     f6e:	88 23       	and	r24, r24
     f70:	2c f4       	brge	.+10     	; 0xf7c <AX_SetAngle+0x182>
		__ticks = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	98 8b       	std	Y+16, r25	; 0x10
     f78:	8f 87       	std	Y+15, r24	; 0x0f
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	3f ef       	ldi	r19, 0xFF	; 255
     f80:	4f e7       	ldi	r20, 0x7F	; 127
     f82:	57 e4       	ldi	r21, 0x47	; 71
     f84:	6b 85       	ldd	r22, Y+11	; 0x0b
     f86:	7c 85       	ldd	r23, Y+12	; 0x0c
     f88:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__gesf2>
     f90:	18 16       	cp	r1, r24
     f92:	4c f5       	brge	.+82     	; 0xfe6 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e2       	ldi	r20, 0x20	; 32
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	6f 81       	ldd	r22, Y+7	; 0x07
     f9e:	78 85       	ldd	r23, Y+8	; 0x08
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	98 8b       	std	Y+16, r25	; 0x10
     fba:	8f 87       	std	Y+15, r24	; 0x0f
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <AX_SetAngle+0x1e2>
     fbe:	8a ef       	ldi	r24, 0xFA	; 250
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9a 8b       	std	Y+18, r25	; 0x12
     fc4:	89 8b       	std	Y+17, r24	; 0x11
     fc6:	89 89       	ldd	r24, Y+17	; 0x11
     fc8:	9a 89       	ldd	r25, Y+18	; 0x12
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <AX_SetAngle+0x1d0>
     fce:	9a 8b       	std	Y+18, r25	; 0x12
     fd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd4:	98 89       	ldd	r25, Y+16	; 0x10
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	98 8b       	std	Y+16, r25	; 0x10
     fda:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fde:	98 89       	ldd	r25, Y+16	; 0x10
     fe0:	89 2b       	or	r24, r25
     fe2:	69 f7       	brne	.-38     	; 0xfbe <AX_SetAngle+0x1c4>
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fea:	8d 85       	ldd	r24, Y+13	; 0x0d
     fec:	9e 85       	ldd	r25, Y+14	; 0x0e
     fee:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	98 8b       	std	Y+16, r25	; 0x10
     ff8:	8f 87       	std	Y+15, r24	; 0x0f
     ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffc:	98 89       	ldd	r25, Y+16	; 0x10
     ffe:	9c 8b       	std	Y+20, r25	; 0x14
    1000:	8b 8b       	std	Y+19, r24	; 0x13
    1002:	8b 89       	ldd	r24, Y+19	; 0x13
    1004:	9c 89       	ldd	r25, Y+20	; 0x14
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <AX_SetAngle+0x20c>
    100a:	9c 8b       	std	Y+20, r25	; 0x14
    100c:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
    100e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <AX_ReleaseTransmitter>
}
    1012:	6a 96       	adiw	r28, 0x1a	; 26
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	60 97       	sbiw	r28, 0x10	; 16
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
    1038:	8c ee       	ldi	r24, 0xEC	; 236
    103a:	9f ef       	ldi	r25, 0xFF	; 255
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
    1040:	0e 94 dd 06 	call	0xdba	; 0xdba <AX_StopReceiver>

	AX_SendChar(0xFF);
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0xFF);
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x01);
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x07);
    1056:	87 e0       	ldi	r24, 0x07	; 7
    1058:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x03);
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x06);
    1062:	86 e0       	ldi	r24, 0x06	; 6
    1064:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x00);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x00);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(1023 >> 8);
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(checksum);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>

	AX_StopTransmitter();
    1086:	0e 94 a9 06 	call	0xd52	; 0xd52 <AX_StopTransmitter>
	AX_ReleaseReceiver();
    108a:	0e 94 ed 06 	call	0xdda	; 0xdda <AX_ReleaseReceiver>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a8 e4       	ldi	r26, 0x48	; 72
    1094:	b2 e4       	ldi	r27, 0x42	; 66
    1096:	8b 83       	std	Y+3, r24	; 0x03
    1098:	9c 83       	std	Y+4, r25	; 0x04
    109a:	ad 83       	std	Y+5, r26	; 0x05
    109c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e4       	ldi	r19, 0x40	; 64
    10a2:	4c e1       	ldi	r20, 0x1C	; 28
    10a4:	55 e4       	ldi	r21, 0x45	; 69
    10a6:	6b 81       	ldd	r22, Y+3	; 0x03
    10a8:	7c 81       	ldd	r23, Y+4	; 0x04
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	8f 83       	std	Y+7, r24	; 0x07
    10b8:	98 87       	std	Y+8, r25	; 0x08
    10ba:	a9 87       	std	Y+9, r26	; 0x09
    10bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e8       	ldi	r20, 0x80	; 128
    10c4:	5f e3       	ldi	r21, 0x3F	; 63
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__cmpsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <AX_EndlessTurn+0xbc>
		__ticks = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9c 87       	std	Y+12, r25	; 0x0c
    10dc:	8b 87       	std	Y+11, r24	; 0x0b
    10de:	3f c0       	rjmp	.+126    	; 0x115e <__stack+0x5f>
	else if (__tmp > 65535)
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	3f ef       	ldi	r19, 0xFF	; 255
    10e4:	4f e7       	ldi	r20, 0x7F	; 127
    10e6:	57 e4       	ldi	r21, 0x47	; 71
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__gesf2>
    10f4:	18 16       	cp	r1, r24
    10f6:	4c f5       	brge	.+82     	; 0x114a <__stack+0x4b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e2       	ldi	r20, 0x20	; 32
    10fe:	51 e4       	ldi	r21, 0x41	; 65
    1100:	6b 81       	ldd	r22, Y+3	; 0x03
    1102:	7c 81       	ldd	r23, Y+4	; 0x04
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9c 87       	std	Y+12, r25	; 0x0c
    111e:	8b 87       	std	Y+11, r24	; 0x0b
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <__stack+0x41>
    1122:	8a ef       	ldi	r24, 0xFA	; 250
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9e 87       	std	Y+14, r25	; 0x0e
    1128:	8d 87       	std	Y+13, r24	; 0x0d
    112a:	8d 85       	ldd	r24, Y+13	; 0x0d
    112c:	9e 85       	ldd	r25, Y+14	; 0x0e
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <__stack+0x2f>
    1132:	9e 87       	std	Y+14, r25	; 0x0e
    1134:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1136:	8b 85       	ldd	r24, Y+11	; 0x0b
    1138:	9c 85       	ldd	r25, Y+12	; 0x0c
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	9c 87       	std	Y+12, r25	; 0x0c
    113e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	8b 85       	ldd	r24, Y+11	; 0x0b
    1142:	9c 85       	ldd	r25, Y+12	; 0x0c
    1144:	89 2b       	or	r24, r25
    1146:	69 f7       	brne	.-38     	; 0x1122 <__stack+0x23>
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <__stack+0x73>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114a:	6f 81       	ldd	r22, Y+7	; 0x07
    114c:	78 85       	ldd	r23, Y+8	; 0x08
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9c 87       	std	Y+12, r25	; 0x0c
    115c:	8b 87       	std	Y+11, r24	; 0x0b
    115e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1160:	9c 85       	ldd	r25, Y+12	; 0x0c
    1162:	98 8b       	std	Y+16, r25	; 0x10
    1164:	8f 87       	std	Y+15, r24	; 0x0f
    1166:	8f 85       	ldd	r24, Y+15	; 0x0f
    1168:	98 89       	ldd	r25, Y+16	; 0x10
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <__stack+0x6b>
    116e:	98 8b       	std	Y+16, r25	; 0x10
    1170:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
    1172:	0e 94 cd 06 	call	0xd9a	; 0xd9a <AX_ReleaseTransmitter>
}
    1176:	60 96       	adiw	r28, 0x10	; 16
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	28 97       	sbiw	r28, 0x08	; 8
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	9e 83       	std	Y+6, r25	; 0x06
    119e:	8d 83       	std	Y+5, r24	; 0x05
    11a0:	78 87       	std	Y+8, r23	; 0x08
    11a2:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
    11a4:	1a 82       	std	Y+2, r1	; 0x02
    11a6:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
    11a8:	1c 82       	std	Y+4, r1	; 0x04
    11aa:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
    11ac:	8f 81       	ldd	r24, Y+7	; 0x07
    11ae:	98 85       	ldd	r25, Y+8	; 0x08
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	98 2f       	mov	r25, r24
    11ba:	88 27       	eor	r24, r24
    11bc:	99 0f       	add	r25, r25
    11be:	99 0f       	add	r25, r25
    11c0:	29 81       	ldd	r18, Y+1	; 0x01
    11c2:	3a 81       	ldd	r19, Y+2	; 0x02
    11c4:	82 2b       	or	r24, r18
    11c6:	93 2b       	or	r25, r19
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	89 96       	adiw	r24, 0x29	; 41
    11d2:	80 95       	com	r24
    11d4:	90 95       	com	r25
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
    11da:	0e 94 dd 06 	call	0xdba	; 0xdba <AX_StopReceiver>

	AX_SendChar(0xFF);
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0xFF);
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x01);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x05);
    11f0:	85 e0       	ldi	r24, 0x05	; 5
    11f2:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x03);
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(0x20);
    11fc:	80 e2       	ldi	r24, 0x20	; 32
    11fe:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(data);
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(data >> 8);
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	89 2f       	mov	r24, r25
    120e:	99 27       	eor	r25, r25
    1210:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>
	AX_SendChar(checksum);
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	0e 94 50 06 	call	0xca0	; 0xca0 <AX_SendChar>

	AX_StopTransmitter();
    121a:	0e 94 a9 06 	call	0xd52	; 0xd52 <AX_StopTransmitter>
	AX_ReleaseReceiver();
    121e:	0e 94 ed 06 	call	0xdda	; 0xdda <AX_ReleaseReceiver>

	AX_ReadStatus();
    1222:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <AX_ReadStatus>

	AX_ReleaseTransmitter();
    1226:	0e 94 cd 06 	call	0xd9a	; 0xd9a <AX_ReleaseTransmitter>
}
    122a:	28 96       	adiw	r28, 0x08	; 8
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <main>:
#include "system.h"



int main(void)
{
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	68 97       	sbiw	r28, 0x18	; 24
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61

	AX_UART_Init();
    1254:	0e 94 ab 05 	call	0xb56	; 0xb56 <AX_UART_Init>
	CAN_Init();
    1258:	0e 94 1c 03 	call	0x638	; 0x638 <CAN_Init>
	CAN_InitRxMob(LIFT_IDE);
    125c:	84 ed       	ldi	r24, 0xD4	; 212
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 96 03 	call	0x72c	; 0x72c <CAN_InitRxMob>
	systemInit();
    1264:	0e 94 8b 0c 	call	0x1916	; 0x1916 <systemInit>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	aa e7       	ldi	r26, 0x7A	; 122
    126e:	b4 e4       	ldi	r27, 0x44	; 68
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	ab 83       	std	Y+3, r26	; 0x03
    1276:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e4       	ldi	r19, 0x40	; 64
    127c:	4c e1       	ldi	r20, 0x1C	; 28
    127e:	55 e4       	ldi	r21, 0x45	; 69
    1280:	69 81       	ldd	r22, Y+1	; 0x01
    1282:	7a 81       	ldd	r23, Y+2	; 0x02
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	af 83       	std	Y+7, r26	; 0x07
    1296:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	6d 81       	ldd	r22, Y+5	; 0x05
    12a2:	7e 81       	ldd	r23, Y+6	; 0x06
    12a4:	8f 81       	ldd	r24, Y+7	; 0x07
    12a6:	98 85       	ldd	r25, Y+8	; 0x08
    12a8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__cmpsf2>
    12ac:	88 23       	and	r24, r24
    12ae:	2c f4       	brge	.+10     	; 0x12ba <main+0x7e>
		__ticks = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9a 87       	std	Y+10, r25	; 0x0a
    12b6:	89 87       	std	Y+9, r24	; 0x09
    12b8:	3f c0       	rjmp	.+126    	; 0x1338 <main+0xfc>
	else if (__tmp > 65535)
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	6d 81       	ldd	r22, Y+5	; 0x05
    12c4:	7e 81       	ldd	r23, Y+6	; 0x06
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__gesf2>
    12ce:	18 16       	cp	r1, r24
    12d0:	4c f5       	brge	.+82     	; 0x1324 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	69 81       	ldd	r22, Y+1	; 0x01
    12dc:	7a 81       	ldd	r23, Y+2	; 0x02
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9a 87       	std	Y+10, r25	; 0x0a
    12f8:	89 87       	std	Y+9, r24	; 0x09
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <main+0xde>
    12fc:	8a ef       	ldi	r24, 0xFA	; 250
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9c 87       	std	Y+12, r25	; 0x0c
    1302:	8b 87       	std	Y+11, r24	; 0x0b
    1304:	8b 85       	ldd	r24, Y+11	; 0x0b
    1306:	9c 85       	ldd	r25, Y+12	; 0x0c
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <main+0xcc>
    130c:	9c 87       	std	Y+12, r25	; 0x0c
    130e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9a 87       	std	Y+10, r25	; 0x0a
    1318:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131a:	89 85       	ldd	r24, Y+9	; 0x09
    131c:	9a 85       	ldd	r25, Y+10	; 0x0a
    131e:	89 2b       	or	r24, r25
    1320:	69 f7       	brne	.-38     	; 0x12fc <main+0xc0>
    1322:	14 c0       	rjmp	.+40     	; 0x134c <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1324:	6d 81       	ldd	r22, Y+5	; 0x05
    1326:	7e 81       	ldd	r23, Y+6	; 0x06
    1328:	8f 81       	ldd	r24, Y+7	; 0x07
    132a:	98 85       	ldd	r25, Y+8	; 0x08
    132c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	9a 87       	std	Y+10, r25	; 0x0a
    1336:	89 87       	std	Y+9, r24	; 0x09
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	9e 87       	std	Y+14, r25	; 0x0e
    133e:	8d 87       	std	Y+13, r24	; 0x0d
    1340:	8d 85       	ldd	r24, Y+13	; 0x0d
    1342:	9e 85       	ldd	r25, Y+14	; 0x0e
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <main+0x108>
    1348:	9e 87       	std	Y+14, r25	; 0x0e
    134a:	8d 87       	std	Y+13, r24	; 0x0d

	canMsg message;

    while(1)
    {
    	action(message);
    134c:	0f 85       	ldd	r16, Y+15	; 0x0f
    134e:	18 89       	ldd	r17, Y+16	; 0x10
    1350:	29 89       	ldd	r18, Y+17	; 0x11
    1352:	3a 89       	ldd	r19, Y+18	; 0x12
    1354:	4b 89       	ldd	r20, Y+19	; 0x13
    1356:	5c 89       	ldd	r21, Y+20	; 0x14
    1358:	6d 89       	ldd	r22, Y+21	; 0x15
    135a:	7e 89       	ldd	r23, Y+22	; 0x16
    135c:	8f 89       	ldd	r24, Y+23	; 0x17
    135e:	98 8d       	ldd	r25, Y+24	; 0x18
    1360:	0e 94 27 01 	call	0x24e	; 0x24e <action>
    	/*
    	CAN_read(&message);

		message.data[0] = 0;*/

    }
    1364:	f3 cf       	rjmp	.-26     	; 0x134c <main+0x110>

00001366 <GPIO_PinRegister>:
static volatile GPIOOutData *outputs[MAX_OUTPUTS];
static volatile unsigned char inputsNumber = 0;
static volatile unsigned char outputsNumber = 0;

unsigned char GPIO_PinRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	00 d0       	rcall	.+0      	; 0x1370 <GPIO_PinRegister+0xa>
    1370:	00 d0       	rcall	.+0      	; 0x1372 <GPIO_PinRegister+0xc>
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	9b 83       	std	Y+3, r25	; 0x03
    1378:	8a 83       	std	Y+2, r24	; 0x02
    137a:	6c 83       	std	Y+4, r22	; 0x04
	if(inputsNumber >= MAX_INPUTS)
    137c:	80 91 25 03 	lds	r24, 0x0325
    1380:	8a 30       	cpi	r24, 0x0A	; 10
    1382:	10 f0       	brcs	.+4      	; 0x1388 <GPIO_PinRegister+0x22>
		return 0;
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	8f c0       	rjmp	.+286    	; 0x14a6 <GPIO_PinRegister+0x140>

	unsigned char i;

	gpios[inputsNumber] = (GPIOData *)malloc(sizeof(GPIOData));
    1388:	80 91 25 03 	lds	r24, 0x0325
    138c:	08 2f       	mov	r16, r24
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	86 e0       	ldi	r24, 0x06	; 6
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <malloc>
    1398:	9c 01       	movw	r18, r24
    139a:	c8 01       	movw	r24, r16
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	83 50       	subi	r24, 0x03	; 3
    13a2:	9d 4f       	sbci	r25, 0xFD	; 253
    13a4:	fc 01       	movw	r30, r24
    13a6:	31 83       	std	Z+1, r19	; 0x01
    13a8:	20 83       	st	Z, r18
	if(gpios[inputsNumber] == NULL)
    13aa:	80 91 25 03 	lds	r24, 0x0325
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	83 50       	subi	r24, 0x03	; 3
    13b8:	9d 4f       	sbci	r25, 0xFD	; 253
    13ba:	fc 01       	movw	r30, r24
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	89 2b       	or	r24, r25
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <GPIO_PinRegister+0x62>
		return -1;
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	6f c0       	rjmp	.+222    	; 0x14a6 <GPIO_PinRegister+0x140>

	gpios[inputsNumber]->baseAddress = baseAddress;
    13c8:	80 91 25 03 	lds	r24, 0x0325
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	83 50       	subi	r24, 0x03	; 3
    13d6:	9d 4f       	sbci	r25, 0xFD	; 253
    13d8:	fc 01       	movw	r30, r24
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	2a 81       	ldd	r18, Y+2	; 0x02
    13e0:	3b 81       	ldd	r19, Y+3	; 0x03
    13e2:	fc 01       	movw	r30, r24
    13e4:	31 83       	std	Z+1, r19	; 0x01
    13e6:	20 83       	st	Z, r18
	gpios[inputsNumber]->pinPosition = pin;
    13e8:	80 91 25 03 	lds	r24, 0x0325
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	83 50       	subi	r24, 0x03	; 3
    13f6:	9d 4f       	sbci	r25, 0xFD	; 253
    13f8:	fc 01       	movw	r30, r24
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	fc 01       	movw	r30, r24
    1402:	22 83       	std	Z+2, r18	; 0x02
	for(i = 0; i < 3; i++)
    1404:	19 82       	std	Y+1, r1	; 0x01
    1406:	16 c0       	rjmp	.+44     	; 0x1434 <GPIO_PinRegister+0xce>
		gpios[inputsNumber]->buffer[i] = 0;
    1408:	80 91 25 03 	lds	r24, 0x0325
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	83 50       	subi	r24, 0x03	; 3
    1416:	9d 4f       	sbci	r25, 0xFD	; 253
    1418:	fc 01       	movw	r30, r24
    141a:	20 81       	ld	r18, Z
    141c:	31 81       	ldd	r19, Z+1	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	82 0f       	add	r24, r18
    1426:	93 1f       	adc	r25, r19
    1428:	03 96       	adiw	r24, 0x03	; 3
    142a:	fc 01       	movw	r30, r24
    142c:	10 82       	st	Z, r1
	if(gpios[inputsNumber] == NULL)
		return -1;

	gpios[inputsNumber]->baseAddress = baseAddress;
	gpios[inputsNumber]->pinPosition = pin;
	for(i = 0; i < 3; i++)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	38 f3       	brcs	.-50     	; 0x1408 <GPIO_PinRegister+0xa2>
		gpios[inputsNumber]->buffer[i] = 0;

	_MMIO_BYTE(baseAddress - 1) &= ~(1 << pin);
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	2a 81       	ldd	r18, Y+2	; 0x02
    1442:	3b 81       	ldd	r19, Y+3	; 0x03
    1444:	21 50       	subi	r18, 0x01	; 1
    1446:	31 09       	sbc	r19, r1
    1448:	f9 01       	movw	r30, r18
    144a:	20 81       	ld	r18, Z
    144c:	62 2f       	mov	r22, r18
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	42 2f       	mov	r20, r18
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	21 e0       	ldi	r18, 0x01	; 1
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <GPIO_PinRegister+0xf8>
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	4a 95       	dec	r20
    1460:	e2 f7       	brpl	.-8      	; 0x145a <GPIO_PinRegister+0xf4>
    1462:	20 95       	com	r18
    1464:	26 23       	and	r18, r22
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) |= (1 << pin);
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	9b 81       	ldd	r25, Y+3	; 0x03
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <GPIO_PinRegister+0x11e>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	2a 95       	dec	r18
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <GPIO_PinRegister+0x11a>
    1488:	84 2b       	or	r24, r20
    148a:	28 2f       	mov	r18, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	9b 81       	ldd	r25, Y+3	; 0x03
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18

	i = inputsNumber;
    1494:	80 91 25 03 	lds	r24, 0x0325
    1498:	89 83       	std	Y+1, r24	; 0x01
	inputsNumber++;
    149a:	80 91 25 03 	lds	r24, 0x0325
    149e:	8f 5f       	subi	r24, 0xFF	; 255
    14a0:	80 93 25 03 	sts	0x0325, r24

	return i;
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <GPIO_OutputRegister>:

signed char GPIO_OutputRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <GPIO_OutputRegister+0xa>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <GPIO_OutputRegister+0xc>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	6c 83       	std	Y+4, r22	; 0x04
	if(outputsNumber >= MAX_OUTPUTS)
    14ce:	80 91 26 03 	lds	r24, 0x0326
    14d2:	8a 30       	cpi	r24, 0x0A	; 10
    14d4:	10 f0       	brcs	.+4      	; 0x14da <GPIO_OutputRegister+0x22>
		return -1;
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
    14d8:	74 c0       	rjmp	.+232    	; 0x15c2 <GPIO_OutputRegister+0x10a>

	unsigned char i;

	outputs[outputsNumber] = (GPIOOutData *)malloc(sizeof(GPIOOutData));
    14da:	80 91 26 03 	lds	r24, 0x0326
    14de:	08 2f       	mov	r16, r24
    14e0:	10 e0       	ldi	r17, 0x00	; 0
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <malloc>
    14ea:	9c 01       	movw	r18, r24
    14ec:	c8 01       	movw	r24, r16
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	8f 5e       	subi	r24, 0xEF	; 239
    14f4:	9c 4f       	sbci	r25, 0xFC	; 252
    14f6:	fc 01       	movw	r30, r24
    14f8:	31 83       	std	Z+1, r19	; 0x01
    14fa:	20 83       	st	Z, r18
	if(outputs[outputsNumber] == NULL)
    14fc:	80 91 26 03 	lds	r24, 0x0326
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	8f 5e       	subi	r24, 0xEF	; 239
    150a:	9c 4f       	sbci	r25, 0xFC	; 252
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	89 2b       	or	r24, r25
    1514:	11 f4       	brne	.+4      	; 0x151a <GPIO_OutputRegister+0x62>
		return -1;
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	54 c0       	rjmp	.+168    	; 0x15c2 <GPIO_OutputRegister+0x10a>

	outputs[outputsNumber]->baseAddress = baseAddress;
    151a:	80 91 26 03 	lds	r24, 0x0326
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	8f 5e       	subi	r24, 0xEF	; 239
    1528:	9c 4f       	sbci	r25, 0xFC	; 252
    152a:	fc 01       	movw	r30, r24
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	2a 81       	ldd	r18, Y+2	; 0x02
    1532:	3b 81       	ldd	r19, Y+3	; 0x03
    1534:	fc 01       	movw	r30, r24
    1536:	31 83       	std	Z+1, r19	; 0x01
    1538:	20 83       	st	Z, r18
	outputs[outputsNumber]->pinPosition = pin;
    153a:	80 91 26 03 	lds	r24, 0x0326
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	8f 5e       	subi	r24, 0xEF	; 239
    1548:	9c 4f       	sbci	r25, 0xFC	; 252
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	2c 81       	ldd	r18, Y+4	; 0x04
    1552:	fc 01       	movw	r30, r24
    1554:	22 83       	std	Z+2, r18	; 0x02

	_MMIO_BYTE(baseAddress - 1) |= (1 << pin);
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	9b 81       	ldd	r25, Y+3	; 0x03
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	2a 81       	ldd	r18, Y+2	; 0x02
    155e:	3b 81       	ldd	r19, Y+3	; 0x03
    1560:	21 50       	subi	r18, 0x01	; 1
    1562:	31 09       	sbc	r19, r1
    1564:	f9 01       	movw	r30, r18
    1566:	20 81       	ld	r18, Z
    1568:	62 2f       	mov	r22, r18
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	42 2f       	mov	r20, r18
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_OutputRegister+0xc2>
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	4a 95       	dec	r20
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_OutputRegister+0xbe>
    157e:	26 2b       	or	r18, r22
    1580:	fc 01       	movw	r30, r24
    1582:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) &= ~(1 << pin);
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_OutputRegister+0xe6>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	2a 95       	dec	r18
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_OutputRegister+0xe2>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	28 2f       	mov	r18, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	9b 81       	ldd	r25, Y+3	; 0x03
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18

	i = outputsNumber;
    15b0:	80 91 26 03 	lds	r24, 0x0326
    15b4:	89 83       	std	Y+1, r24	; 0x01
	outputsNumber++;
    15b6:	80 91 26 03 	lds	r24, 0x0326
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	80 93 26 03 	sts	0x0326, r24

	return i;
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <GPIO_OutputSet>:

signed char GPIO_OutputSet(unsigned char outHandler)
{
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	1f 92       	push	r1
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    15e0:	80 91 26 03 	lds	r24, 0x0326
    15e4:	99 81       	ldd	r25, Y+1	; 0x01
    15e6:	98 17       	cp	r25, r24
    15e8:	10 f0       	brcs	.+4      	; 0x15ee <GPIO_OutputSet+0x1a>
		return -1;
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	2a c0       	rjmp	.+84     	; 0x1642 <GPIO_OutputSet+0x6e>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) |= (1 << outputs[outHandler]->pinPosition);
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	8f 5e       	subi	r24, 0xEF	; 239
    15fa:	9c 4f       	sbci	r25, 0xFC	; 252
    15fc:	fc 01       	movw	r30, r24
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	fc 01       	movw	r30, r24
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	ac 01       	movw	r20, r24
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_OutputSet+0x42>
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	2a 95       	dec	r18
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_OutputSet+0x3e>
    161a:	9a 01       	movw	r18, r20
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	8f 5e       	subi	r24, 0xEF	; 239
    1628:	9c 4f       	sbci	r25, 0xFC	; 252
    162a:	fc 01       	movw	r30, r24
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	fc 01       	movw	r30, r24
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	fc 01       	movw	r30, r24
    1638:	40 81       	ld	r20, Z
    163a:	24 2b       	or	r18, r20
    163c:	fc 01       	movw	r30, r24
    163e:	20 83       	st	Z, r18

	return 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
}
    1642:	0f 90       	pop	r0
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <GPIO_OutputReset>:

signed char GPIO_OutputReset(unsigned char outHandler)
{
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	1f 92       	push	r1
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    1656:	80 91 26 03 	lds	r24, 0x0326
    165a:	99 81       	ldd	r25, Y+1	; 0x01
    165c:	98 17       	cp	r25, r24
    165e:	10 f0       	brcs	.+4      	; 0x1664 <GPIO_OutputReset+0x1a>
		return -1;
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	2b c0       	rjmp	.+86     	; 0x16ba <GPIO_OutputReset+0x70>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) &= ~(1 << outputs[outHandler]->pinPosition);
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	8f 5e       	subi	r24, 0xEF	; 239
    1670:	9c 4f       	sbci	r25, 0xFC	; 252
    1672:	fc 01       	movw	r30, r24
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	fc 01       	movw	r30, r24
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 c0       	rjmp	.+4      	; 0x168a <GPIO_OutputReset+0x40>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	2a 95       	dec	r18
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <GPIO_OutputReset+0x3c>
    168e:	9c 01       	movw	r18, r24
    1690:	20 95       	com	r18
    1692:	30 95       	com	r19
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	8f 5e       	subi	r24, 0xEF	; 239
    16a0:	9c 4f       	sbci	r25, 0xFC	; 252
    16a2:	fc 01       	movw	r30, r24
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	fc 01       	movw	r30, r24
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	fc 01       	movw	r30, r24
    16b0:	40 81       	ld	r20, Z
    16b2:	24 23       	and	r18, r20
    16b4:	fc 01       	movw	r30, r24
    16b6:	20 83       	st	Z, r18

	return 0;
    16b8:	80 e0       	ldi	r24, 0x00	; 0
}
    16ba:	0f 90       	pop	r0
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <GPIO_PinRead>:

unsigned char GPIO_PinRead(unsigned char pinHandler)
{
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	1f 92       	push	r1
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	89 83       	std	Y+1, r24	; 0x01
	return !( (gpios[pinHandler]->buffer[0]) | (gpios[pinHandler]->buffer[1]) | (gpios[pinHandler]->buffer[2]) );
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	83 50       	subi	r24, 0x03	; 3
    16da:	9d 4f       	sbci	r25, 0xFD	; 253
    16dc:	fc 01       	movw	r30, r24
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	fc 01       	movw	r30, r24
    16e4:	23 81       	ldd	r18, Z+3	; 0x03
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	83 50       	subi	r24, 0x03	; 3
    16f2:	9d 4f       	sbci	r25, 0xFD	; 253
    16f4:	fc 01       	movw	r30, r24
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	fc 01       	movw	r30, r24
    16fc:	84 81       	ldd	r24, Z+4	; 0x04
    16fe:	28 2b       	or	r18, r24
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	83 50       	subi	r24, 0x03	; 3
    170c:	9d 4f       	sbci	r25, 0xFD	; 253
    170e:	fc 01       	movw	r30, r24
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	fc 01       	movw	r30, r24
    1716:	85 81       	ldd	r24, Z+5	; 0x05
    1718:	92 2f       	mov	r25, r18
    171a:	98 2b       	or	r25, r24
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	99 23       	and	r25, r25
    1720:	09 f0       	breq	.+2      	; 0x1724 <GPIO_PinRead+0x62>
    1722:	80 e0       	ldi	r24, 0x00	; 0
}
    1724:	0f 90       	pop	r0
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <GPIO_ReadFromRegister>:

unsigned char GPIO_ReadFromRegister(unsigned char pinHandler)
{
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	00 d0       	rcall	.+0      	; 0x1732 <GPIO_ReadFromRegister+0x6>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char state = 0;
    1738:	19 82       	std	Y+1, r1	; 0x01

	state = ((_MMIO_BYTE(gpios[pinHandler]->baseAddress - 2)) >> (gpios[pinHandler]->pinPosition)) & 0x01;
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	83 50       	subi	r24, 0x03	; 3
    1746:	9d 4f       	sbci	r25, 0xFD	; 253
    1748:	fc 01       	movw	r30, r24
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	fc 01       	movw	r30, r24
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	02 97       	sbiw	r24, 0x02	; 2
    1756:	fc 01       	movw	r30, r24
    1758:	80 81       	ld	r24, Z
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	2a 81       	ldd	r18, Y+2	; 0x02
    1760:	22 2f       	mov	r18, r18
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	22 0f       	add	r18, r18
    1766:	33 1f       	adc	r19, r19
    1768:	23 50       	subi	r18, 0x03	; 3
    176a:	3d 4f       	sbci	r19, 0xFD	; 253
    176c:	f9 01       	movw	r30, r18
    176e:	20 81       	ld	r18, Z
    1770:	31 81       	ldd	r19, Z+1	; 0x01
    1772:	f9 01       	movw	r30, r18
    1774:	22 81       	ldd	r18, Z+2	; 0x02
    1776:	22 2f       	mov	r18, r18
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_ReadFromRegister+0x54>
    177c:	95 95       	asr	r25
    177e:	87 95       	ror	r24
    1780:	2a 95       	dec	r18
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_ReadFromRegister+0x50>
    1784:	81 70       	andi	r24, 0x01	; 1
    1786:	89 83       	std	Y+1, r24	; 0x01

	return state;
    1788:	89 81       	ldd	r24, Y+1	; 0x01
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <fillDebaunsingData>:

void fillDebaunsingData(void)
{
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	1f 92       	push	r1
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	static char j = 0;

	if(++j >= 3)
    17a6:	80 91 27 03 	lds	r24, 0x0327
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	80 93 27 03 	sts	0x0327, r24
    17b0:	80 91 27 03 	lds	r24, 0x0327
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	10 f0       	brcs	.+4      	; 0x17bc <fillDebaunsingData+0x28>
		j = 0;
    17b8:	10 92 27 03 	sts	0x0327, r1

	for(i = 0; i < inputsNumber; ++i)
    17bc:	19 82       	std	Y+1, r1	; 0x01
    17be:	1b c0       	rjmp	.+54     	; 0x17f6 <fillDebaunsingData+0x62>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	83 50       	subi	r24, 0x03	; 3
    17cc:	9d 4f       	sbci	r25, 0xFD	; 253
    17ce:	fc 01       	movw	r30, r24
    17d0:	e0 80       	ld	r14, Z
    17d2:	f1 80       	ldd	r15, Z+1	; 0x01
    17d4:	80 91 27 03 	lds	r24, 0x0327
    17d8:	08 2f       	mov	r16, r24
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	0e 94 96 0b 	call	0x172c	; 0x172c <GPIO_ReadFromRegister>
    17e2:	28 2f       	mov	r18, r24
    17e4:	c7 01       	movw	r24, r14
    17e6:	80 0f       	add	r24, r16
    17e8:	91 1f       	adc	r25, r17
    17ea:	03 96       	adiw	r24, 0x03	; 3
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
	static char j = 0;

	if(++j >= 3)
		j = 0;

	for(i = 0; i < inputsNumber; ++i)
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	80 91 25 03 	lds	r24, 0x0325
    17fa:	99 81       	ldd	r25, Y+1	; 0x01
    17fc:	98 17       	cp	r25, r24
    17fe:	00 f3       	brcs	.-64     	; 0x17c0 <fillDebaunsingData+0x2c>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
}
    1800:	0f 90       	pop	r0
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	08 95       	ret

00001810 <Timer_Init>:

void Timer_Init(unsigned int freq)
{
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	00 d0       	rcall	.+0      	; 0x181a <Timer_Init+0xa>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1822:	80 e8       	ldi	r24, 0x80	; 128
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	fc 01       	movw	r30, r24
    1828:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    182a:	81 e8       	ldi	r24, 0x81	; 129
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	29 e0       	ldi	r18, 0x09	; 9
    1830:	fc 01       	movw	r30, r24
    1832:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / freq + 0.5;
    1834:	08 e8       	ldi	r16, 0x88	; 136
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	cc 01       	movw	r24, r24
    183e:	a0 e0       	ldi	r26, 0x00	; 0
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatunsisf>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9c 01       	movw	r18, r24
    1850:	ad 01       	movw	r20, r26
    1852:	60 e8       	ldi	r22, 0x80	; 128
    1854:	76 e9       	ldi	r23, 0x96	; 150
    1856:	88 e1       	ldi	r24, 0x18	; 24
    1858:	9b e4       	ldi	r25, 0x4B	; 75
    185a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__divsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__addsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1888:	8f e6       	ldi	r24, 0x6F	; 111
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	22 e0       	ldi	r18, 0x02	; 2
    188e:	fc 01       	movw	r30, r24
    1890:	20 83       	st	Z, r18

	SREG |= 0x80;
    1892:	8f e5       	ldi	r24, 0x5F	; 95
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	2f e5       	ldi	r18, 0x5F	; 95
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	f9 01       	movw	r30, r18
    189c:	20 81       	ld	r18, Z
    189e:	20 68       	ori	r18, 0x80	; 128
    18a0:	fc 01       	movw	r30, r24
    18a2:	20 83       	st	Z, r18
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	08 95       	ret

000018b2 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	00 90 5f 00 	lds	r0, 0x005F
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	00 90 5b 00 	lds	r0, 0x005B
    18c2:	0f 92       	push	r0
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	fillDebaunsingData();
    18e4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fillDebaunsingData>
    #if USE_TIMER_HOOK == 1
    Timer_Hook();
    #endif // USE_TIMER_HOOK
}
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	bf 91       	pop	r27
    18f2:	af 91       	pop	r26
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	7f 91       	pop	r23
    18fa:	6f 91       	pop	r22
    18fc:	5f 91       	pop	r21
    18fe:	4f 91       	pop	r20
    1900:	3f 91       	pop	r19
    1902:	2f 91       	pop	r18
    1904:	0f 90       	pop	r0
    1906:	00 92 5b 00 	sts	0x005B, r0
    190a:	0f 90       	pop	r0
    190c:	00 92 5f 00 	sts	0x005F, r0
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <systemInit>:

void systemInit(void)
{
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
	Timer_Init(1000);
    191e:	88 ee       	ldi	r24, 0xE8	; 232
    1920:	93 e0       	ldi	r25, 0x03	; 3
    1922:	0e 94 08 0c 	call	0x1810	; 0x1810 <Timer_Init>

	chipSelect = GPIO_OutputRegister(GPIOF_BASE, 7);
    1926:	67 e0       	ldi	r22, 0x07	; 7
    1928:	81 e3       	ldi	r24, 0x31	; 49
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <GPIO_OutputRegister>
    1930:	80 93 28 03 	sts	0x0328, r24
	INA1 = GPIO_OutputRegister(GPIOF_BASE, 6);
    1934:	66 e0       	ldi	r22, 0x06	; 6
    1936:	81 e3       	ldi	r24, 0x31	; 49
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <GPIO_OutputRegister>
    193e:	80 93 29 03 	sts	0x0329, r24
	INB1 = GPIO_OutputRegister(GPIOF_BASE, 5);
    1942:	65 e0       	ldi	r22, 0x05	; 5
    1944:	81 e3       	ldi	r24, 0x31	; 49
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <GPIO_OutputRegister>
    194c:	80 93 2c 03 	sts	0x032C, r24
	PWM = GPIO_OutputRegister(GPIOE_BASE, 3);
    1950:	63 e0       	ldi	r22, 0x03	; 3
    1952:	8e e2       	ldi	r24, 0x2E	; 46
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <GPIO_OutputRegister>
    195a:	80 93 2a 03 	sts	0x032A, r24
	pinE4 = GPIO_OutputRegister(GPIOE_BASE, 4);
    195e:	64 e0       	ldi	r22, 0x04	; 4
    1960:	8e e2       	ldi	r24, 0x2E	; 46
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <GPIO_OutputRegister>
    1968:	80 93 2b 03 	sts	0x032B, r24
	pinE5 = GPIO_OutputRegister(GPIOE_BASE, 5);
    196c:	65 e0       	ldi	r22, 0x05	; 5
    196e:	8e e2       	ldi	r24, 0x2E	; 46
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <GPIO_OutputRegister>
    1976:	80 93 2d 03 	sts	0x032D, r24

}
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <__subsf3>:
    1980:	50 58       	subi	r21, 0x80	; 128

00001982 <__addsf3>:
    1982:	bb 27       	eor	r27, r27
    1984:	aa 27       	eor	r26, r26
    1986:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__addsf3x>
    198a:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_round>
    198e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__fp_pscA>
    1992:	38 f0       	brcs	.+14     	; 0x19a2 <__addsf3+0x20>
    1994:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_pscB>
    1998:	20 f0       	brcs	.+8      	; 0x19a2 <__addsf3+0x20>
    199a:	39 f4       	brne	.+14     	; 0x19aa <__addsf3+0x28>
    199c:	9f 3f       	cpi	r25, 0xFF	; 255
    199e:	19 f4       	brne	.+6      	; 0x19a6 <__addsf3+0x24>
    19a0:	26 f4       	brtc	.+8      	; 0x19aa <__addsf3+0x28>
    19a2:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_nan>
    19a6:	0e f4       	brtc	.+2      	; 0x19aa <__addsf3+0x28>
    19a8:	e0 95       	com	r30
    19aa:	e7 fb       	bst	r30, 7
    19ac:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__fp_inf>

000019b0 <__addsf3x>:
    19b0:	e9 2f       	mov	r30, r25
    19b2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_split3>
    19b6:	58 f3       	brcs	.-42     	; 0x198e <__addsf3+0xc>
    19b8:	ba 17       	cp	r27, r26
    19ba:	62 07       	cpc	r22, r18
    19bc:	73 07       	cpc	r23, r19
    19be:	84 07       	cpc	r24, r20
    19c0:	95 07       	cpc	r25, r21
    19c2:	20 f0       	brcs	.+8      	; 0x19cc <__addsf3x+0x1c>
    19c4:	79 f4       	brne	.+30     	; 0x19e4 <__addsf3x+0x34>
    19c6:	a6 f5       	brtc	.+104    	; 0x1a30 <__addsf3x+0x80>
    19c8:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__fp_zero>
    19cc:	0e f4       	brtc	.+2      	; 0x19d0 <__addsf3x+0x20>
    19ce:	e0 95       	com	r30
    19d0:	0b 2e       	mov	r0, r27
    19d2:	ba 2f       	mov	r27, r26
    19d4:	a0 2d       	mov	r26, r0
    19d6:	0b 01       	movw	r0, r22
    19d8:	b9 01       	movw	r22, r18
    19da:	90 01       	movw	r18, r0
    19dc:	0c 01       	movw	r0, r24
    19de:	ca 01       	movw	r24, r20
    19e0:	a0 01       	movw	r20, r0
    19e2:	11 24       	eor	r1, r1
    19e4:	ff 27       	eor	r31, r31
    19e6:	59 1b       	sub	r21, r25
    19e8:	99 f0       	breq	.+38     	; 0x1a10 <__addsf3x+0x60>
    19ea:	59 3f       	cpi	r21, 0xF9	; 249
    19ec:	50 f4       	brcc	.+20     	; 0x1a02 <__addsf3x+0x52>
    19ee:	50 3e       	cpi	r21, 0xE0	; 224
    19f0:	68 f1       	brcs	.+90     	; 0x1a4c <__addsf3x+0x9c>
    19f2:	1a 16       	cp	r1, r26
    19f4:	f0 40       	sbci	r31, 0x00	; 0
    19f6:	a2 2f       	mov	r26, r18
    19f8:	23 2f       	mov	r18, r19
    19fa:	34 2f       	mov	r19, r20
    19fc:	44 27       	eor	r20, r20
    19fe:	58 5f       	subi	r21, 0xF8	; 248
    1a00:	f3 cf       	rjmp	.-26     	; 0x19e8 <__addsf3x+0x38>
    1a02:	46 95       	lsr	r20
    1a04:	37 95       	ror	r19
    1a06:	27 95       	ror	r18
    1a08:	a7 95       	ror	r26
    1a0a:	f0 40       	sbci	r31, 0x00	; 0
    1a0c:	53 95       	inc	r21
    1a0e:	c9 f7       	brne	.-14     	; 0x1a02 <__addsf3x+0x52>
    1a10:	7e f4       	brtc	.+30     	; 0x1a30 <__addsf3x+0x80>
    1a12:	1f 16       	cp	r1, r31
    1a14:	ba 0b       	sbc	r27, r26
    1a16:	62 0b       	sbc	r22, r18
    1a18:	73 0b       	sbc	r23, r19
    1a1a:	84 0b       	sbc	r24, r20
    1a1c:	ba f0       	brmi	.+46     	; 0x1a4c <__addsf3x+0x9c>
    1a1e:	91 50       	subi	r25, 0x01	; 1
    1a20:	a1 f0       	breq	.+40     	; 0x1a4a <__addsf3x+0x9a>
    1a22:	ff 0f       	add	r31, r31
    1a24:	bb 1f       	adc	r27, r27
    1a26:	66 1f       	adc	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	c2 f7       	brpl	.-16     	; 0x1a1e <__addsf3x+0x6e>
    1a2e:	0e c0       	rjmp	.+28     	; 0x1a4c <__addsf3x+0x9c>
    1a30:	ba 0f       	add	r27, r26
    1a32:	62 1f       	adc	r22, r18
    1a34:	73 1f       	adc	r23, r19
    1a36:	84 1f       	adc	r24, r20
    1a38:	48 f4       	brcc	.+18     	; 0x1a4c <__addsf3x+0x9c>
    1a3a:	87 95       	ror	r24
    1a3c:	77 95       	ror	r23
    1a3e:	67 95       	ror	r22
    1a40:	b7 95       	ror	r27
    1a42:	f7 95       	ror	r31
    1a44:	9e 3f       	cpi	r25, 0xFE	; 254
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <__addsf3x+0x9a>
    1a48:	b0 cf       	rjmp	.-160    	; 0x19aa <__addsf3+0x28>
    1a4a:	93 95       	inc	r25
    1a4c:	88 0f       	add	r24, r24
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <__addsf3x+0xa2>
    1a50:	99 27       	eor	r25, r25
    1a52:	ee 0f       	add	r30, r30
    1a54:	97 95       	ror	r25
    1a56:	87 95       	ror	r24
    1a58:	08 95       	ret

00001a5a <__cmpsf2>:
    1a5a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_cmp>
    1a5e:	08 f4       	brcc	.+2      	; 0x1a62 <__cmpsf2+0x8>
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	08 95       	ret

00001a64 <__divsf3>:
    1a64:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__divsf3x>
    1a68:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_round>
    1a6c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_pscB>
    1a70:	58 f0       	brcs	.+22     	; 0x1a88 <__divsf3+0x24>
    1a72:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__fp_pscA>
    1a76:	40 f0       	brcs	.+16     	; 0x1a88 <__divsf3+0x24>
    1a78:	29 f4       	brne	.+10     	; 0x1a84 <__divsf3+0x20>
    1a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <__divsf3+0x24>
    1a7e:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__fp_inf>
    1a82:	51 11       	cpse	r21, r1
    1a84:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_szero>
    1a88:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_nan>

00001a8c <__divsf3x>:
    1a8c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_split3>
    1a90:	68 f3       	brcs	.-38     	; 0x1a6c <__divsf3+0x8>

00001a92 <__divsf3_pse>:
    1a92:	99 23       	and	r25, r25
    1a94:	b1 f3       	breq	.-20     	; 0x1a82 <__divsf3+0x1e>
    1a96:	55 23       	and	r21, r21
    1a98:	91 f3       	breq	.-28     	; 0x1a7e <__divsf3+0x1a>
    1a9a:	95 1b       	sub	r25, r21
    1a9c:	55 0b       	sbc	r21, r21
    1a9e:	bb 27       	eor	r27, r27
    1aa0:	aa 27       	eor	r26, r26
    1aa2:	62 17       	cp	r22, r18
    1aa4:	73 07       	cpc	r23, r19
    1aa6:	84 07       	cpc	r24, r20
    1aa8:	38 f0       	brcs	.+14     	; 0x1ab8 <__divsf3_pse+0x26>
    1aaa:	9f 5f       	subi	r25, 0xFF	; 255
    1aac:	5f 4f       	sbci	r21, 0xFF	; 255
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	44 1f       	adc	r20, r20
    1ab4:	aa 1f       	adc	r26, r26
    1ab6:	a9 f3       	breq	.-22     	; 0x1aa2 <__divsf3_pse+0x10>
    1ab8:	35 d0       	rcall	.+106    	; 0x1b24 <__divsf3_pse+0x92>
    1aba:	0e 2e       	mov	r0, r30
    1abc:	3a f0       	brmi	.+14     	; 0x1acc <__divsf3_pse+0x3a>
    1abe:	e0 e8       	ldi	r30, 0x80	; 128
    1ac0:	32 d0       	rcall	.+100    	; 0x1b26 <__divsf3_pse+0x94>
    1ac2:	91 50       	subi	r25, 0x01	; 1
    1ac4:	50 40       	sbci	r21, 0x00	; 0
    1ac6:	e6 95       	lsr	r30
    1ac8:	00 1c       	adc	r0, r0
    1aca:	ca f7       	brpl	.-14     	; 0x1abe <__divsf3_pse+0x2c>
    1acc:	2b d0       	rcall	.+86     	; 0x1b24 <__divsf3_pse+0x92>
    1ace:	fe 2f       	mov	r31, r30
    1ad0:	29 d0       	rcall	.+82     	; 0x1b24 <__divsf3_pse+0x92>
    1ad2:	66 0f       	add	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	26 17       	cp	r18, r22
    1adc:	37 07       	cpc	r19, r23
    1ade:	48 07       	cpc	r20, r24
    1ae0:	ab 07       	cpc	r26, r27
    1ae2:	b0 e8       	ldi	r27, 0x80	; 128
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <__divsf3_pse+0x56>
    1ae6:	bb 0b       	sbc	r27, r27
    1ae8:	80 2d       	mov	r24, r0
    1aea:	bf 01       	movw	r22, r30
    1aec:	ff 27       	eor	r31, r31
    1aee:	93 58       	subi	r25, 0x83	; 131
    1af0:	5f 4f       	sbci	r21, 0xFF	; 255
    1af2:	3a f0       	brmi	.+14     	; 0x1b02 <__divsf3_pse+0x70>
    1af4:	9e 3f       	cpi	r25, 0xFE	; 254
    1af6:	51 05       	cpc	r21, r1
    1af8:	78 f0       	brcs	.+30     	; 0x1b18 <__divsf3_pse+0x86>
    1afa:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__fp_inf>
    1afe:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_szero>
    1b02:	5f 3f       	cpi	r21, 0xFF	; 255
    1b04:	e4 f3       	brlt	.-8      	; 0x1afe <__divsf3_pse+0x6c>
    1b06:	98 3e       	cpi	r25, 0xE8	; 232
    1b08:	d4 f3       	brlt	.-12     	; 0x1afe <__divsf3_pse+0x6c>
    1b0a:	86 95       	lsr	r24
    1b0c:	77 95       	ror	r23
    1b0e:	67 95       	ror	r22
    1b10:	b7 95       	ror	r27
    1b12:	f7 95       	ror	r31
    1b14:	9f 5f       	subi	r25, 0xFF	; 255
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__divsf3_pse+0x78>
    1b18:	88 0f       	add	r24, r24
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	97 f9       	bld	r25, 7
    1b22:	08 95       	ret
    1b24:	e1 e0       	ldi	r30, 0x01	; 1
    1b26:	66 0f       	add	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	62 17       	cp	r22, r18
    1b30:	73 07       	cpc	r23, r19
    1b32:	84 07       	cpc	r24, r20
    1b34:	ba 07       	cpc	r27, r26
    1b36:	20 f0       	brcs	.+8      	; 0x1b40 <__divsf3_pse+0xae>
    1b38:	62 1b       	sub	r22, r18
    1b3a:	73 0b       	sbc	r23, r19
    1b3c:	84 0b       	sbc	r24, r20
    1b3e:	ba 0b       	sbc	r27, r26
    1b40:	ee 1f       	adc	r30, r30
    1b42:	88 f7       	brcc	.-30     	; 0x1b26 <__divsf3_pse+0x94>
    1b44:	e0 95       	com	r30
    1b46:	08 95       	ret

00001b48 <__fixunssfsi>:
    1b48:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__fp_splitA>
    1b4c:	88 f0       	brcs	.+34     	; 0x1b70 <__fixunssfsi+0x28>
    1b4e:	9f 57       	subi	r25, 0x7F	; 127
    1b50:	98 f0       	brcs	.+38     	; 0x1b78 <__fixunssfsi+0x30>
    1b52:	b9 2f       	mov	r27, r25
    1b54:	99 27       	eor	r25, r25
    1b56:	b7 51       	subi	r27, 0x17	; 23
    1b58:	b0 f0       	brcs	.+44     	; 0x1b86 <__fixunssfsi+0x3e>
    1b5a:	e1 f0       	breq	.+56     	; 0x1b94 <__fixunssfsi+0x4c>
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	1a f0       	brmi	.+6      	; 0x1b6c <__fixunssfsi+0x24>
    1b66:	ba 95       	dec	r27
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__fixunssfsi+0x14>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <__fixunssfsi+0x4c>
    1b6c:	b1 30       	cpi	r27, 0x01	; 1
    1b6e:	91 f0       	breq	.+36     	; 0x1b94 <__fixunssfsi+0x4c>
    1b70:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__fp_zero>
    1b74:	b1 e0       	ldi	r27, 0x01	; 1
    1b76:	08 95       	ret
    1b78:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__fp_zero>
    1b7c:	67 2f       	mov	r22, r23
    1b7e:	78 2f       	mov	r23, r24
    1b80:	88 27       	eor	r24, r24
    1b82:	b8 5f       	subi	r27, 0xF8	; 248
    1b84:	39 f0       	breq	.+14     	; 0x1b94 <__fixunssfsi+0x4c>
    1b86:	b9 3f       	cpi	r27, 0xF9	; 249
    1b88:	cc f3       	brlt	.-14     	; 0x1b7c <__fixunssfsi+0x34>
    1b8a:	86 95       	lsr	r24
    1b8c:	77 95       	ror	r23
    1b8e:	67 95       	ror	r22
    1b90:	b3 95       	inc	r27
    1b92:	d9 f7       	brne	.-10     	; 0x1b8a <__fixunssfsi+0x42>
    1b94:	3e f4       	brtc	.+14     	; 0x1ba4 <__fixunssfsi+0x5c>
    1b96:	90 95       	com	r25
    1b98:	80 95       	com	r24
    1b9a:	70 95       	com	r23
    1b9c:	61 95       	neg	r22
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	08 95       	ret

00001ba6 <__floatunsisf>:
    1ba6:	e8 94       	clt
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <__floatsisf+0x12>

00001baa <__floatsisf>:
    1baa:	97 fb       	bst	r25, 7
    1bac:	3e f4       	brtc	.+14     	; 0x1bbc <__floatsisf+0x12>
    1bae:	90 95       	com	r25
    1bb0:	80 95       	com	r24
    1bb2:	70 95       	com	r23
    1bb4:	61 95       	neg	r22
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	99 23       	and	r25, r25
    1bbe:	a9 f0       	breq	.+42     	; 0x1bea <__floatsisf+0x40>
    1bc0:	f9 2f       	mov	r31, r25
    1bc2:	96 e9       	ldi	r25, 0x96	; 150
    1bc4:	bb 27       	eor	r27, r27
    1bc6:	93 95       	inc	r25
    1bc8:	f6 95       	lsr	r31
    1bca:	87 95       	ror	r24
    1bcc:	77 95       	ror	r23
    1bce:	67 95       	ror	r22
    1bd0:	b7 95       	ror	r27
    1bd2:	f1 11       	cpse	r31, r1
    1bd4:	f8 cf       	rjmp	.-16     	; 0x1bc6 <__floatsisf+0x1c>
    1bd6:	fa f4       	brpl	.+62     	; 0x1c16 <__floatsisf+0x6c>
    1bd8:	bb 0f       	add	r27, r27
    1bda:	11 f4       	brne	.+4      	; 0x1be0 <__floatsisf+0x36>
    1bdc:	60 ff       	sbrs	r22, 0
    1bde:	1b c0       	rjmp	.+54     	; 0x1c16 <__floatsisf+0x6c>
    1be0:	6f 5f       	subi	r22, 0xFF	; 255
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	8f 4f       	sbci	r24, 0xFF	; 255
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	16 c0       	rjmp	.+44     	; 0x1c16 <__floatsisf+0x6c>
    1bea:	88 23       	and	r24, r24
    1bec:	11 f0       	breq	.+4      	; 0x1bf2 <__floatsisf+0x48>
    1bee:	96 e9       	ldi	r25, 0x96	; 150
    1bf0:	11 c0       	rjmp	.+34     	; 0x1c14 <__floatsisf+0x6a>
    1bf2:	77 23       	and	r23, r23
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <__floatsisf+0x54>
    1bf6:	9e e8       	ldi	r25, 0x8E	; 142
    1bf8:	87 2f       	mov	r24, r23
    1bfa:	76 2f       	mov	r23, r22
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <__floatsisf+0x5e>
    1bfe:	66 23       	and	r22, r22
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <__floatsisf+0x74>
    1c02:	96 e8       	ldi	r25, 0x86	; 134
    1c04:	86 2f       	mov	r24, r22
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	2a f0       	brmi	.+10     	; 0x1c16 <__floatsisf+0x6c>
    1c0c:	9a 95       	dec	r25
    1c0e:	66 0f       	add	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	88 1f       	adc	r24, r24
    1c14:	da f7       	brpl	.-10     	; 0x1c0c <__floatsisf+0x62>
    1c16:	88 0f       	add	r24, r24
    1c18:	96 95       	lsr	r25
    1c1a:	87 95       	ror	r24
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	08 95       	ret

00001c20 <__fp_cmp>:
    1c20:	99 0f       	add	r25, r25
    1c22:	00 08       	sbc	r0, r0
    1c24:	55 0f       	add	r21, r21
    1c26:	aa 0b       	sbc	r26, r26
    1c28:	e0 e8       	ldi	r30, 0x80	; 128
    1c2a:	fe ef       	ldi	r31, 0xFE	; 254
    1c2c:	16 16       	cp	r1, r22
    1c2e:	17 06       	cpc	r1, r23
    1c30:	e8 07       	cpc	r30, r24
    1c32:	f9 07       	cpc	r31, r25
    1c34:	c0 f0       	brcs	.+48     	; 0x1c66 <__fp_cmp+0x46>
    1c36:	12 16       	cp	r1, r18
    1c38:	13 06       	cpc	r1, r19
    1c3a:	e4 07       	cpc	r30, r20
    1c3c:	f5 07       	cpc	r31, r21
    1c3e:	98 f0       	brcs	.+38     	; 0x1c66 <__fp_cmp+0x46>
    1c40:	62 1b       	sub	r22, r18
    1c42:	73 0b       	sbc	r23, r19
    1c44:	84 0b       	sbc	r24, r20
    1c46:	95 0b       	sbc	r25, r21
    1c48:	39 f4       	brne	.+14     	; 0x1c58 <__fp_cmp+0x38>
    1c4a:	0a 26       	eor	r0, r26
    1c4c:	61 f0       	breq	.+24     	; 0x1c66 <__fp_cmp+0x46>
    1c4e:	23 2b       	or	r18, r19
    1c50:	24 2b       	or	r18, r20
    1c52:	25 2b       	or	r18, r21
    1c54:	21 f4       	brne	.+8      	; 0x1c5e <__fp_cmp+0x3e>
    1c56:	08 95       	ret
    1c58:	0a 26       	eor	r0, r26
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <__fp_cmp+0x3e>
    1c5c:	a1 40       	sbci	r26, 0x01	; 1
    1c5e:	a6 95       	lsr	r26
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	81 1d       	adc	r24, r1
    1c64:	81 1d       	adc	r24, r1
    1c66:	08 95       	ret

00001c68 <__fp_inf>:
    1c68:	97 f9       	bld	r25, 7
    1c6a:	9f 67       	ori	r25, 0x7F	; 127
    1c6c:	80 e8       	ldi	r24, 0x80	; 128
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	08 95       	ret

00001c74 <__fp_nan>:
    1c74:	9f ef       	ldi	r25, 0xFF	; 255
    1c76:	80 ec       	ldi	r24, 0xC0	; 192
    1c78:	08 95       	ret

00001c7a <__fp_pscA>:
    1c7a:	00 24       	eor	r0, r0
    1c7c:	0a 94       	dec	r0
    1c7e:	16 16       	cp	r1, r22
    1c80:	17 06       	cpc	r1, r23
    1c82:	18 06       	cpc	r1, r24
    1c84:	09 06       	cpc	r0, r25
    1c86:	08 95       	ret

00001c88 <__fp_pscB>:
    1c88:	00 24       	eor	r0, r0
    1c8a:	0a 94       	dec	r0
    1c8c:	12 16       	cp	r1, r18
    1c8e:	13 06       	cpc	r1, r19
    1c90:	14 06       	cpc	r1, r20
    1c92:	05 06       	cpc	r0, r21
    1c94:	08 95       	ret

00001c96 <__fp_round>:
    1c96:	09 2e       	mov	r0, r25
    1c98:	03 94       	inc	r0
    1c9a:	00 0c       	add	r0, r0
    1c9c:	11 f4       	brne	.+4      	; 0x1ca2 <__fp_round+0xc>
    1c9e:	88 23       	and	r24, r24
    1ca0:	52 f0       	brmi	.+20     	; 0x1cb6 <__fp_round+0x20>
    1ca2:	bb 0f       	add	r27, r27
    1ca4:	40 f4       	brcc	.+16     	; 0x1cb6 <__fp_round+0x20>
    1ca6:	bf 2b       	or	r27, r31
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <__fp_round+0x18>
    1caa:	60 ff       	sbrs	r22, 0
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <__fp_round+0x20>
    1cae:	6f 5f       	subi	r22, 0xFF	; 255
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	08 95       	ret

00001cb8 <__fp_split3>:
    1cb8:	57 fd       	sbrc	r21, 7
    1cba:	90 58       	subi	r25, 0x80	; 128
    1cbc:	44 0f       	add	r20, r20
    1cbe:	55 1f       	adc	r21, r21
    1cc0:	59 f0       	breq	.+22     	; 0x1cd8 <__fp_splitA+0x10>
    1cc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc4:	71 f0       	breq	.+28     	; 0x1ce2 <__fp_splitA+0x1a>
    1cc6:	47 95       	ror	r20

00001cc8 <__fp_splitA>:
    1cc8:	88 0f       	add	r24, r24
    1cca:	97 fb       	bst	r25, 7
    1ccc:	99 1f       	adc	r25, r25
    1cce:	61 f0       	breq	.+24     	; 0x1ce8 <__fp_splitA+0x20>
    1cd0:	9f 3f       	cpi	r25, 0xFF	; 255
    1cd2:	79 f0       	breq	.+30     	; 0x1cf2 <__fp_splitA+0x2a>
    1cd4:	87 95       	ror	r24
    1cd6:	08 95       	ret
    1cd8:	12 16       	cp	r1, r18
    1cda:	13 06       	cpc	r1, r19
    1cdc:	14 06       	cpc	r1, r20
    1cde:	55 1f       	adc	r21, r21
    1ce0:	f2 cf       	rjmp	.-28     	; 0x1cc6 <__fp_split3+0xe>
    1ce2:	46 95       	lsr	r20
    1ce4:	f1 df       	rcall	.-30     	; 0x1cc8 <__fp_splitA>
    1ce6:	08 c0       	rjmp	.+16     	; 0x1cf8 <__fp_splitA+0x30>
    1ce8:	16 16       	cp	r1, r22
    1cea:	17 06       	cpc	r1, r23
    1cec:	18 06       	cpc	r1, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	f1 cf       	rjmp	.-30     	; 0x1cd4 <__fp_splitA+0xc>
    1cf2:	86 95       	lsr	r24
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	61 05       	cpc	r22, r1
    1cf8:	08 94       	sec
    1cfa:	08 95       	ret

00001cfc <__fp_zero>:
    1cfc:	e8 94       	clt

00001cfe <__fp_szero>:
    1cfe:	bb 27       	eor	r27, r27
    1d00:	66 27       	eor	r22, r22
    1d02:	77 27       	eor	r23, r23
    1d04:	cb 01       	movw	r24, r22
    1d06:	97 f9       	bld	r25, 7
    1d08:	08 95       	ret

00001d0a <__gesf2>:
    1d0a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_cmp>
    1d0e:	08 f4       	brcc	.+2      	; 0x1d12 <__gesf2+0x8>
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	08 95       	ret

00001d14 <__mulsf3>:
    1d14:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__mulsf3x>
    1d18:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__fp_round>
    1d1c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__fp_pscA>
    1d20:	38 f0       	brcs	.+14     	; 0x1d30 <__mulsf3+0x1c>
    1d22:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_pscB>
    1d26:	20 f0       	brcs	.+8      	; 0x1d30 <__mulsf3+0x1c>
    1d28:	95 23       	and	r25, r21
    1d2a:	11 f0       	breq	.+4      	; 0x1d30 <__mulsf3+0x1c>
    1d2c:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__fp_inf>
    1d30:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_nan>
    1d34:	11 24       	eor	r1, r1
    1d36:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_szero>

00001d3a <__mulsf3x>:
    1d3a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_split3>
    1d3e:	70 f3       	brcs	.-36     	; 0x1d1c <__mulsf3+0x8>

00001d40 <__mulsf3_pse>:
    1d40:	95 9f       	mul	r25, r21
    1d42:	c1 f3       	breq	.-16     	; 0x1d34 <__mulsf3+0x20>
    1d44:	95 0f       	add	r25, r21
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	55 1f       	adc	r21, r21
    1d4a:	62 9f       	mul	r22, r18
    1d4c:	f0 01       	movw	r30, r0
    1d4e:	72 9f       	mul	r23, r18
    1d50:	bb 27       	eor	r27, r27
    1d52:	f0 0d       	add	r31, r0
    1d54:	b1 1d       	adc	r27, r1
    1d56:	63 9f       	mul	r22, r19
    1d58:	aa 27       	eor	r26, r26
    1d5a:	f0 0d       	add	r31, r0
    1d5c:	b1 1d       	adc	r27, r1
    1d5e:	aa 1f       	adc	r26, r26
    1d60:	64 9f       	mul	r22, r20
    1d62:	66 27       	eor	r22, r22
    1d64:	b0 0d       	add	r27, r0
    1d66:	a1 1d       	adc	r26, r1
    1d68:	66 1f       	adc	r22, r22
    1d6a:	82 9f       	mul	r24, r18
    1d6c:	22 27       	eor	r18, r18
    1d6e:	b0 0d       	add	r27, r0
    1d70:	a1 1d       	adc	r26, r1
    1d72:	62 1f       	adc	r22, r18
    1d74:	73 9f       	mul	r23, r19
    1d76:	b0 0d       	add	r27, r0
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	62 1f       	adc	r22, r18
    1d7c:	83 9f       	mul	r24, r19
    1d7e:	a0 0d       	add	r26, r0
    1d80:	61 1d       	adc	r22, r1
    1d82:	22 1f       	adc	r18, r18
    1d84:	74 9f       	mul	r23, r20
    1d86:	33 27       	eor	r19, r19
    1d88:	a0 0d       	add	r26, r0
    1d8a:	61 1d       	adc	r22, r1
    1d8c:	23 1f       	adc	r18, r19
    1d8e:	84 9f       	mul	r24, r20
    1d90:	60 0d       	add	r22, r0
    1d92:	21 1d       	adc	r18, r1
    1d94:	82 2f       	mov	r24, r18
    1d96:	76 2f       	mov	r23, r22
    1d98:	6a 2f       	mov	r22, r26
    1d9a:	11 24       	eor	r1, r1
    1d9c:	9f 57       	subi	r25, 0x7F	; 127
    1d9e:	50 40       	sbci	r21, 0x00	; 0
    1da0:	9a f0       	brmi	.+38     	; 0x1dc8 <__mulsf3_pse+0x88>
    1da2:	f1 f0       	breq	.+60     	; 0x1de0 <__mulsf3_pse+0xa0>
    1da4:	88 23       	and	r24, r24
    1da6:	4a f0       	brmi	.+18     	; 0x1dba <__mulsf3_pse+0x7a>
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	bb 1f       	adc	r27, r27
    1dae:	66 1f       	adc	r22, r22
    1db0:	77 1f       	adc	r23, r23
    1db2:	88 1f       	adc	r24, r24
    1db4:	91 50       	subi	r25, 0x01	; 1
    1db6:	50 40       	sbci	r21, 0x00	; 0
    1db8:	a9 f7       	brne	.-22     	; 0x1da4 <__mulsf3_pse+0x64>
    1dba:	9e 3f       	cpi	r25, 0xFE	; 254
    1dbc:	51 05       	cpc	r21, r1
    1dbe:	80 f0       	brcs	.+32     	; 0x1de0 <__mulsf3_pse+0xa0>
    1dc0:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__fp_inf>
    1dc4:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_szero>
    1dc8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dca:	e4 f3       	brlt	.-8      	; 0x1dc4 <__mulsf3_pse+0x84>
    1dcc:	98 3e       	cpi	r25, 0xE8	; 232
    1dce:	d4 f3       	brlt	.-12     	; 0x1dc4 <__mulsf3_pse+0x84>
    1dd0:	86 95       	lsr	r24
    1dd2:	77 95       	ror	r23
    1dd4:	67 95       	ror	r22
    1dd6:	b7 95       	ror	r27
    1dd8:	f7 95       	ror	r31
    1dda:	e7 95       	ror	r30
    1ddc:	9f 5f       	subi	r25, 0xFF	; 255
    1dde:	c1 f7       	brne	.-16     	; 0x1dd0 <__mulsf3_pse+0x90>
    1de0:	fe 2b       	or	r31, r30
    1de2:	88 0f       	add	r24, r24
    1de4:	91 1d       	adc	r25, r1
    1de6:	96 95       	lsr	r25
    1de8:	87 95       	ror	r24
    1dea:	97 f9       	bld	r25, 7
    1dec:	08 95       	ret

00001dee <malloc>:
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	91 05       	cpc	r25, r1
    1df6:	10 f4       	brcc	.+4      	; 0x1dfc <malloc+0xe>
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	e0 91 30 03 	lds	r30, 0x0330
    1e00:	f0 91 31 03 	lds	r31, 0x0331
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	c0 e0       	ldi	r28, 0x00	; 0
    1e0a:	d0 e0       	ldi	r29, 0x00	; 0
    1e0c:	30 97       	sbiw	r30, 0x00	; 0
    1e0e:	11 f1       	breq	.+68     	; 0x1e54 <malloc+0x66>
    1e10:	40 81       	ld	r20, Z
    1e12:	51 81       	ldd	r21, Z+1	; 0x01
    1e14:	48 17       	cp	r20, r24
    1e16:	59 07       	cpc	r21, r25
    1e18:	c0 f0       	brcs	.+48     	; 0x1e4a <malloc+0x5c>
    1e1a:	48 17       	cp	r20, r24
    1e1c:	59 07       	cpc	r21, r25
    1e1e:	61 f4       	brne	.+24     	; 0x1e38 <malloc+0x4a>
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 97       	sbiw	r28, 0x00	; 0
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <malloc+0x40>
    1e28:	9b 83       	std	Y+3, r25	; 0x03
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	2b c0       	rjmp	.+86     	; 0x1e84 <malloc+0x96>
    1e2e:	90 93 31 03 	sts	0x0331, r25
    1e32:	80 93 30 03 	sts	0x0330, r24
    1e36:	26 c0       	rjmp	.+76     	; 0x1e84 <malloc+0x96>
    1e38:	21 15       	cp	r18, r1
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	19 f0       	breq	.+6      	; 0x1e44 <malloc+0x56>
    1e3e:	42 17       	cp	r20, r18
    1e40:	53 07       	cpc	r21, r19
    1e42:	18 f4       	brcc	.+6      	; 0x1e4a <malloc+0x5c>
    1e44:	9a 01       	movw	r18, r20
    1e46:	be 01       	movw	r22, r28
    1e48:	df 01       	movw	r26, r30
    1e4a:	ef 01       	movw	r28, r30
    1e4c:	02 80       	ldd	r0, Z+2	; 0x02
    1e4e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e50:	e0 2d       	mov	r30, r0
    1e52:	dc cf       	rjmp	.-72     	; 0x1e0c <malloc+0x1e>
    1e54:	21 15       	cp	r18, r1
    1e56:	31 05       	cpc	r19, r1
    1e58:	09 f1       	breq	.+66     	; 0x1e9c <malloc+0xae>
    1e5a:	28 1b       	sub	r18, r24
    1e5c:	39 0b       	sbc	r19, r25
    1e5e:	24 30       	cpi	r18, 0x04	; 4
    1e60:	31 05       	cpc	r19, r1
    1e62:	90 f4       	brcc	.+36     	; 0x1e88 <malloc+0x9a>
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	8d 91       	ld	r24, X+
    1e68:	9c 91       	ld	r25, X
    1e6a:	13 97       	sbiw	r26, 0x03	; 3
    1e6c:	61 15       	cp	r22, r1
    1e6e:	71 05       	cpc	r23, r1
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <malloc+0x8c>
    1e72:	fb 01       	movw	r30, r22
    1e74:	93 83       	std	Z+3, r25	; 0x03
    1e76:	82 83       	std	Z+2, r24	; 0x02
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <malloc+0x94>
    1e7a:	90 93 31 03 	sts	0x0331, r25
    1e7e:	80 93 30 03 	sts	0x0330, r24
    1e82:	fd 01       	movw	r30, r26
    1e84:	32 96       	adiw	r30, 0x02	; 2
    1e86:	44 c0       	rjmp	.+136    	; 0x1f10 <malloc+0x122>
    1e88:	fd 01       	movw	r30, r26
    1e8a:	e2 0f       	add	r30, r18
    1e8c:	f3 1f       	adc	r31, r19
    1e8e:	81 93       	st	Z+, r24
    1e90:	91 93       	st	Z+, r25
    1e92:	22 50       	subi	r18, 0x02	; 2
    1e94:	31 09       	sbc	r19, r1
    1e96:	2d 93       	st	X+, r18
    1e98:	3c 93       	st	X, r19
    1e9a:	3a c0       	rjmp	.+116    	; 0x1f10 <malloc+0x122>
    1e9c:	20 91 2e 03 	lds	r18, 0x032E
    1ea0:	30 91 2f 03 	lds	r19, 0x032F
    1ea4:	23 2b       	or	r18, r19
    1ea6:	41 f4       	brne	.+16     	; 0x1eb8 <malloc+0xca>
    1ea8:	20 91 02 01 	lds	r18, 0x0102
    1eac:	30 91 03 01 	lds	r19, 0x0103
    1eb0:	30 93 2f 03 	sts	0x032F, r19
    1eb4:	20 93 2e 03 	sts	0x032E, r18
    1eb8:	20 91 00 01 	lds	r18, 0x0100
    1ebc:	30 91 01 01 	lds	r19, 0x0101
    1ec0:	21 15       	cp	r18, r1
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	41 f4       	brne	.+16     	; 0x1ed6 <malloc+0xe8>
    1ec6:	2d b7       	in	r18, 0x3d	; 61
    1ec8:	3e b7       	in	r19, 0x3e	; 62
    1eca:	40 91 04 01 	lds	r20, 0x0104
    1ece:	50 91 05 01 	lds	r21, 0x0105
    1ed2:	24 1b       	sub	r18, r20
    1ed4:	35 0b       	sbc	r19, r21
    1ed6:	e0 91 2e 03 	lds	r30, 0x032E
    1eda:	f0 91 2f 03 	lds	r31, 0x032F
    1ede:	e2 17       	cp	r30, r18
    1ee0:	f3 07       	cpc	r31, r19
    1ee2:	a0 f4       	brcc	.+40     	; 0x1f0c <malloc+0x11e>
    1ee4:	2e 1b       	sub	r18, r30
    1ee6:	3f 0b       	sbc	r19, r31
    1ee8:	28 17       	cp	r18, r24
    1eea:	39 07       	cpc	r19, r25
    1eec:	78 f0       	brcs	.+30     	; 0x1f0c <malloc+0x11e>
    1eee:	ac 01       	movw	r20, r24
    1ef0:	4e 5f       	subi	r20, 0xFE	; 254
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef4:	24 17       	cp	r18, r20
    1ef6:	35 07       	cpc	r19, r21
    1ef8:	48 f0       	brcs	.+18     	; 0x1f0c <malloc+0x11e>
    1efa:	4e 0f       	add	r20, r30
    1efc:	5f 1f       	adc	r21, r31
    1efe:	50 93 2f 03 	sts	0x032F, r21
    1f02:	40 93 2e 03 	sts	0x032E, r20
    1f06:	81 93       	st	Z+, r24
    1f08:	91 93       	st	Z+, r25
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <malloc+0x122>
    1f0c:	e0 e0       	ldi	r30, 0x00	; 0
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	cf 01       	movw	r24, r30
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	08 95       	ret

00001f18 <free>:
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <free+0xe>
    1f24:	8c c0       	rjmp	.+280    	; 0x203e <free+0x126>
    1f26:	fc 01       	movw	r30, r24
    1f28:	32 97       	sbiw	r30, 0x02	; 2
    1f2a:	13 82       	std	Z+3, r1	; 0x03
    1f2c:	12 82       	std	Z+2, r1	; 0x02
    1f2e:	00 91 30 03 	lds	r16, 0x0330
    1f32:	10 91 31 03 	lds	r17, 0x0331
    1f36:	01 15       	cp	r16, r1
    1f38:	11 05       	cpc	r17, r1
    1f3a:	81 f4       	brne	.+32     	; 0x1f5c <free+0x44>
    1f3c:	20 81       	ld	r18, Z
    1f3e:	31 81       	ldd	r19, Z+1	; 0x01
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	20 91 2e 03 	lds	r18, 0x032E
    1f48:	30 91 2f 03 	lds	r19, 0x032F
    1f4c:	28 17       	cp	r18, r24
    1f4e:	39 07       	cpc	r19, r25
    1f50:	79 f5       	brne	.+94     	; 0x1fb0 <free+0x98>
    1f52:	f0 93 2f 03 	sts	0x032F, r31
    1f56:	e0 93 2e 03 	sts	0x032E, r30
    1f5a:	71 c0       	rjmp	.+226    	; 0x203e <free+0x126>
    1f5c:	d8 01       	movw	r26, r16
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	ae 17       	cp	r26, r30
    1f64:	bf 07       	cpc	r27, r31
    1f66:	50 f4       	brcc	.+20     	; 0x1f7c <free+0x64>
    1f68:	12 96       	adiw	r26, 0x02	; 2
    1f6a:	2d 91       	ld	r18, X+
    1f6c:	3c 91       	ld	r19, X
    1f6e:	13 97       	sbiw	r26, 0x03	; 3
    1f70:	ad 01       	movw	r20, r26
    1f72:	21 15       	cp	r18, r1
    1f74:	31 05       	cpc	r19, r1
    1f76:	09 f1       	breq	.+66     	; 0x1fba <free+0xa2>
    1f78:	d9 01       	movw	r26, r18
    1f7a:	f3 cf       	rjmp	.-26     	; 0x1f62 <free+0x4a>
    1f7c:	9d 01       	movw	r18, r26
    1f7e:	da 01       	movw	r26, r20
    1f80:	33 83       	std	Z+3, r19	; 0x03
    1f82:	22 83       	std	Z+2, r18	; 0x02
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	86 0f       	add	r24, r22
    1f8a:	97 1f       	adc	r25, r23
    1f8c:	82 17       	cp	r24, r18
    1f8e:	93 07       	cpc	r25, r19
    1f90:	69 f4       	brne	.+26     	; 0x1fac <free+0x94>
    1f92:	ec 01       	movw	r28, r24
    1f94:	28 81       	ld	r18, Y
    1f96:	39 81       	ldd	r19, Y+1	; 0x01
    1f98:	26 0f       	add	r18, r22
    1f9a:	37 1f       	adc	r19, r23
    1f9c:	2e 5f       	subi	r18, 0xFE	; 254
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	31 83       	std	Z+1, r19	; 0x01
    1fa2:	20 83       	st	Z, r18
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa8:	93 83       	std	Z+3, r25	; 0x03
    1faa:	82 83       	std	Z+2, r24	; 0x02
    1fac:	45 2b       	or	r20, r21
    1fae:	29 f4       	brne	.+10     	; 0x1fba <free+0xa2>
    1fb0:	f0 93 31 03 	sts	0x0331, r31
    1fb4:	e0 93 30 03 	sts	0x0330, r30
    1fb8:	42 c0       	rjmp	.+132    	; 0x203e <free+0x126>
    1fba:	13 96       	adiw	r26, 0x03	; 3
    1fbc:	fc 93       	st	X, r31
    1fbe:	ee 93       	st	-X, r30
    1fc0:	12 97       	sbiw	r26, 0x02	; 2
    1fc2:	ed 01       	movw	r28, r26
    1fc4:	49 91       	ld	r20, Y+
    1fc6:	59 91       	ld	r21, Y+
    1fc8:	9e 01       	movw	r18, r28
    1fca:	24 0f       	add	r18, r20
    1fcc:	35 1f       	adc	r19, r21
    1fce:	e2 17       	cp	r30, r18
    1fd0:	f3 07       	cpc	r31, r19
    1fd2:	71 f4       	brne	.+28     	; 0x1ff0 <free+0xd8>
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	84 0f       	add	r24, r20
    1fda:	95 1f       	adc	r25, r21
    1fdc:	02 96       	adiw	r24, 0x02	; 2
    1fde:	11 96       	adiw	r26, 0x01	; 1
    1fe0:	9c 93       	st	X, r25
    1fe2:	8e 93       	st	-X, r24
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	13 96       	adiw	r26, 0x03	; 3
    1fea:	9c 93       	st	X, r25
    1fec:	8e 93       	st	-X, r24
    1fee:	12 97       	sbiw	r26, 0x02	; 2
    1ff0:	e0 e0       	ldi	r30, 0x00	; 0
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	d8 01       	movw	r26, r16
    1ff6:	12 96       	adiw	r26, 0x02	; 2
    1ff8:	8d 91       	ld	r24, X+
    1ffa:	9c 91       	ld	r25, X
    1ffc:	13 97       	sbiw	r26, 0x03	; 3
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	19 f0       	breq	.+6      	; 0x2008 <free+0xf0>
    2002:	f8 01       	movw	r30, r16
    2004:	8c 01       	movw	r16, r24
    2006:	f6 cf       	rjmp	.-20     	; 0x1ff4 <free+0xdc>
    2008:	8d 91       	ld	r24, X+
    200a:	9c 91       	ld	r25, X
    200c:	98 01       	movw	r18, r16
    200e:	2e 5f       	subi	r18, 0xFE	; 254
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	20 91 2e 03 	lds	r18, 0x032E
    201a:	30 91 2f 03 	lds	r19, 0x032F
    201e:	28 17       	cp	r18, r24
    2020:	39 07       	cpc	r19, r25
    2022:	69 f4       	brne	.+26     	; 0x203e <free+0x126>
    2024:	30 97       	sbiw	r30, 0x00	; 0
    2026:	29 f4       	brne	.+10     	; 0x2032 <free+0x11a>
    2028:	10 92 31 03 	sts	0x0331, r1
    202c:	10 92 30 03 	sts	0x0330, r1
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <free+0x11e>
    2032:	13 82       	std	Z+3, r1	; 0x03
    2034:	12 82       	std	Z+2, r1	; 0x02
    2036:	10 93 2f 03 	sts	0x032F, r17
    203a:	00 93 2e 03 	sts	0x032E, r16
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <_exit>:
    2048:	f8 94       	cli

0000204a <__stop_program>:
    204a:	ff cf       	rjmp	.-2      	; 0x204a <__stop_program>
