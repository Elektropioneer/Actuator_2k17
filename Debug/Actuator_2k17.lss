
Actuator_2k17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001e9e  00001f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  00800106  00800106  00001f38  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  00001f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001484  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005ffc  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006010  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a6 e0       	ldi	r26, 0x06	; 6
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a2 33       	cpi	r26, 0x32	; 50
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee e9       	ldi	r30, 0x9E	; 158
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a6 30       	cpi	r26, 0x06	; 6
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
      ca:	0e 94 7d 08 	call	0x10fa	; 0x10fa <main>
      ce:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ball_grabbers>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the ball grabbers servos
 *	Help: 			to adjust parameters go to control.h
 */
static void ball_grabbers(unsigned char side, unsigned char state)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <ball_grabbers+0x6>
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	89 83       	std	Y+1, r24	; 0x01
      e2:	6a 83       	std	Y+2, r22	; 0x02
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	09 f5       	brne	.+66     	; 0x12c <ball_grabbers+0x56>
	{
		if(state == UP)
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	49 f4       	brne	.+18     	; 0x102 <ball_grabbers+0x2c>
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_LEFT);
      f0:	2a e0       	ldi	r18, 0x0A	; 10
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	60 ef       	ldi	r22, 0xF0	; 240
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	88 e0       	ldi	r24, 0x08	; 8
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     100:	35 c0       	rjmp	.+106    	; 0x16c <ball_grabbers+0x96>
		}
		else if(state == DOWN)
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	88 23       	and	r24, r24
     106:	49 f4       	brne	.+18     	; 0x11a <ball_grabbers+0x44>
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_LEFT);
     108:	2a e0       	ldi	r18, 0x0A	; 10
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	60 ef       	ldi	r22, 0xF0	; 240
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	84 e9       	ldi	r24, 0x94	; 148
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     118:	29 c0       	rjmp	.+82     	; 0x16c <ball_grabbers+0x96>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_MID, AX_SPEED_FAST, CW, ID_BALLGRABBER_LEFT);
     11a:	2a e0       	ldi	r18, 0x0A	; 10
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	60 ef       	ldi	r22, 0xF0	; 240
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	8b ee       	ldi	r24, 0xEB	; 235
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     12a:	20 c0       	rjmp	.+64     	; 0x16c <ball_grabbers+0x96>
		}
	}
	else
	{
		if(state == UP)
     12c:	8a 81       	ldd	r24, Y+2	; 0x02
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	49 f4       	brne	.+18     	; 0x144 <ball_grabbers+0x6e>
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_RIGHT);
     132:	23 e0       	ldi	r18, 0x03	; 3
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	60 ef       	ldi	r22, 0xF0	; 240
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	80 e9       	ldi	r24, 0x90	; 144
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     142:	14 c0       	rjmp	.+40     	; 0x16c <ball_grabbers+0x96>
		}
		else if(state == DOWN)
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	88 23       	and	r24, r24
     148:	49 f4       	brne	.+18     	; 0x15c <ball_grabbers+0x86>
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_RIGHT);
     14a:	23 e0       	ldi	r18, 0x03	; 3
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	60 ef       	ldi	r22, 0xF0	; 240
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	80 ef       	ldi	r24, 0xF0	; 240
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     15a:	08 c0       	rjmp	.+16     	; 0x16c <ball_grabbers+0x96>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_MID, AX_SPEED_FAST, CW, ID_BALLGRABBER_RIGHT);
     15c:	23 e0       	ldi	r18, 0x03	; 3
     15e:	40 e0       	ldi	r20, 0x00	; 0
     160:	60 ef       	ldi	r22, 0xF0	; 240
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	80 ea       	ldi	r24, 0xA0	; 160
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
		}
	}
}
     16c:	0f 90       	pop	r0
     16e:	0f 90       	pop	r0
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <dispenser>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the dispensers position
 *	Help: 			to adjust parameters go to control.h
 */
static void dispenser(unsigned char side, unsigned char state)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <dispenser+0x6>
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	6a 83       	std	Y+2, r22	; 0x02
	// ! configure the ax servo id's in control.h file !
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	09 f5       	brne	.+66     	; 0x1cc <dispenser+0x56>
	{
		if(state == UP)
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	49 f4       	brne	.+18     	; 0x1a2 <dispenser+0x2c>
		{
			AX_SetAngle(POS_DISPENSERLEFT_UP, AX_SPEED_FAST, CW, ID_DISPENSER_LEFT);
     190:	22 e0       	ldi	r18, 0x02	; 2
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	60 ef       	ldi	r22, 0xF0	; 240
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	84 ef       	ldi	r24, 0xF4	; 244
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     1a0:	35 c0       	rjmp	.+106    	; 0x20c <dispenser+0x96>
		}
		else if(state == MID)
     1a2:	8a 81       	ldd	r24, Y+2	; 0x02
     1a4:	84 30       	cpi	r24, 0x04	; 4
     1a6:	49 f4       	brne	.+18     	; 0x1ba <dispenser+0x44>
		{
			AX_SetAngle(POS_DISPENSERLEFT_MID, AX_SPEED_FAST, CW, ID_DISPENSER_LEFT);
     1a8:	22 e0       	ldi	r18, 0x02	; 2
     1aa:	40 e0       	ldi	r20, 0x00	; 0
     1ac:	60 ef       	ldi	r22, 0xF0	; 240
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	88 ea       	ldi	r24, 0xA8	; 168
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     1b8:	29 c0       	rjmp	.+82     	; 0x20c <dispenser+0x96>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERLEFT_DOWN, AX_SPEED_GRANNY, CCW, ID_DISPENSER_LEFT);
     1ba:	22 e0       	ldi	r18, 0x02	; 2
     1bc:	41 e0       	ldi	r20, 0x01	; 1
     1be:	62 e3       	ldi	r22, 0x32	; 50
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	8e e9       	ldi	r24, 0x9E	; 158
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     1ca:	20 c0       	rjmp	.+64     	; 0x20c <dispenser+0x96>
		}
	}
	else
	{
		if(state == UP)
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	49 f4       	brne	.+18     	; 0x1e4 <dispenser+0x6e>
		{
			AX_SetAngle(POS_DISPENSERRIGHT_UP, AX_SPEED_FAST, CW, ID_DISPENSER_RIGHT);
     1d2:	24 e0       	ldi	r18, 0x04	; 4
     1d4:	40 e0       	ldi	r20, 0x00	; 0
     1d6:	60 ef       	ldi	r22, 0xF0	; 240
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	86 e3       	ldi	r24, 0x36	; 54
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     1e2:	14 c0       	rjmp	.+40     	; 0x20c <dispenser+0x96>
		}
		else if(state == MID)
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	84 30       	cpi	r24, 0x04	; 4
     1e8:	49 f4       	brne	.+18     	; 0x1fc <dispenser+0x86>
		{
			AX_SetAngle(POS_DISPENSERRIGHT_MID, AX_SPEED_FAST, CW, ID_DISPENSER_RIGHT);
     1ea:	24 e0       	ldi	r18, 0x04	; 4
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	60 ef       	ldi	r22, 0xF0	; 240
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	82 e8       	ldi	r24, 0x82	; 130
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
     1fa:	08 c0       	rjmp	.+16     	; 0x20c <dispenser+0x96>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERRIGHT_DOWN, AX_SPEED_GRANNY, CW, ID_DISPENSER_RIGHT);
     1fc:	24 e0       	ldi	r18, 0x04	; 4
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	62 e3       	ldi	r22, 0x32	; 50
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	8e e8       	ldi	r24, 0x8E	; 142
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <AX_SetAngle>
		}
	}
}
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <mosfet>:
 *	Parameters: unsigned char side 	- which side diafram to control
 *				unsigned char state	- ON or OFF state
 *	Description: controls the mosfets that turn 12V on or off
 */
static void mosfet(unsigned char side, unsigned char state)
{
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	00 d0       	rcall	.+0      	; 0x21c <mosfet+0x6>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	6a 83       	std	Y+2, r22	; 0x02
	if(side == LEFT)
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	69 f4       	brne	.+26     	; 0x244 <mosfet+0x2e>
	{
		if(state == ON)
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	29 f4       	brne	.+10     	; 0x23a <mosfet+0x24>
		{
			GPIO_OutputSet(pinE4);
     230:	80 91 2b 03 	lds	r24, 0x032B
     234:	0e 94 db 09 	call	0x13b6	; 0x13b6 <GPIO_OutputSet>
     238:	11 c0       	rjmp	.+34     	; 0x25c <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE4);
     23a:	80 91 2b 03 	lds	r24, 0x032B
     23e:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_OutputReset>
     242:	0c c0       	rjmp	.+24     	; 0x25c <mosfet+0x46>
		}
	}
	else
	{
		if(state == ON)
     244:	8a 81       	ldd	r24, Y+2	; 0x02
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	29 f4       	brne	.+10     	; 0x254 <mosfet+0x3e>
		{
			GPIO_OutputSet(pinE5);
     24a:	80 91 2d 03 	lds	r24, 0x032D
     24e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <GPIO_OutputSet>
     252:	04 c0       	rjmp	.+8      	; 0x25c <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE5);
     254:	80 91 2d 03 	lds	r24, 0x032D
     258:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_OutputReset>
		}
	}
}
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <motor>:

static void motor(unsigned char direction, int8_t pwm)
{
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	00 d0       	rcall	.+0      	; 0x26c <motor+0x6>
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	6a 83       	std	Y+2, r22	; 0x02
	}
	else
	{

	}
}
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <action>:
 *	Function: 		void action(canMsg msg)
 *	Parameters: 	canMsg msg
 *	Description: 	decides actions on can msg received
 */
void action(canMsg msg)
{
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	2e 97       	sbiw	r28, 0x0e	; 14
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	0d 83       	std	Y+5, r16	; 0x05
     298:	1e 83       	std	Y+6, r17	; 0x06
     29a:	2f 83       	std	Y+7, r18	; 0x07
     29c:	38 87       	std	Y+8, r19	; 0x08
     29e:	49 87       	std	Y+9, r20	; 0x09
     2a0:	5a 87       	std	Y+10, r21	; 0x0a
     2a2:	6b 87       	std	Y+11, r22	; 0x0b
     2a4:	7c 87       	std	Y+12, r23	; 0x0c
     2a6:	8d 87       	std	Y+13, r24	; 0x0d
     2a8:	9e 87       	std	Y+14, r25	; 0x0e
	unsigned char command = msg.data[0];
     2aa:	8d 81       	ldd	r24, Y+5	; 0x05
     2ac:	89 83       	std	Y+1, r24	; 0x01
	unsigned char side, state;
	uint8_t pwm;

	switch(command)
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	88 2f       	mov	r24, r24
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	82 34       	cpi	r24, 0x42	; 66
     2b6:	91 05       	cpc	r25, r1
     2b8:	b9 f0       	breq	.+46     	; 0x2e8 <action+0x6a>
     2ba:	83 34       	cpi	r24, 0x43	; 67
     2bc:	91 05       	cpc	r25, r1
     2be:	24 f4       	brge	.+8      	; 0x2c8 <action+0x4a>
     2c0:	81 34       	cpi	r24, 0x41	; 65
     2c2:	91 05       	cpc	r25, r1
     2c4:	41 f0       	breq	.+16     	; 0x2d6 <action+0x58>
     2c6:	2c c0       	rjmp	.+88     	; 0x320 <action+0xa2>
     2c8:	83 34       	cpi	r24, 0x43	; 67
     2ca:	91 05       	cpc	r25, r1
     2cc:	b1 f0       	breq	.+44     	; 0x2fa <action+0x7c>
     2ce:	84 34       	cpi	r24, 0x44	; 68
     2d0:	91 05       	cpc	r25, r1
     2d2:	e1 f0       	breq	.+56     	; 0x30c <action+0x8e>
     2d4:	25 c0       	rjmp	.+74     	; 0x320 <action+0xa2>
	{
		// "ball grabbers"
		case 'A':
			// side 	- LEFT or RIGHT or MID
			// state 	- UP or DOWN
			side 	= msg.data[1];
     2d6:	8e 81       	ldd	r24, Y+6	; 0x06
     2d8:	8a 83       	std	Y+2, r24	; 0x02
			state 	= msg.data[2];
     2da:	8f 81       	ldd	r24, Y+7	; 0x07
     2dc:	8b 83       	std	Y+3, r24	; 0x03
			ball_grabbers(side, state);
     2de:	6b 81       	ldd	r22, Y+3	; 0x03
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	0e 94 6b 00 	call	0xd6	; 0xd6 <ball_grabbers>
			break;
     2e6:	1c c0       	rjmp	.+56     	; 0x320 <action+0xa2>
		// "dispenser"
		case 'B':
			// side 	- LEFT or RIGHT or MID
			// state 	- UP or DOWN
			side 	= msg.data[1];
     2e8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ea:	8a 83       	std	Y+2, r24	; 0x02
			state 	= msg.data[2];
     2ec:	8f 81       	ldd	r24, Y+7	; 0x07
     2ee:	8b 83       	std	Y+3, r24	; 0x03
			dispenser(side, state);
     2f0:	6b 81       	ldd	r22, Y+3	; 0x03
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	0e 94 bb 00 	call	0x176	; 0x176 <dispenser>
			break;
     2f8:	13 c0       	rjmp	.+38     	; 0x320 <action+0xa2>
		// "diafram"
		case 'C':
			// side 	- FIRST or SECOND
			// state 	- ON or OFF
			side 	= msg.data[1];
     2fa:	8e 81       	ldd	r24, Y+6	; 0x06
     2fc:	8a 83       	std	Y+2, r24	; 0x02
			state 	= msg.data[2];
     2fe:	8f 81       	ldd	r24, Y+7	; 0x07
     300:	8b 83       	std	Y+3, r24	; 0x03
			mosfet(side, state);
     302:	6b 81       	ldd	r22, Y+3	; 0x03
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	0e 94 0b 01 	call	0x216	; 0x216 <mosfet>
			break;
     30a:	0a c0       	rjmp	.+20     	; 0x320 <action+0xa2>
		// "motor"
		case 'D':
			// state 	- CW or CCW
			// pwm		- 0-255
			state 	= msg.data[1];
     30c:	8e 81       	ldd	r24, Y+6	; 0x06
     30e:	8b 83       	std	Y+3, r24	; 0x03
			pwm		= msg.data[2];
     310:	8f 81       	ldd	r24, Y+7	; 0x07
     312:	8c 83       	std	Y+4, r24	; 0x04
			motor(state, pwm);
     314:	8c 81       	ldd	r24, Y+4	; 0x04
     316:	68 2f       	mov	r22, r24
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	0e 94 33 01 	call	0x266	; 0x266 <motor>

			break;
     31e:	00 00       	nop
	}
}
     320:	2e 96       	adiw	r28, 0x0e	; 14
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	08 95       	ret

00000336 <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     336:	1f 92       	push	r1
     338:	0f 92       	push	r0
     33a:	00 90 5f 00 	lds	r0, 0x005F
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	00 90 5b 00 	lds	r0, 0x005B
     346:	0f 92       	push	r0
     348:	2f 93       	push	r18
     34a:	3f 93       	push	r19
     34c:	4f 93       	push	r20
     34e:	5f 93       	push	r21
     350:	6f 93       	push	r22
     352:	7f 93       	push	r23
     354:	8f 93       	push	r24
     356:	9f 93       	push	r25
     358:	ef 93       	push	r30
     35a:	ff 93       	push	r31
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <__vector_18+0x2c>
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     368:	8d ee       	ldi	r24, 0xED	; 237
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     372:	19 82       	std	Y+1, r1	; 0x01
     374:	9f c0       	rjmp	.+318    	; 0x4b4 <__vector_18+0x17e>
	{
		CANPAGE = ch << 4;
     376:	8d ee       	ldi	r24, 0xED	; 237
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	29 81       	ldd	r18, Y+1	; 0x01
     37c:	22 95       	swap	r18
     37e:	20 7f       	andi	r18, 0xF0	; 240
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18

		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
     384:	8e ee       	ldi	r24, 0xEE	; 238
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	fc 01       	movw	r30, r24
     38a:	80 81       	ld	r24, Z
     38c:	82 95       	swap	r24
     38e:	86 95       	lsr	r24
     390:	87 70       	andi	r24, 0x07	; 7
     392:	88 2f       	mov	r24, r24
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	81 70       	andi	r24, 0x01	; 1
     398:	99 27       	eor	r25, r25
     39a:	89 2b       	or	r24, r25
     39c:	09 f4       	brne	.+2      	; 0x3a0 <__vector_18+0x6a>
     39e:	6b c0       	rjmp	.+214    	; 0x476 <__vector_18+0x140>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     3a0:	8f ee       	ldi	r24, 0xEF	; 239
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	20 e8       	ldi	r18, 0x80	; 128
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     3aa:	8e ee       	ldi	r24, 0xEE	; 238
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	2e ee       	ldi	r18, 0xEE	; 238
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	2f 7d       	andi	r18, 0xDF	; 223
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18

			for(unsigned char i = 0; i < 8; i++)
     3bc:	1a 82       	std	Y+2, r1	; 0x02
     3be:	1e c0       	rjmp	.+60     	; 0x3fc <__vector_18+0xc6>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
     3c0:	80 91 fb 02 	lds	r24, 0x02FB
     3c4:	48 2f       	mov	r20, r24
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	8a ef       	ldi	r24, 0xFA	; 250
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	60 81       	ld	r22, Z
     3d6:	ca 01       	movw	r24, r20
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	ac 01       	movw	r20, r24
     3de:	44 0f       	add	r20, r20
     3e0:	55 1f       	adc	r21, r21
     3e2:	44 0f       	add	r20, r20
     3e4:	55 1f       	adc	r21, r21
     3e6:	84 0f       	add	r24, r20
     3e8:	95 1f       	adc	r25, r21
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
     3ee:	8a 5f       	subi	r24, 0xFA	; 250
     3f0:	9e 4f       	sbci	r25, 0xFE	; 254
     3f2:	fc 01       	movw	r30, r24
     3f4:	60 83       	st	Z, r22
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			for(unsigned char i = 0; i < 8; i++)
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	8f 5f       	subi	r24, 0xFF	; 255
     3fa:	8a 83       	std	Y+2, r24	; 0x02
     3fc:	8a 81       	ldd	r24, Y+2	; 0x02
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	f8 f2       	brcs	.-66     	; 0x3c0 <__vector_18+0x8a>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);

			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
     402:	80 91 fb 02 	lds	r24, 0x02FB
     406:	68 2f       	mov	r22, r24
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	82 ef       	ldi	r24, 0xF2	; 242
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
     412:	82 95       	swap	r24
     414:	86 95       	lsr	r24
     416:	87 70       	andi	r24, 0x07	; 7
     418:	28 2f       	mov	r18, r24
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	83 ef       	ldi	r24, 0xF3	; 243
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	fc 01       	movw	r30, r24
     422:	80 81       	ld	r24, Z
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	82 2b       	or	r24, r18
     436:	93 2b       	or	r25, r19
     438:	ac 01       	movw	r20, r24
     43a:	cb 01       	movw	r24, r22
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	9c 01       	movw	r18, r24
     442:	22 0f       	add	r18, r18
     444:	33 1f       	adc	r19, r19
     446:	22 0f       	add	r18, r18
     448:	33 1f       	adc	r19, r19
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	82 5f       	subi	r24, 0xF2	; 242
     450:	9e 4f       	sbci	r25, 0xFE	; 254
     452:	fc 01       	movw	r30, r24
     454:	51 83       	std	Z+1, r21	; 0x01
     456:	40 83       	st	Z, r20

			if(++rxWrIndex == RX_BUFFER_SIZE)
     458:	80 91 fb 02 	lds	r24, 0x02FB
     45c:	8f 5f       	subi	r24, 0xFF	; 255
     45e:	80 93 fb 02 	sts	0x02FB, r24
     462:	82 33       	cpi	r24, 0x32	; 50
     464:	11 f4       	brne	.+4      	; 0x46a <__vector_18+0x134>
				rxWrIndex = 0;
     466:	10 92 fb 02 	sts	0x02FB, r1

			rxCounter++;
     46a:	80 91 fc 02 	lds	r24, 0x02FC
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 fc 02 	sts	0x02FC, r24

			//brPrimljenih1++;

			break;
     474:	23 c0       	rjmp	.+70     	; 0x4bc <__vector_18+0x186>
		}

		// proveravam da li je uspesno poslat podatak (ako je MOb bio podesen kao predajnik)
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
     476:	8e ee       	ldi	r24, 0xEE	; 238
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	80 81       	ld	r24, Z
     47e:	82 95       	swap	r24
     480:	86 95       	lsr	r24
     482:	86 95       	lsr	r24
     484:	83 70       	andi	r24, 0x03	; 3
     486:	88 2f       	mov	r24, r24
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	81 70       	andi	r24, 0x01	; 1
     48c:	99 27       	eor	r25, r25
     48e:	89 2b       	or	r24, r25
     490:	71 f0       	breq	.+28     	; 0x4ae <__vector_18+0x178>
		{
			CANCDMOB = 0; // disable mob
     492:	8f ee       	ldi	r24, 0xEF	; 239
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     49a:	8e ee       	ldi	r24, 0xEE	; 238
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	2e ee       	ldi	r18, 0xEE	; 238
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	f9 01       	movw	r30, r18
     4a4:	20 81       	ld	r18, Z
     4a6:	2f 7b       	andi	r18, 0xBF	; 191
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18

			break;
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__vector_18+0x186>
{
	unsigned char tempPage = CANPAGE;
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	8f 30       	cpi	r24, 0x0F	; 15
     4b8:	08 f4       	brcc	.+2      	; 0x4bc <__vector_18+0x186>
     4ba:	5d cf       	rjmp	.-326    	; 0x376 <__vector_18+0x40>

			break;
		}
	}

	CANPAGE = tempPage;
     4bc:	8d ee       	ldi	r24, 0xED	; 237
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	2b 81       	ldd	r18, Y+3	; 0x03
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // jako retardirano
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	ff 91       	pop	r31
     4d2:	ef 91       	pop	r30
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	7f 91       	pop	r23
     4da:	6f 91       	pop	r22
     4dc:	5f 91       	pop	r21
     4de:	4f 91       	pop	r20
     4e0:	3f 91       	pop	r19
     4e2:	2f 91       	pop	r18
     4e4:	0f 90       	pop	r0
     4e6:	00 92 5b 00 	sts	0x005B, r0
     4ea:	0f 90       	pop	r0
     4ec:	00 92 5f 00 	sts	0x005F, r0
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <CAN_Init>:
					  Podrazumeva se da je frekvencija kontrolera 10MHz
* Parameters        : None
* Return Value      : void
*********************************************************************************/
void CAN_Init(void)
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <CAN_Init+0x6>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     500:	88 ed       	ldi	r24, 0xD8	; 216
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     50a:	19 82       	std	Y+1, r1	; 0x01
     50c:	3e c0       	rjmp	.+124    	; 0x58a <CAN_Init+0x94>
	{
		CANPAGE = ch << 4;
     50e:	8d ee       	ldi	r24, 0xED	; 237
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	29 81       	ldd	r18, Y+1	; 0x01
     514:	22 95       	swap	r18
     516:	20 7f       	andi	r18, 0xF0	; 240
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18

		CANSTMOB = 0;
     51c:	8e ee       	ldi	r24, 0xEE	; 238
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	fc 01       	movw	r30, r24
     522:	10 82       	st	Z, r1
		CANCDMOB = 0;
     524:	8f ee       	ldi	r24, 0xEF	; 239
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	fc 01       	movw	r30, r24
     52a:	10 82       	st	Z, r1

		CANIDT1 = 0;
     52c:	83 ef       	ldi	r24, 0xF3	; 243
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	fc 01       	movw	r30, r24
     532:	10 82       	st	Z, r1
		CANIDT2 = 0;
     534:	82 ef       	ldi	r24, 0xF2	; 242
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	10 82       	st	Z, r1
		CANIDT3 = 0;
     53c:	81 ef       	ldi	r24, 0xF1	; 241
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	fc 01       	movw	r30, r24
     542:	10 82       	st	Z, r1
		CANIDT4 = 0;
     544:	80 ef       	ldi	r24, 0xF0	; 240
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	fc 01       	movw	r30, r24
     54a:	10 82       	st	Z, r1
		CANIDM1 = 0;
     54c:	87 ef       	ldi	r24, 0xF7	; 247
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	10 82       	st	Z, r1
		CANIDM2 = 0;
     554:	86 ef       	ldi	r24, 0xF6	; 246
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	fc 01       	movw	r30, r24
     55a:	10 82       	st	Z, r1
		CANIDM3 = 0;
     55c:	85 ef       	ldi	r24, 0xF5	; 245
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	fc 01       	movw	r30, r24
     562:	10 82       	st	Z, r1
		CANIDM4 = 0;
     564:	84 ef       	ldi	r24, 0xF4	; 244
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	fc 01       	movw	r30, r24
     56a:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     56c:	1a 82       	std	Y+2, r1	; 0x02
     56e:	07 c0       	rjmp	.+14     	; 0x57e <CAN_Init+0x88>
			CANMSG = 0;
     570:	8a ef       	ldi	r24, 0xFA	; 250
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	fc 01       	movw	r30, r24
     576:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	8f 5f       	subi	r24, 0xFF	; 255
     57c:	8a 83       	std	Y+2, r24	; 0x02
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	88 30       	cpi	r24, 0x08	; 8
     582:	b0 f3       	brcs	.-20     	; 0x570 <CAN_Init+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	8f 30       	cpi	r24, 0x0F	; 15
     58e:	08 f4       	brcc	.+2      	; 0x592 <CAN_Init+0x9c>
     590:	be cf       	rjmp	.-132    	; 0x50e <CAN_Init+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     592:	88 ed       	ldi	r24, 0xD8	; 216
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	22 e0       	ldi	r18, 0x02	; 2
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     59c:	82 ee       	ldi	r24, 0xE2	; 226
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2) | (1 << PRS0); // Propagation Time Segment-> 6xTq-> BILO 5
     5a6:	83 ee       	ldi	r24, 0xE3	; 227
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	2a e0       	ldi	r18, 0x0A	; 10
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS21) /*| (1 << PHS20) */| (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 7xTq, Phase Segment 1-> 8xTq
     5b0:	84 ee       	ldi	r24, 0xE4	; 228
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	2e e6       	ldi	r18, 0x6E	; 110
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     5ba:	85 ee       	ldi	r24, 0xE5	; 229
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     5c2:	8b ed       	ldi	r24, 0xDB	; 219
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	20 eb       	ldi	r18, 0xB0	; 176
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     5cc:	8f ed       	ldi	r24, 0xDF	; 223
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2f e7       	ldi	r18, 0x7F	; 127
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     5d6:	8e ed       	ldi	r24, 0xDE	; 222
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18

	//sei();
}
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <CAN_InitRxMob>:
					  ide. U slucaju neuspesne inicijalizacije MOb- a vraca 0
* Parameters        : unsigned int ide
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <CAN_InitRxMob+0x6>
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <CAN_InitRxMob+0x8>
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	9c 83       	std	Y+4, r25	; 0x04
     5f8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     5fa:	8d ee       	ldi	r24, 0xED	; 237
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	8a 83       	std	Y+2, r24	; 0x02

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     604:	00 00       	nop
     606:	89 ed       	ldi	r24, 0xD9	; 217
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	80 81       	ld	r24, Z
     60e:	82 95       	swap	r24
     610:	8f 70       	andi	r24, 0x0F	; 15
     612:	88 2f       	mov	r24, r24
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	81 70       	andi	r24, 0x01	; 1
     618:	99 27       	eor	r25, r25
     61a:	89 2b       	or	r24, r25
     61c:	a1 f7       	brne	.-24     	; 0x606 <CAN_InitRxMob+0x1c>
     61e:	89 ed       	ldi	r24, 0xD9	; 217
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	fc 01       	movw	r30, r24
     624:	80 81       	ld	r24, Z
     626:	86 95       	lsr	r24
     628:	86 95       	lsr	r24
     62a:	86 95       	lsr	r24
     62c:	88 2f       	mov	r24, r24
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	81 70       	andi	r24, 0x01	; 1
     632:	99 27       	eor	r25, r25
     634:	89 2b       	or	r24, r25
     636:	39 f7       	brne	.-50     	; 0x606 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     638:	19 82       	std	Y+1, r1	; 0x01
     63a:	4a c0       	rjmp	.+148    	; 0x6d0 <CAN_InitRxMob+0xe6>
	{
		CANPAGE = ch << 4;
     63c:	8d ee       	ldi	r24, 0xED	; 237
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	29 81       	ldd	r18, Y+1	; 0x01
     642:	22 95       	swap	r18
     644:	20 7f       	andi	r18, 0xF0	; 240
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     64a:	8f ee       	ldi	r24, 0xEF	; 239
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	fc 01       	movw	r30, r24
     650:	80 81       	ld	r24, Z
     652:	82 95       	swap	r24
     654:	86 95       	lsr	r24
     656:	86 95       	lsr	r24
     658:	83 70       	andi	r24, 0x03	; 3
     65a:	88 23       	and	r24, r24
     65c:	21 f0       	breq	.+8      	; 0x666 <CAN_InitRxMob+0x7c>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	35 c0       	rjmp	.+106    	; 0x6d0 <CAN_InitRxMob+0xe6>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     666:	8f ee       	ldi	r24, 0xEF	; 239
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	2f e0       	ldi	r18, 0x0F	; 15
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     670:	83 ef       	ldi	r24, 0xF3	; 243
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	2b 81       	ldd	r18, Y+3	; 0x03
     676:	3c 81       	ldd	r19, Y+4	; 0x04
     678:	33 27       	eor	r19, r19
     67a:	36 95       	lsr	r19
     67c:	27 95       	ror	r18
     67e:	36 95       	lsr	r19
     680:	27 95       	ror	r18
     682:	36 95       	lsr	r19
     684:	27 95       	ror	r18
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     68a:	82 ef       	ldi	r24, 0xF2	; 242
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	2b 81       	ldd	r18, Y+3	; 0x03
     690:	22 95       	swap	r18
     692:	22 0f       	add	r18, r18
     694:	20 7e       	andi	r18, 0xE0	; 224
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     69a:	86 ef       	ldi	r24, 0xF6	; 246
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	20 ee       	ldi	r18, 0xE0	; 224
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     6a4:	87 ef       	ldi	r24, 0xF7	; 247
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	2f ef       	ldi	r18, 0xFF	; 255
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     6ae:	8f ee       	ldi	r24, 0xEF	; 239
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2f ee       	ldi	r18, 0xEF	; 239
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	20 68       	ori	r18, 0x80	; 128
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
		sei();
     6c0:	78 94       	sei
		CANPAGE = tempPage;
     6c2:	8d ee       	ldi	r24, 0xED	; 237
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2a 81       	ldd	r18, Y+2	; 0x02
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18

		return 1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0a c0       	rjmp	.+20     	; 0x6e4 <CAN_InitRxMob+0xfa>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	8f 30       	cpi	r24, 0x0F	; 15
     6d4:	08 f4       	brcc	.+2      	; 0x6d8 <CAN_InitRxMob+0xee>
     6d6:	b2 cf       	rjmp	.-156    	; 0x63c <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     6d8:	8d ee       	ldi	r24, 0xED	; 237
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	2a 81       	ldd	r18, Y+2	; 0x02
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18

	return 0;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
}
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <CAN_checkRX>:
					  Ako ima vraca 1, u suprotnom vraca 0
* Parameters        : None
* Return Value      : char info da li ima primljenih podataka
*********************************************************************************/
char CAN_checkRX(void)
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
	if(rxCounter)
     6fa:	80 91 fc 02 	lds	r24, 0x02FC
     6fe:	88 23       	and	r24, r24
     700:	11 f0       	breq	.+4      	; 0x706 <CAN_checkRX+0x14>
		return 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	01 c0       	rjmp	.+2      	; 0x708 <CAN_checkRX+0x16>

	return 0;
     706:	80 e0       	ldi	r24, 0x00	; 0
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	00 d0       	rcall	.+0      	; 0x714 <CAN_read+0x6>
     714:	1f 92       	push	r1
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	9b 83       	std	Y+3, r25	; 0x03
     71c:	8a 83       	std	Y+2, r24	; 0x02
	// sve dok ne stigne neki podatak ostajem u funkciji

	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
     71e:	00 00       	nop
     720:	80 91 fc 02 	lds	r24, 0x02FC
     724:	88 23       	and	r24, r24
     726:	e1 f3       	breq	.-8      	; 0x720 <CAN_read+0x12>
	cli();
     728:	f8 94       	cli
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     72a:	19 82       	std	Y+1, r1	; 0x01
     72c:	22 c0       	rjmp	.+68     	; 0x772 <CAN_read+0x64>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	28 2f       	mov	r18, r24
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	80 91 fa 02 	lds	r24, 0x02FA
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	49 81       	ldd	r20, Y+1	; 0x01
     73e:	44 2f       	mov	r20, r20
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	bc 01       	movw	r22, r24
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	66 0f       	add	r22, r22
     74e:	77 1f       	adc	r23, r23
     750:	86 0f       	add	r24, r22
     752:	97 1f       	adc	r25, r23
     754:	84 0f       	add	r24, r20
     756:	95 1f       	adc	r25, r21
     758:	8a 5f       	subi	r24, 0xFA	; 250
     75a:	9e 4f       	sbci	r25, 0xFE	; 254
     75c:	fc 01       	movw	r30, r24
     75e:	40 81       	ld	r20, Z
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	9b 81       	ldd	r25, Y+3	; 0x03
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	fc 01       	movw	r30, r24
     76a:	40 83       	st	Z, r20
	while(rxCounter == 0);
	cli();
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	88 30       	cpi	r24, 0x08	; 8
     776:	d8 f2       	brcs	.-74     	; 0x72e <CAN_read+0x20>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];

	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
     778:	80 91 fa 02 	lds	r24, 0x02FA
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	9c 01       	movw	r18, r24
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	22 0f       	add	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	82 0f       	add	r24, r18
     790:	93 1f       	adc	r25, r19
     792:	82 5f       	subi	r24, 0xF2	; 242
     794:	9e 4f       	sbci	r25, 0xFE	; 254
     796:	fc 01       	movw	r30, r24
     798:	20 81       	ld	r18, Z
     79a:	31 81       	ldd	r19, Z+1	; 0x01
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	9b 81       	ldd	r25, Y+3	; 0x03
     7a0:	fc 01       	movw	r30, r24
     7a2:	31 87       	std	Z+9, r19	; 0x09
     7a4:	20 87       	std	Z+8, r18	; 0x08

	if(++rxRdIndex == RX_BUFFER_SIZE)
     7a6:	80 91 fa 02 	lds	r24, 0x02FA
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	80 93 fa 02 	sts	0x02FA, r24
     7b0:	82 33       	cpi	r24, 0x32	; 50
     7b2:	11 f4       	brne	.+4      	; 0x7b8 <CAN_read+0xaa>
		rxRdIndex = 0;
     7b4:	10 92 fa 02 	sts	0x02FA, r1


	rxCounter--;
     7b8:	80 91 fc 02 	lds	r24, 0x02FC
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	80 93 fc 02 	sts	0x02FC, r24
	sei();
     7c2:	78 94       	sei
}
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <CAN_write>:
					  identifikator messIdentificator.
* Parameters        : canMgs txData
* Return Value      : void
*********************************************************************************/
char CAN_write(canMsg txData)
{
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	2d 97       	sbiw	r28, 0x0d	; 13
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	0c 83       	std	Y+4, r16	; 0x04
     7ea:	1d 83       	std	Y+5, r17	; 0x05
     7ec:	2e 83       	std	Y+6, r18	; 0x06
     7ee:	3f 83       	std	Y+7, r19	; 0x07
     7f0:	48 87       	std	Y+8, r20	; 0x08
     7f2:	59 87       	std	Y+9, r21	; 0x09
     7f4:	6a 87       	std	Y+10, r22	; 0x0a
     7f6:	7b 87       	std	Y+11, r23	; 0x0b
     7f8:	8c 87       	std	Y+12, r24	; 0x0c
     7fa:	9d 87       	std	Y+13, r25	; 0x0d
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     7fc:	00 00       	nop
     7fe:	89 ed       	ldi	r24, 0xD9	; 217
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	82 95       	swap	r24
     808:	8f 70       	andi	r24, 0x0F	; 15
     80a:	88 2f       	mov	r24, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	81 70       	andi	r24, 0x01	; 1
     810:	99 27       	eor	r25, r25
     812:	89 2b       	or	r24, r25
     814:	a1 f7       	brne	.-24     	; 0x7fe <CAN_write+0x2e>
     816:	89 ed       	ldi	r24, 0xD9	; 217
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	fc 01       	movw	r30, r24
     81c:	80 81       	ld	r24, Z
     81e:	86 95       	lsr	r24
     820:	86 95       	lsr	r24
     822:	86 95       	lsr	r24
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	81 70       	andi	r24, 0x01	; 1
     82a:	99 27       	eor	r25, r25
     82c:	89 2b       	or	r24, r25
     82e:	39 f7       	brne	.-50     	; 0x7fe <CAN_write+0x2e>
	//taskENTER_CRITICAL();
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     830:	8d ee       	ldi	r24, 0xED	; 237
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	8b 83       	std	Y+3, r24	; 0x03

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     83a:	19 82       	std	Y+1, r1	; 0x01
     83c:	15 c0       	rjmp	.+42     	; 0x868 <CAN_write+0x98>
	{
		CANPAGE = ch << 4;
     83e:	8d ee       	ldi	r24, 0xED	; 237
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	29 81       	ldd	r18, Y+1	; 0x01
     844:	22 95       	swap	r18
     846:	20 7f       	andi	r18, 0xF0	; 240
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     84c:	8f ee       	ldi	r24, 0xEF	; 239
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	fc 01       	movw	r30, r24
     852:	80 81       	ld	r24, Z
     854:	82 95       	swap	r24
     856:	86 95       	lsr	r24
     858:	86 95       	lsr	r24
     85a:	83 70       	andi	r24, 0x03	; 3
     85c:	88 23       	and	r24, r24
     85e:	09 f4       	brne	.+2      	; 0x862 <CAN_write+0x92>
			break;
     860:	06 c0       	rjmp	.+12     	; 0x86e <CAN_write+0x9e>

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	8f 5f       	subi	r24, 0xFF	; 255
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	8f 30       	cpi	r24, 0x0F	; 15
     86c:	40 f3       	brcs	.-48     	; 0x83e <CAN_write+0x6e>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	8f 30       	cpi	r24, 0x0F	; 15
     872:	11 f4       	brne	.+4      	; 0x878 <CAN_write+0xa8>
	{
		//taskEXIT_CRITICAL();

		return 0;
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	3f c0       	rjmp	.+126    	; 0x8f6 <CAN_write+0x126>
	}

	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (txData.msgIde & 0x0F) << 5;
     878:	82 ef       	ldi	r24, 0xF2	; 242
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	2c 85       	ldd	r18, Y+12	; 0x0c
     87e:	3d 85       	ldd	r19, Y+13	; 0x0d
     880:	22 95       	swap	r18
     882:	22 0f       	add	r18, r18
     884:	20 7e       	andi	r18, 0xE0	; 224
     886:	fc 01       	movw	r30, r24
     888:	20 83       	st	Z, r18
	CANIDT1 = (txData.msgIde) >> 3;
     88a:	83 ef       	ldi	r24, 0xF3	; 243
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	2c 85       	ldd	r18, Y+12	; 0x0c
     890:	3d 85       	ldd	r19, Y+13	; 0x0d
     892:	36 95       	lsr	r19
     894:	27 95       	ror	r18
     896:	36 95       	lsr	r19
     898:	27 95       	ror	r18
     89a:	36 95       	lsr	r19
     89c:	27 95       	ror	r18
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     8a2:	8f ee       	ldi	r24, 0xEF	; 239
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	28 e0       	ldi	r18, 0x08	; 8
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     8ac:	1a 82       	std	Y+2, r1	; 0x02
     8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <CAN_write+0x102>
		CANMSG = txData.data[i];
     8b0:	8a ef       	ldi	r24, 0xFA	; 250
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	2a 81       	ldd	r18, Y+2	; 0x02
     8b6:	22 2f       	mov	r18, r18
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	ae 01       	movw	r20, r28
     8bc:	4c 5f       	subi	r20, 0xFC	; 252
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	24 0f       	add	r18, r20
     8c2:	35 1f       	adc	r19, r21
     8c4:	f9 01       	movw	r30, r18
     8c6:	20 81       	ld	r18, Z
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	8a 83       	std	Y+2, r24	; 0x02
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	88 30       	cpi	r24, 0x08	; 8
     8d6:	60 f3       	brcs	.-40     	; 0x8b0 <CAN_write+0xe0>
		CANMSG = txData.data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     8d8:	8f ee       	ldi	r24, 0xEF	; 239
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	2f ee       	ldi	r18, 0xEF	; 239
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	20 64       	ori	r18, 0x40	; 64
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     8ea:	8d ee       	ldi	r24, 0xED	; 237
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	2b 81       	ldd	r18, Y+3	; 0x03
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18

	//taskEXIT_CRITICAL();

	return 1;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
}
     8f6:	2d 96       	adiw	r28, 0x0d	; 13
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	08 95       	ret

0000090c <TIMER3_Init>:

#define SPEED_H 0x02
#define SPEED_L 0x00

void TIMER3_Init(unsigned int f_pwm)
{
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <TIMER3_Init+0xa>
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	9a 83       	std	Y+2, r25	; 0x02
     91c:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     91e:	8d e2       	ldi	r24, 0x2D	; 45
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	2d e2       	ldi	r18, 0x2D	; 45
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	f9 01       	movw	r30, r18
     928:	20 81       	ld	r18, Z
     92a:	28 63       	ori	r18, 0x38	; 56
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18

	TCNT3 = 0;
     930:	84 e9       	ldi	r24, 0x94	; 148
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	fc 01       	movw	r30, r24
     936:	11 82       	std	Z+1, r1	; 0x01
     938:	10 82       	st	Z, r1
	OCR3A = 0;
     93a:	88 e9       	ldi	r24, 0x98	; 152
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	fc 01       	movw	r30, r24
     940:	11 82       	std	Z+1, r1	; 0x01
     942:	10 82       	st	Z, r1
	OCR3B = 0;
     944:	8a e9       	ldi	r24, 0x9A	; 154
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	11 82       	std	Z+1, r1	; 0x01
     94c:	10 82       	st	Z, r1
	OCR3C = 0;
     94e:	8c e9       	ldi	r24, 0x9C	; 156
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	fc 01       	movw	r30, r24
     954:	11 82       	std	Z+1, r1	; 0x01
     956:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     958:	80 e9       	ldi	r24, 0x90	; 144
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	2e e3       	ldi	r18, 0x3E	; 62
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS30); // PRESKALER = 1
     962:	81 e9       	ldi	r24, 0x91	; 145
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	29 e1       	ldi	r18, 0x19	; 25
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
	ICR3 = (double)F_CPU / f_pwm - 0.5;
     96c:	06 e9       	ldi	r16, 0x96	; 150
     96e:	10 e0       	ldi	r17, 0x00	; 0
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	cc 01       	movw	r24, r24
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatunsisf>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	9c 01       	movw	r18, r24
     988:	ad 01       	movw	r20, r26
     98a:	60 e8       	ldi	r22, 0x80	; 128
     98c:	76 e9       	ldi	r23, 0x96	; 150
     98e:	88 e1       	ldi	r24, 0x18	; 24
     990:	9b e4       	ldi	r25, 0x4B	; 75
     992:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	5f e3       	ldi	r21, 0x3F	; 63
     9a2:	bc 01       	movw	r22, r24
     9a4:	cd 01       	movw	r24, r26
     9a6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__subsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	f8 01       	movw	r30, r16
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	80 83       	st	Z, r24
}
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <TIMER1_Init>:

void TIMER1_Init(void)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = (1 << WGM01) | (1 << CS02);
     9d6:	84 e4       	ldi	r24, 0x44	; 68
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	2c e0       	ldi	r18, 0x0C	; 12
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);
     9e0:	8e e6       	ldi	r24, 0x6E	; 110
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2e e6       	ldi	r18, 0x6E	; 110
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	20 81       	ld	r18, Z
     9ec:	22 60       	ori	r18, 0x02	; 2
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
	OCR0A = 43;
     9f2:	87 e4       	ldi	r24, 0x47	; 71
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	2b e2       	ldi	r18, 0x2B	; 43
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18

	SREG |= 0x80;
     9fc:	8f e5       	ldi	r24, 0x5F	; 95
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	2f e5       	ldi	r18, 0x5F	; 95
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	f9 01       	movw	r30, r18
     a06:	20 81       	ld	r18, Z
     a08:	20 68       	ori	r18, 0x80	; 128
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <AX_UART_Init>:

void AX_UART_Init(void)
{
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	2e 97       	sbiw	r28, 0x0e	; 14
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRE &= ~((1 << 0x00) | (1 << 0x01));
     a28:	8d e2       	ldi	r24, 0x2D	; 45
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	2d e2       	ldi	r18, 0x2D	; 45
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	f9 01       	movw	r30, r18
     a32:	20 81       	ld	r18, Z
     a34:	2c 7f       	andi	r18, 0xFC	; 252
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR0A = 0;
     a3a:	80 ec       	ldi	r24, 0xC0	; 192
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	fc 01       	movw	r30, r24
     a40:	10 82       	st	Z, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     a42:	81 ec       	ldi	r24, 0xC1	; 193
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	28 e1       	ldi	r18, 0x18	; 24
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
     a4c:	82 ec       	ldi	r24, 0xC2	; 194
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	26 e0       	ldi	r18, 0x06	; 6
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18

	UBRR0H = 0;
     a56:	85 ec       	ldi	r24, 0xC5	; 197
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc 01       	movw	r30, r24
     a5c:	10 82       	st	Z, r1
	UBRR0L = 5;
     a5e:	84 ec       	ldi	r24, 0xC4	; 196
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	25 e0       	ldi	r18, 0x05	; 5
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a8 ec       	ldi	r26, 0xC8	; 200
     a6e:	b2 e4       	ldi	r27, 0x42	; 66
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	9a 83       	std	Y+2, r25	; 0x02
     a74:	ab 83       	std	Y+3, r26	; 0x03
     a76:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e4       	ldi	r19, 0x40	; 64
     a7c:	4c e1       	ldi	r20, 0x1C	; 28
     a7e:	55 e4       	ldi	r21, 0x45	; 69
     a80:	69 81       	ldd	r22, Y+1	; 0x01
     a82:	7a 81       	ldd	r23, Y+2	; 0x02
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	8d 83       	std	Y+5, r24	; 0x05
     a92:	9e 83       	std	Y+6, r25	; 0x06
     a94:	af 83       	std	Y+7, r26	; 0x07
     a96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e8       	ldi	r20, 0x80	; 128
     a9e:	5f e3       	ldi	r21, 0x3F	; 63
     aa0:	6d 81       	ldd	r22, Y+5	; 0x05
     aa2:	7e 81       	ldd	r23, Y+6	; 0x06
     aa4:	8f 81       	ldd	r24, Y+7	; 0x07
     aa6:	98 85       	ldd	r25, Y+8	; 0x08
     aa8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__cmpsf2>
     aac:	88 23       	and	r24, r24
     aae:	2c f4       	brge	.+10     	; 0xaba <AX_UART_Init+0xa6>
		__ticks = 1;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	9a 87       	std	Y+10, r25	; 0x0a
     ab6:	89 87       	std	Y+9, r24	; 0x09
     ab8:	3f c0       	rjmp	.+126    	; 0xb38 <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	3f ef       	ldi	r19, 0xFF	; 255
     abe:	4f e7       	ldi	r20, 0x7F	; 127
     ac0:	57 e4       	ldi	r21, 0x47	; 71
     ac2:	6d 81       	ldd	r22, Y+5	; 0x05
     ac4:	7e 81       	ldd	r23, Y+6	; 0x06
     ac6:	8f 81       	ldd	r24, Y+7	; 0x07
     ac8:	98 85       	ldd	r25, Y+8	; 0x08
     aca:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__gesf2>
     ace:	18 16       	cp	r1, r24
     ad0:	4c f5       	brge	.+82     	; 0xb24 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e2       	ldi	r20, 0x20	; 32
     ad8:	51 e4       	ldi	r21, 0x41	; 65
     ada:	69 81       	ldd	r22, Y+1	; 0x01
     adc:	7a 81       	ldd	r23, Y+2	; 0x02
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	bc 01       	movw	r22, r24
     aec:	cd 01       	movw	r24, r26
     aee:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	9a 87       	std	Y+10, r25	; 0x0a
     af8:	89 87       	std	Y+9, r24	; 0x09
     afa:	0f c0       	rjmp	.+30     	; 0xb1a <AX_UART_Init+0x106>
     afc:	8a ef       	ldi	r24, 0xFA	; 250
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	9c 87       	std	Y+12, r25	; 0x0c
     b02:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b04:	8b 85       	ldd	r24, Y+11	; 0x0b
     b06:	9c 85       	ldd	r25, Y+12	; 0x0c
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <AX_UART_Init+0xf4>
     b0c:	9c 87       	std	Y+12, r25	; 0x0c
     b0e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b10:	89 85       	ldd	r24, Y+9	; 0x09
     b12:	9a 85       	ldd	r25, Y+10	; 0x0a
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	9a 87       	std	Y+10, r25	; 0x0a
     b18:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b1a:	89 85       	ldd	r24, Y+9	; 0x09
     b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b1e:	89 2b       	or	r24, r25
     b20:	69 f7       	brne	.-38     	; 0xafc <AX_UART_Init+0xe8>
     b22:	14 c0       	rjmp	.+40     	; 0xb4c <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b24:	6d 81       	ldd	r22, Y+5	; 0x05
     b26:	7e 81       	ldd	r23, Y+6	; 0x06
     b28:	8f 81       	ldd	r24, Y+7	; 0x07
     b2a:	98 85       	ldd	r25, Y+8	; 0x08
     b2c:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
     b30:	dc 01       	movw	r26, r24
     b32:	cb 01       	movw	r24, r22
     b34:	9a 87       	std	Y+10, r25	; 0x0a
     b36:	89 87       	std	Y+9, r24	; 0x09
     b38:	89 85       	ldd	r24, Y+9	; 0x09
     b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3c:	9e 87       	std	Y+14, r25	; 0x0e
     b3e:	8d 87       	std	Y+13, r24	; 0x0d
     b40:	8d 85       	ldd	r24, Y+13	; 0x0d
     b42:	9e 85       	ldd	r25, Y+14	; 0x0e
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <AX_UART_Init+0x130>
     b48:	9e 87       	std	Y+14, r25	; 0x0e
     b4a:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     b4c:	2e 96       	adiw	r28, 0x0e	; 14
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	1f 92       	push	r1
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR0A & (1<<UDRE0)) );
     b6a:	00 00       	nop
     b6c:	80 ec       	ldi	r24, 0xC0	; 192
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	fc 01       	movw	r30, r24
     b72:	80 81       	ld	r24, Z
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	80 72       	andi	r24, 0x20	; 32
     b7a:	99 27       	eor	r25, r25
     b7c:	89 2b       	or	r24, r25
     b7e:	b1 f3       	breq	.-20     	; 0xb6c <AX_SendChar+0xe>
	UDR0 = data;
     b80:	86 ec       	ldi	r24, 0xC6	; 198
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	29 81       	ldd	r18, Y+1	; 0x01
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
}
     b8a:	0f 90       	pop	r0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR0A & (1<< RXC0)) );
     b9a:	00 00       	nop
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	88 23       	and	r24, r24
     ba6:	d4 f7       	brge	.-12     	; 0xb9c <AX_ReadChar+0xa>
   return UDR0;
     ba8:	86 ec       	ldi	r24, 0xC6	; 198
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	fc 01       	movw	r30, r24
     bae:	80 81       	ld	r24, Z
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	27 97       	sbiw	r28, 0x07	; 7
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     bca:	27 e0       	ldi	r18, 0x07	; 7
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	fc 01       	movw	r30, r24
     bd2:	32 2f       	mov	r19, r18
     bd4:	11 92       	st	Z+, r1
     bd6:	3a 95       	dec	r19
     bd8:	e9 f7       	brne	.-6      	; 0xbd4 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     bda:	0e 94 c9 05 	call	0xb92	; 0xb92 <AX_ReadChar>
     bde:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     be0:	0e 94 c9 05 	call	0xb92	; 0xb92 <AX_ReadChar>
     be4:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     be6:	0e 94 c9 05 	call	0xb92	; 0xb92 <AX_ReadChar>
     bea:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     bec:	0e 94 c9 05 	call	0xb92	; 0xb92 <AX_ReadChar>
     bf0:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     bf2:	0e 94 c9 05 	call	0xb92	; 0xb92 <AX_ReadChar>
     bf6:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     bf8:	0e 94 c9 05 	call	0xb92	; 0xb92 <AX_ReadChar>
     bfc:	8e 83       	std	Y+6, r24	; 0x06
}
     bfe:	27 96       	adiw	r28, 0x07	; 7
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR0A & (1<<TXC0)) );
     c18:	00 00       	nop
     c1a:	80 ec       	ldi	r24, 0xC0	; 192
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	80 74       	andi	r24, 0x40	; 64
     c28:	99 27       	eor	r25, r25
     c2a:	89 2b       	or	r24, r25
     c2c:	b1 f3       	breq	.-20     	; 0xc1a <AX_StopTransmitter+0xa>
	UCSR0B &= 0xF7;
     c2e:	81 ec       	ldi	r24, 0xC1	; 193
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	21 ec       	ldi	r18, 0xC1	; 193
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	f9 01       	movw	r30, r18
     c38:	20 81       	ld	r18, Z
     c3a:	27 7f       	andi	r18, 0xF7	; 247
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
	UCSR0A |= 0x40;
     c40:	80 ec       	ldi	r24, 0xC0	; 192
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	20 ec       	ldi	r18, 0xC0	; 192
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	f9 01       	movw	r30, r18
     c4a:	20 81       	ld	r18, Z
     c4c:	20 64       	ori	r18, 0x40	; 64
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x08;
     c60:	81 ec       	ldi	r24, 0xC1	; 193
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	21 ec       	ldi	r18, 0xC1	; 193
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	20 81       	ld	r18, Z
     c6c:	28 60       	ori	r18, 0x08	; 8
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= 0xEF;
     c80:	81 ec       	ldi	r24, 0xC1	; 193
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	21 ec       	ldi	r18, 0xC1	; 193
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	f9 01       	movw	r30, r18
     c8a:	20 81       	ld	r18, Z
     c8c:	2f 7e       	andi	r18, 0xEF	; 239
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x10;
     ca0:	81 ec       	ldi	r24, 0xC1	; 193
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	21 ec       	ldi	r18, 0xC1	; 193
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	f9 01       	movw	r30, r18
     caa:	20 81       	ld	r18, Z
     cac:	20 61       	ori	r18, 0x10	; 16
     cae:	fc 01       	movw	r30, r24
     cb0:	20 83       	st	Z, r18
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	6a 97       	sbiw	r28, 0x1a	; 26
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	9e 8b       	std	Y+22, r25	; 0x16
     cce:	8d 8b       	std	Y+21, r24	; 0x15
     cd0:	78 8f       	std	Y+24, r23	; 0x18
     cd2:	6f 8b       	std	Y+23, r22	; 0x17
     cd4:	49 8f       	std	Y+25, r20	; 0x19
     cd6:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     cd8:	8d 89       	ldd	r24, Y+21	; 0x15
     cda:	9e 89       	ldd	r25, Y+22	; 0x16
     cdc:	cc 01       	movw	r24, r24
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatunsisf>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	46 e9       	ldi	r20, 0x96	; 150
     cf4:	53 e4       	ldi	r21, 0x43	; 67
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 ec       	ldi	r19, 0xC0	; 192
     d06:	4f e7       	ldi	r20, 0x7F	; 127
     d08:	54 e4       	ldi	r21, 0x44	; 68
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e 8b       	std	Y+22, r25	; 0x16
     d24:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     d26:	8d 89       	ldd	r24, Y+21	; 0x15
     d28:	9e 89       	ldd	r25, Y+22	; 0x16
     d2a:	89 2f       	mov	r24, r25
     d2c:	99 27       	eor	r25, r25
     d2e:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     d30:	8d 89       	ldd	r24, Y+21	; 0x15
     d32:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     d34:	89 8d       	ldd	r24, Y+25	; 0x19
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	98 2f       	mov	r25, r24
     d3c:	88 27       	eor	r24, r24
     d3e:	99 0f       	add	r25, r25
     d40:	99 0f       	add	r25, r25
     d42:	9c 01       	movw	r18, r24
     d44:	8f 89       	ldd	r24, Y+23	; 0x17
     d46:	98 8d       	ldd	r25, Y+24	; 0x18
     d48:	82 2b       	or	r24, r18
     d4a:	93 2b       	or	r25, r19
     d4c:	98 8f       	std	Y+24, r25	; 0x18
     d4e:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     d50:	8f 89       	ldd	r24, Y+23	; 0x17
     d52:	98 8d       	ldd	r25, Y+24	; 0x18
     d54:	89 2f       	mov	r24, r25
     d56:	99 27       	eor	r25, r25
     d58:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     d5a:	8f 89       	ldd	r24, Y+23	; 0x17
     d5c:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     d5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 01       	movw	r18, r24
     d66:	28 5d       	subi	r18, 0xD8	; 216
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	28 0f       	add	r18, r24
     d72:	39 1f       	adc	r19, r25
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	28 0f       	add	r18, r24
     d7c:	39 1f       	adc	r19, r25
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	28 0f       	add	r18, r24
     d86:	39 1f       	adc	r19, r25
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	80 95       	com	r24
     d94:	90 95       	com	r25
     d96:	9e 83       	std	Y+6, r25	; 0x06
     d98:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     d9a:	0e 94 3c 06 	call	0xc78	; 0xc78 <AX_StopReceiver>

	AX_SendChar(START);
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(START);
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(id);
     daa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dac:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(LENGTH);
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(INSTR);
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(ADDRESS);
     dbc:	8e e1       	ldi	r24, 0x1E	; 30
     dbe:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(angle_L);
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(angle_H);
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(speed_L);
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(speed_H);
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(checksum);
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>

	AX_StopTransmitter();
     de0:	0e 94 08 06 	call	0xc10	; 0xc10 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     de4:	0e 94 4c 06 	call	0xc98	; 0xc98 <AX_ReleaseReceiver>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a8 e4       	ldi	r26, 0x48	; 72
     dee:	b2 e4       	ldi	r27, 0x42	; 66
     df0:	8f 83       	std	Y+7, r24	; 0x07
     df2:	98 87       	std	Y+8, r25	; 0x08
     df4:	a9 87       	std	Y+9, r26	; 0x09
     df6:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e4       	ldi	r19, 0x40	; 64
     dfc:	4c e1       	ldi	r20, 0x1C	; 28
     dfe:	55 e4       	ldi	r21, 0x45	; 69
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	8b 87       	std	Y+11, r24	; 0x0b
     e12:	9c 87       	std	Y+12, r25	; 0x0c
     e14:	ad 87       	std	Y+13, r26	; 0x0d
     e16:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	6b 85       	ldd	r22, Y+11	; 0x0b
     e22:	7c 85       	ldd	r23, Y+12	; 0x0c
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__cmpsf2>
     e2c:	88 23       	and	r24, r24
     e2e:	2c f4       	brge	.+10     	; 0xe3a <AX_SetAngle+0x182>
		__ticks = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	98 8b       	std	Y+16, r25	; 0x10
     e36:	8f 87       	std	Y+15, r24	; 0x0f
     e38:	3f c0       	rjmp	.+126    	; 0xeb8 <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	4f e7       	ldi	r20, 0x7F	; 127
     e40:	57 e4       	ldi	r21, 0x47	; 71
     e42:	6b 85       	ldd	r22, Y+11	; 0x0b
     e44:	7c 85       	ldd	r23, Y+12	; 0x0c
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__gesf2>
     e4e:	18 16       	cp	r1, r24
     e50:	4c f5       	brge	.+82     	; 0xea4 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e2       	ldi	r20, 0x20	; 32
     e58:	51 e4       	ldi	r21, 0x41	; 65
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	98 8b       	std	Y+16, r25	; 0x10
     e78:	8f 87       	std	Y+15, r24	; 0x0f
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <AX_SetAngle+0x1e2>
     e7c:	8a ef       	ldi	r24, 0xFA	; 250
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9a 8b       	std	Y+18, r25	; 0x12
     e82:	89 8b       	std	Y+17, r24	; 0x11
     e84:	89 89       	ldd	r24, Y+17	; 0x11
     e86:	9a 89       	ldd	r25, Y+18	; 0x12
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <AX_SetAngle+0x1d0>
     e8c:	9a 8b       	std	Y+18, r25	; 0x12
     e8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e90:	8f 85       	ldd	r24, Y+15	; 0x0f
     e92:	98 89       	ldd	r25, Y+16	; 0x10
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	98 8b       	std	Y+16, r25	; 0x10
     e98:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9c:	98 89       	ldd	r25, Y+16	; 0x10
     e9e:	89 2b       	or	r24, r25
     ea0:	69 f7       	brne	.-38     	; 0xe7c <AX_SetAngle+0x1c4>
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
     eac:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	98 8b       	std	Y+16, r25	; 0x10
     eb6:	8f 87       	std	Y+15, r24	; 0x0f
     eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eba:	98 89       	ldd	r25, Y+16	; 0x10
     ebc:	9c 8b       	std	Y+20, r25	; 0x14
     ebe:	8b 8b       	std	Y+19, r24	; 0x13
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <AX_SetAngle+0x20c>
     ec8:	9c 8b       	std	Y+20, r25	; 0x14
     eca:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     ecc:	0e 94 2c 06 	call	0xc58	; 0xc58 <AX_ReleaseTransmitter>
}
     ed0:	6a 96       	adiw	r28, 0x1a	; 26
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	60 97       	sbiw	r28, 0x10	; 16
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     ef6:	8c ee       	ldi	r24, 0xEC	; 236
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     efe:	0e 94 3c 06 	call	0xc78	; 0xc78 <AX_StopReceiver>

	AX_SendChar(0xFF);
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0xFF);
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x01);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x07);
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x03);
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x06);
     f20:	86 e0       	ldi	r24, 0x06	; 6
     f22:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x00);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x00);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(1023 >> 8);
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(checksum);
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>

	AX_StopTransmitter();
     f44:	0e 94 08 06 	call	0xc10	; 0xc10 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     f48:	0e 94 4c 06 	call	0xc98	; 0xc98 <AX_ReleaseReceiver>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a8 e4       	ldi	r26, 0x48	; 72
     f52:	b2 e4       	ldi	r27, 0x42	; 66
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	9c 83       	std	Y+4, r25	; 0x04
     f58:	ad 83       	std	Y+5, r26	; 0x05
     f5a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e4       	ldi	r19, 0x40	; 64
     f60:	4c e1       	ldi	r20, 0x1C	; 28
     f62:	55 e4       	ldi	r21, 0x45	; 69
     f64:	6b 81       	ldd	r22, Y+3	; 0x03
     f66:	7c 81       	ldd	r23, Y+4	; 0x04
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8f 83       	std	Y+7, r24	; 0x07
     f76:	98 87       	std	Y+8, r25	; 0x08
     f78:	a9 87       	std	Y+9, r26	; 0x09
     f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	6f 81       	ldd	r22, Y+7	; 0x07
     f86:	78 85       	ldd	r23, Y+8	; 0x08
     f88:	89 85       	ldd	r24, Y+9	; 0x09
     f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__cmpsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <AX_EndlessTurn+0xbc>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 87       	std	Y+12, r25	; 0x0c
     f9a:	8b 87       	std	Y+11, r24	; 0x0b
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	57 e4       	ldi	r21, 0x47	; 71
     fa6:	6f 81       	ldd	r22, Y+7	; 0x07
     fa8:	78 85       	ldd	r23, Y+8	; 0x08
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__gesf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	6b 81       	ldd	r22, Y+3	; 0x03
     fc0:	7c 81       	ldd	r23, Y+4	; 0x04
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9c 87       	std	Y+12, r25	; 0x0c
     fdc:	8b 87       	std	Y+11, r24	; 0x0b
     fde:	0f c0       	rjmp	.+30     	; 0xffe <AX_EndlessTurn+0x11c>
     fe0:	8a ef       	ldi	r24, 0xFA	; 250
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9e 87       	std	Y+14, r25	; 0x0e
     fe6:	8d 87       	std	Y+13, r24	; 0x0d
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <AX_EndlessTurn+0x10a>
     ff0:	9e 87       	std	Y+14, r25	; 0x0e
     ff2:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9c 87       	std	Y+12, r25	; 0x0c
     ffc:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1000:	9c 85       	ldd	r25, Y+12	; 0x0c
    1002:	89 2b       	or	r24, r25
    1004:	69 f7       	brne	.-38     	; 0xfe0 <AX_EndlessTurn+0xfe>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6f 81       	ldd	r22, Y+7	; 0x07
    100a:	78 85       	ldd	r23, Y+8	; 0x08
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9c 87       	std	Y+12, r25	; 0x0c
    101a:	8b 87       	std	Y+11, r24	; 0x0b
    101c:	8b 85       	ldd	r24, Y+11	; 0x0b
    101e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	98 89       	ldd	r25, Y+16	; 0x10
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <AX_EndlessTurn+0x146>
    102c:	98 8b       	std	Y+16, r25	; 0x10
    102e:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
    1030:	0e 94 2c 06 	call	0xc58	; 0xc58 <AX_ReleaseTransmitter>
}
    1034:	60 96       	adiw	r28, 0x10	; 16
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	28 97       	sbiw	r28, 0x08	; 8
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	78 87       	std	Y+8, r23	; 0x08
    1060:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
    1062:	1a 82       	std	Y+2, r1	; 0x02
    1064:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
    1066:	1c 82       	std	Y+4, r1	; 0x04
    1068:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
    106a:	8f 81       	ldd	r24, Y+7	; 0x07
    106c:	98 85       	ldd	r25, Y+8	; 0x08
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	98 2f       	mov	r25, r24
    1078:	88 27       	eor	r24, r24
    107a:	99 0f       	add	r25, r25
    107c:	99 0f       	add	r25, r25
    107e:	29 81       	ldd	r18, Y+1	; 0x01
    1080:	3a 81       	ldd	r19, Y+2	; 0x02
    1082:	82 2b       	or	r24, r18
    1084:	93 2b       	or	r25, r19
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	89 96       	adiw	r24, 0x29	; 41
    1090:	80 95       	com	r24
    1092:	90 95       	com	r25
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
    1098:	0e 94 3c 06 	call	0xc78	; 0xc78 <AX_StopReceiver>

	AX_SendChar(0xFF);
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0xFF);
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x01);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x05);
    10ae:	85 e0       	ldi	r24, 0x05	; 5
    10b0:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x03);
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(0x20);
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(data);
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(data >> 8);
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	89 2f       	mov	r24, r25
    10cc:	99 27       	eor	r25, r25
    10ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>
	AX_SendChar(checksum);
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	0e 94 af 05 	call	0xb5e	; 0xb5e <AX_SendChar>

	AX_StopTransmitter();
    10d8:	0e 94 08 06 	call	0xc10	; 0xc10 <AX_StopTransmitter>
	AX_ReleaseReceiver();
    10dc:	0e 94 4c 06 	call	0xc98	; 0xc98 <AX_ReleaseReceiver>

	AX_ReadStatus();
    10e0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <AX_ReadStatus>

	AX_ReleaseTransmitter();
    10e4:	0e 94 2c 06 	call	0xc58	; 0xc58 <AX_ReleaseTransmitter>
}
    10e8:	28 96       	adiw	r28, 0x08	; 8
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <main>:
#include "system.h"



int main(void)
{
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	2a 97       	sbiw	r28, 0x0a	; 10
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61

	AX_UART_Init();
    1112:	0e 94 0a 05 	call	0xa14	; 0xa14 <AX_UART_Init>
	CAN_Init();
    1116:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <CAN_Init>
	CAN_InitRxMob(LIFT_IDE);
    111a:	84 ed       	ldi	r24, 0xD4	; 212
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <CAN_InitRxMob>
	systemInit();
    1122:	0e 94 ab 0b 	call	0x1756	; 0x1756 <systemInit>

	canMsg message;

    while(1)
    {
    	CAN_read(&message);
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	0e 94 87 03 	call	0x70e	; 0x70e <CAN_read>
    	action(message);
    112e:	09 81       	ldd	r16, Y+1	; 0x01
    1130:	1a 81       	ldd	r17, Y+2	; 0x02
    1132:	2b 81       	ldd	r18, Y+3	; 0x03
    1134:	3c 81       	ldd	r19, Y+4	; 0x04
    1136:	4d 81       	ldd	r20, Y+5	; 0x05
    1138:	5e 81       	ldd	r21, Y+6	; 0x06
    113a:	6f 81       	ldd	r22, Y+7	; 0x07
    113c:	78 85       	ldd	r23, Y+8	; 0x08
    113e:	89 85       	ldd	r24, Y+9	; 0x09
    1140:	9a 85       	ldd	r25, Y+10	; 0x0a
    1142:	0e 94 3f 01 	call	0x27e	; 0x27e <action>

    }
    1146:	ef cf       	rjmp	.-34     	; 0x1126 <__stack+0x27>

00001148 <GPIO_PinRegister>:
static volatile GPIOOutData *outputs[MAX_OUTPUTS];
static volatile unsigned char inputsNumber = 0;
static volatile unsigned char outputsNumber = 0;

unsigned char GPIO_PinRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	00 d0       	rcall	.+0      	; 0x1152 <GPIO_PinRegister+0xa>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <GPIO_PinRegister+0xc>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9b 83       	std	Y+3, r25	; 0x03
    115a:	8a 83       	std	Y+2, r24	; 0x02
    115c:	6c 83       	std	Y+4, r22	; 0x04
	if(inputsNumber >= MAX_INPUTS)
    115e:	80 91 25 03 	lds	r24, 0x0325
    1162:	8a 30       	cpi	r24, 0x0A	; 10
    1164:	10 f0       	brcs	.+4      	; 0x116a <GPIO_PinRegister+0x22>
		return 0;
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	8f c0       	rjmp	.+286    	; 0x1288 <GPIO_PinRegister+0x140>

	unsigned char i;

	gpios[inputsNumber] = (GPIOData *)malloc(sizeof(GPIOData));
    116a:	80 91 25 03 	lds	r24, 0x0325
    116e:	08 2f       	mov	r16, r24
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <malloc>
    117a:	9c 01       	movw	r18, r24
    117c:	c8 01       	movw	r24, r16
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	83 50       	subi	r24, 0x03	; 3
    1184:	9d 4f       	sbci	r25, 0xFD	; 253
    1186:	fc 01       	movw	r30, r24
    1188:	31 83       	std	Z+1, r19	; 0x01
    118a:	20 83       	st	Z, r18
	if(gpios[inputsNumber] == NULL)
    118c:	80 91 25 03 	lds	r24, 0x0325
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	83 50       	subi	r24, 0x03	; 3
    119a:	9d 4f       	sbci	r25, 0xFD	; 253
    119c:	fc 01       	movw	r30, r24
    119e:	80 81       	ld	r24, Z
    11a0:	91 81       	ldd	r25, Z+1	; 0x01
    11a2:	89 2b       	or	r24, r25
    11a4:	11 f4       	brne	.+4      	; 0x11aa <GPIO_PinRegister+0x62>
		return -1;
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	6f c0       	rjmp	.+222    	; 0x1288 <GPIO_PinRegister+0x140>

	gpios[inputsNumber]->baseAddress = baseAddress;
    11aa:	80 91 25 03 	lds	r24, 0x0325
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	83 50       	subi	r24, 0x03	; 3
    11b8:	9d 4f       	sbci	r25, 0xFD	; 253
    11ba:	fc 01       	movw	r30, r24
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	2a 81       	ldd	r18, Y+2	; 0x02
    11c2:	3b 81       	ldd	r19, Y+3	; 0x03
    11c4:	fc 01       	movw	r30, r24
    11c6:	31 83       	std	Z+1, r19	; 0x01
    11c8:	20 83       	st	Z, r18
	gpios[inputsNumber]->pinPosition = pin;
    11ca:	80 91 25 03 	lds	r24, 0x0325
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	83 50       	subi	r24, 0x03	; 3
    11d8:	9d 4f       	sbci	r25, 0xFD	; 253
    11da:	fc 01       	movw	r30, r24
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	2c 81       	ldd	r18, Y+4	; 0x04
    11e2:	fc 01       	movw	r30, r24
    11e4:	22 83       	std	Z+2, r18	; 0x02
	for(i = 0; i < 3; i++)
    11e6:	19 82       	std	Y+1, r1	; 0x01
    11e8:	16 c0       	rjmp	.+44     	; 0x1216 <GPIO_PinRegister+0xce>
		gpios[inputsNumber]->buffer[i] = 0;
    11ea:	80 91 25 03 	lds	r24, 0x0325
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	83 50       	subi	r24, 0x03	; 3
    11f8:	9d 4f       	sbci	r25, 0xFD	; 253
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 81       	ld	r18, Z
    11fe:	31 81       	ldd	r19, Z+1	; 0x01
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	82 0f       	add	r24, r18
    1208:	93 1f       	adc	r25, r19
    120a:	03 96       	adiw	r24, 0x03	; 3
    120c:	fc 01       	movw	r30, r24
    120e:	10 82       	st	Z, r1
	if(gpios[inputsNumber] == NULL)
		return -1;

	gpios[inputsNumber]->baseAddress = baseAddress;
	gpios[inputsNumber]->pinPosition = pin;
	for(i = 0; i < 3; i++)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	38 f3       	brcs	.-50     	; 0x11ea <GPIO_PinRegister+0xa2>
		gpios[inputsNumber]->buffer[i] = 0;

	_MMIO_BYTE(baseAddress - 1) &= ~(1 << pin);
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	9b 81       	ldd	r25, Y+3	; 0x03
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	2a 81       	ldd	r18, Y+2	; 0x02
    1224:	3b 81       	ldd	r19, Y+3	; 0x03
    1226:	21 50       	subi	r18, 0x01	; 1
    1228:	31 09       	sbc	r19, r1
    122a:	f9 01       	movw	r30, r18
    122c:	20 81       	ld	r18, Z
    122e:	62 2f       	mov	r22, r18
    1230:	2c 81       	ldd	r18, Y+4	; 0x04
    1232:	42 2f       	mov	r20, r18
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_PinRegister+0xf8>
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	4a 95       	dec	r20
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_PinRegister+0xf4>
    1244:	20 95       	com	r18
    1246:	26 23       	and	r18, r22
    1248:	fc 01       	movw	r30, r24
    124a:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) |= (1 << pin);
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	fc 01       	movw	r30, r24
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_PinRegister+0x11e>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	2a 95       	dec	r18
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_PinRegister+0x11a>
    126a:	84 2b       	or	r24, r20
    126c:	28 2f       	mov	r18, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18

	i = inputsNumber;
    1276:	80 91 25 03 	lds	r24, 0x0325
    127a:	89 83       	std	Y+1, r24	; 0x01
	inputsNumber++;
    127c:	80 91 25 03 	lds	r24, 0x0325
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	80 93 25 03 	sts	0x0325, r24

	return i;
    1286:	89 81       	ldd	r24, Y+1	; 0x01
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <GPIO_OutputRegister>:

signed char GPIO_OutputRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_OutputRegister+0xa>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <GPIO_OutputRegister+0xc>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9b 83       	std	Y+3, r25	; 0x03
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	6c 83       	std	Y+4, r22	; 0x04
	if(outputsNumber >= MAX_OUTPUTS)
    12b0:	80 91 26 03 	lds	r24, 0x0326
    12b4:	8a 30       	cpi	r24, 0x0A	; 10
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <GPIO_OutputRegister+0x22>
		return -1;
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	74 c0       	rjmp	.+232    	; 0x13a4 <GPIO_OutputRegister+0x10a>

	unsigned char i;

	outputs[outputsNumber] = (GPIOOutData *)malloc(sizeof(GPIOOutData));
    12bc:	80 91 26 03 	lds	r24, 0x0326
    12c0:	08 2f       	mov	r16, r24
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <malloc>
    12cc:	9c 01       	movw	r18, r24
    12ce:	c8 01       	movw	r24, r16
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	8f 5e       	subi	r24, 0xEF	; 239
    12d6:	9c 4f       	sbci	r25, 0xFC	; 252
    12d8:	fc 01       	movw	r30, r24
    12da:	31 83       	std	Z+1, r19	; 0x01
    12dc:	20 83       	st	Z, r18
	if(outputs[outputsNumber] == NULL)
    12de:	80 91 26 03 	lds	r24, 0x0326
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	8f 5e       	subi	r24, 0xEF	; 239
    12ec:	9c 4f       	sbci	r25, 0xFC	; 252
    12ee:	fc 01       	movw	r30, r24
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	89 2b       	or	r24, r25
    12f6:	11 f4       	brne	.+4      	; 0x12fc <GPIO_OutputRegister+0x62>
		return -1;
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	54 c0       	rjmp	.+168    	; 0x13a4 <GPIO_OutputRegister+0x10a>

	outputs[outputsNumber]->baseAddress = baseAddress;
    12fc:	80 91 26 03 	lds	r24, 0x0326
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	8f 5e       	subi	r24, 0xEF	; 239
    130a:	9c 4f       	sbci	r25, 0xFC	; 252
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	2a 81       	ldd	r18, Y+2	; 0x02
    1314:	3b 81       	ldd	r19, Y+3	; 0x03
    1316:	fc 01       	movw	r30, r24
    1318:	31 83       	std	Z+1, r19	; 0x01
    131a:	20 83       	st	Z, r18
	outputs[outputsNumber]->pinPosition = pin;
    131c:	80 91 26 03 	lds	r24, 0x0326
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	8f 5e       	subi	r24, 0xEF	; 239
    132a:	9c 4f       	sbci	r25, 0xFC	; 252
    132c:	fc 01       	movw	r30, r24
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	fc 01       	movw	r30, r24
    1336:	22 83       	std	Z+2, r18	; 0x02

	_MMIO_BYTE(baseAddress - 1) |= (1 << pin);
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	2a 81       	ldd	r18, Y+2	; 0x02
    1340:	3b 81       	ldd	r19, Y+3	; 0x03
    1342:	21 50       	subi	r18, 0x01	; 1
    1344:	31 09       	sbc	r19, r1
    1346:	f9 01       	movw	r30, r18
    1348:	20 81       	ld	r18, Z
    134a:	62 2f       	mov	r22, r18
    134c:	2c 81       	ldd	r18, Y+4	; 0x04
    134e:	42 2f       	mov	r20, r18
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <GPIO_OutputRegister+0xc2>
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	4a 95       	dec	r20
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <GPIO_OutputRegister+0xbe>
    1360:	26 2b       	or	r18, r22
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) &= ~(1 << pin);
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_OutputRegister+0xe6>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	2a 95       	dec	r18
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_OutputRegister+0xe2>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	28 2f       	mov	r18, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	fc 01       	movw	r30, r24
    1390:	20 83       	st	Z, r18

	i = outputsNumber;
    1392:	80 91 26 03 	lds	r24, 0x0326
    1396:	89 83       	std	Y+1, r24	; 0x01
	outputsNumber++;
    1398:	80 91 26 03 	lds	r24, 0x0326
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	80 93 26 03 	sts	0x0326, r24

	return i;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <GPIO_OutputSet>:

signed char GPIO_OutputSet(unsigned char outHandler)
{
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	1f 92       	push	r1
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    13c2:	80 91 26 03 	lds	r24, 0x0326
    13c6:	99 81       	ldd	r25, Y+1	; 0x01
    13c8:	98 17       	cp	r25, r24
    13ca:	10 f0       	brcs	.+4      	; 0x13d0 <GPIO_OutputSet+0x1a>
		return -1;
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	2a c0       	rjmp	.+84     	; 0x1424 <GPIO_OutputSet+0x6e>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) |= (1 << outputs[outHandler]->pinPosition);
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	8f 5e       	subi	r24, 0xEF	; 239
    13dc:	9c 4f       	sbci	r25, 0xFC	; 252
    13de:	fc 01       	movw	r30, r24
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	fc 01       	movw	r30, r24
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	ac 01       	movw	r20, r24
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <GPIO_OutputSet+0x42>
    13f4:	44 0f       	add	r20, r20
    13f6:	55 1f       	adc	r21, r21
    13f8:	2a 95       	dec	r18
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <GPIO_OutputSet+0x3e>
    13fc:	9a 01       	movw	r18, r20
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	8f 5e       	subi	r24, 0xEF	; 239
    140a:	9c 4f       	sbci	r25, 0xFC	; 252
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	fc 01       	movw	r30, r24
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	fc 01       	movw	r30, r24
    141a:	40 81       	ld	r20, Z
    141c:	24 2b       	or	r18, r20
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18

	return 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
}
    1424:	0f 90       	pop	r0
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <GPIO_OutputReset>:

signed char GPIO_OutputReset(unsigned char outHandler)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	1f 92       	push	r1
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    1438:	80 91 26 03 	lds	r24, 0x0326
    143c:	99 81       	ldd	r25, Y+1	; 0x01
    143e:	98 17       	cp	r25, r24
    1440:	10 f0       	brcs	.+4      	; 0x1446 <GPIO_OutputReset+0x1a>
		return -1;
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	2b c0       	rjmp	.+86     	; 0x149c <GPIO_OutputReset+0x70>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) &= ~(1 << outputs[outHandler]->pinPosition);
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	8f 5e       	subi	r24, 0xEF	; 239
    1452:	9c 4f       	sbci	r25, 0xFC	; 252
    1454:	fc 01       	movw	r30, r24
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	fc 01       	movw	r30, r24
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_OutputReset+0x40>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	2a 95       	dec	r18
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_OutputReset+0x3c>
    1470:	9c 01       	movw	r18, r24
    1472:	20 95       	com	r18
    1474:	30 95       	com	r19
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	8f 5e       	subi	r24, 0xEF	; 239
    1482:	9c 4f       	sbci	r25, 0xFC	; 252
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	fc 01       	movw	r30, r24
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	fc 01       	movw	r30, r24
    1492:	40 81       	ld	r20, Z
    1494:	24 23       	and	r18, r20
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18

	return 0;
    149a:	80 e0       	ldi	r24, 0x00	; 0
}
    149c:	0f 90       	pop	r0
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <GPIO_PinRead>:

unsigned char GPIO_PinRead(unsigned char pinHandler)
{
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	1f 92       	push	r1
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
	return !( (gpios[pinHandler]->buffer[0]) | (gpios[pinHandler]->buffer[1]) | (gpios[pinHandler]->buffer[2]) );
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	83 50       	subi	r24, 0x03	; 3
    14bc:	9d 4f       	sbci	r25, 0xFD	; 253
    14be:	fc 01       	movw	r30, r24
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	fc 01       	movw	r30, r24
    14c6:	23 81       	ldd	r18, Z+3	; 0x03
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	83 50       	subi	r24, 0x03	; 3
    14d4:	9d 4f       	sbci	r25, 0xFD	; 253
    14d6:	fc 01       	movw	r30, r24
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	fc 01       	movw	r30, r24
    14de:	84 81       	ldd	r24, Z+4	; 0x04
    14e0:	28 2b       	or	r18, r24
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	83 50       	subi	r24, 0x03	; 3
    14ee:	9d 4f       	sbci	r25, 0xFD	; 253
    14f0:	fc 01       	movw	r30, r24
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	fc 01       	movw	r30, r24
    14f8:	85 81       	ldd	r24, Z+5	; 0x05
    14fa:	92 2f       	mov	r25, r18
    14fc:	98 2b       	or	r25, r24
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	99 23       	and	r25, r25
    1502:	09 f0       	breq	.+2      	; 0x1506 <GPIO_PinRead+0x62>
    1504:	80 e0       	ldi	r24, 0x00	; 0
}
    1506:	0f 90       	pop	r0
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <GPIO_ReadFromRegister>:

unsigned char GPIO_ReadFromRegister(unsigned char pinHandler)
{
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	00 d0       	rcall	.+0      	; 0x1514 <GPIO_ReadFromRegister+0x6>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char state = 0;
    151a:	19 82       	std	Y+1, r1	; 0x01

	state = ((_MMIO_BYTE(gpios[pinHandler]->baseAddress - 2)) >> (gpios[pinHandler]->pinPosition)) & 0x01;
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	83 50       	subi	r24, 0x03	; 3
    1528:	9d 4f       	sbci	r25, 0xFD	; 253
    152a:	fc 01       	movw	r30, r24
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	fc 01       	movw	r30, r24
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	02 97       	sbiw	r24, 0x02	; 2
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	2a 81       	ldd	r18, Y+2	; 0x02
    1542:	22 2f       	mov	r18, r18
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	23 50       	subi	r18, 0x03	; 3
    154c:	3d 4f       	sbci	r19, 0xFD	; 253
    154e:	f9 01       	movw	r30, r18
    1550:	20 81       	ld	r18, Z
    1552:	31 81       	ldd	r19, Z+1	; 0x01
    1554:	f9 01       	movw	r30, r18
    1556:	22 81       	ldd	r18, Z+2	; 0x02
    1558:	22 2f       	mov	r18, r18
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_ReadFromRegister+0x54>
    155e:	95 95       	asr	r25
    1560:	87 95       	ror	r24
    1562:	2a 95       	dec	r18
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_ReadFromRegister+0x50>
    1566:	81 70       	andi	r24, 0x01	; 1
    1568:	89 83       	std	Y+1, r24	; 0x01

	return state;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <fillDebaunsingData>:

void fillDebaunsingData(void)
{
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	1f 92       	push	r1
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	static char j = 0;

	if(++j >= 3)
    1588:	80 91 27 03 	lds	r24, 0x0327
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	80 93 27 03 	sts	0x0327, r24
    1592:	80 91 27 03 	lds	r24, 0x0327
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	10 f0       	brcs	.+4      	; 0x159e <fillDebaunsingData+0x28>
		j = 0;
    159a:	10 92 27 03 	sts	0x0327, r1

	for(i = 0; i < inputsNumber; ++i)
    159e:	19 82       	std	Y+1, r1	; 0x01
    15a0:	1b c0       	rjmp	.+54     	; 0x15d8 <fillDebaunsingData+0x62>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	83 50       	subi	r24, 0x03	; 3
    15ae:	9d 4f       	sbci	r25, 0xFD	; 253
    15b0:	fc 01       	movw	r30, r24
    15b2:	e0 80       	ld	r14, Z
    15b4:	f1 80       	ldd	r15, Z+1	; 0x01
    15b6:	80 91 27 03 	lds	r24, 0x0327
    15ba:	08 2f       	mov	r16, r24
    15bc:	10 e0       	ldi	r17, 0x00	; 0
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	0e 94 87 0a 	call	0x150e	; 0x150e <GPIO_ReadFromRegister>
    15c4:	28 2f       	mov	r18, r24
    15c6:	c7 01       	movw	r24, r14
    15c8:	80 0f       	add	r24, r16
    15ca:	91 1f       	adc	r25, r17
    15cc:	03 96       	adiw	r24, 0x03	; 3
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18
	static char j = 0;

	if(++j >= 3)
		j = 0;

	for(i = 0; i < inputsNumber; ++i)
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	80 91 25 03 	lds	r24, 0x0325
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	98 17       	cp	r25, r24
    15e0:	00 f3       	brcs	.-64     	; 0x15a2 <fillDebaunsingData+0x2c>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
}
    15e2:	0f 90       	pop	r0
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	08 95       	ret

000015f2 <servo_init>:

void servo_init()
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0;
    15fa:	82 eb       	ldi	r24, 0xB2	; 178
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	10 82       	st	Z, r1

	TCCR2A |= (1 << WGM20);                             /* Fast PWM mode */
    1602:	80 eb       	ldi	r24, 0xB0	; 176
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	20 eb       	ldi	r18, 0xB0	; 176
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	20 64       	ori	r18, 0x40	; 64
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
	TCCR2A |= (1 << WGM21);                       /* Fast PWM mode, pt.2 */
    1614:	80 eb       	ldi	r24, 0xB0	; 176
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	20 eb       	ldi	r18, 0xB0	; 176
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	f9 01       	movw	r30, r18
    161e:	20 81       	ld	r18, Z
    1620:	28 60       	ori	r18, 0x08	; 8
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
	TCCR2A |= (1 << CS21);                     /* PWM Freq = F_CPU/8/256 */
    1626:	80 eb       	ldi	r24, 0xB0	; 176
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	20 eb       	ldi	r18, 0xB0	; 176
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	f9 01       	movw	r30, r18
    1630:	20 81       	ld	r18, Z
    1632:	22 60       	ori	r18, 0x02	; 2
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
	TCCR2A |= (1 << COM2A1);                      /* PWM output on OCR2A */
    1638:	80 eb       	ldi	r24, 0xB0	; 176
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	20 eb       	ldi	r18, 0xB0	; 176
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	f9 01       	movw	r30, r18
    1642:	20 81       	ld	r18, Z
    1644:	20 62       	ori	r18, 0x20	; 32
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18

}
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <Timer_Init>:
void Timer_Init(unsigned int freq)
{
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	00 d0       	rcall	.+0      	; 0x165a <Timer_Init+0xa>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1662:	80 e8       	ldi	r24, 0x80	; 128
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	fc 01       	movw	r30, r24
    1668:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    166a:	81 e8       	ldi	r24, 0x81	; 129
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	29 e0       	ldi	r18, 0x09	; 9
    1670:	fc 01       	movw	r30, r24
    1672:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / freq + 0.5;
    1674:	08 e8       	ldi	r16, 0x88	; 136
    1676:	10 e0       	ldi	r17, 0x00	; 0
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	cc 01       	movw	r24, r24
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatunsisf>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9c 01       	movw	r18, r24
    1690:	ad 01       	movw	r20, r26
    1692:	60 e8       	ldi	r22, 0x80	; 128
    1694:	76 e9       	ldi	r23, 0x96	; 150
    1696:	88 e1       	ldi	r24, 0x18	; 24
    1698:	9b e4       	ldi	r25, 0x4B	; 75
    169a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__addsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	f8 01       	movw	r30, r16
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    16c8:	8f e6       	ldi	r24, 0x6F	; 111
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	22 e0       	ldi	r18, 0x02	; 2
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18

	SREG |= 0x80;
    16d2:	8f e5       	ldi	r24, 0x5F	; 95
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	2f e5       	ldi	r18, 0x5F	; 95
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	f9 01       	movw	r30, r18
    16dc:	20 81       	ld	r18, Z
    16de:	20 68       	ori	r18, 0x80	; 128
    16e0:	fc 01       	movw	r30, r24
    16e2:	20 83       	st	Z, r18
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	08 95       	ret

000016f2 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	00 90 5f 00 	lds	r0, 0x005F
    16fa:	0f 92       	push	r0
    16fc:	11 24       	eor	r1, r1
    16fe:	00 90 5b 00 	lds	r0, 0x005B
    1702:	0f 92       	push	r0
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	fillDebaunsingData();
    1724:	0e 94 bb 0a 	call	0x1576	; 0x1576 <fillDebaunsingData>
    #if USE_TIMER_HOOK == 1
    Timer_Hook();
    #endif // USE_TIMER_HOOK
}
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	00 92 5b 00 	sts	0x005B, r0
    174a:	0f 90       	pop	r0
    174c:	00 92 5f 00 	sts	0x005F, r0
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <systemInit>:

void systemInit(void)
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	Timer_Init(1000);
    175e:	88 ee       	ldi	r24, 0xE8	; 232
    1760:	93 e0       	ldi	r25, 0x03	; 3
    1762:	0e 94 28 0b 	call	0x1650	; 0x1650 <Timer_Init>

	//servo_init();

	DDRB |= (1 << PINB4);
    1766:	84 e2       	ldi	r24, 0x24	; 36
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	24 e2       	ldi	r18, 0x24	; 36
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	f9 01       	movw	r30, r18
    1770:	20 81       	ld	r18, Z
    1772:	20 61       	ori	r18, 0x10	; 16
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
	chipSelect = GPIO_OutputRegister(GPIOF_BASE, 7);
    1778:	67 e0       	ldi	r22, 0x07	; 7
    177a:	81 e3       	ldi	r24, 0x31	; 49
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 4d 09 	call	0x129a	; 0x129a <GPIO_OutputRegister>
    1782:	80 93 28 03 	sts	0x0328, r24
	INA1 = GPIO_OutputRegister(GPIOF_BASE, 6);
    1786:	66 e0       	ldi	r22, 0x06	; 6
    1788:	81 e3       	ldi	r24, 0x31	; 49
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 4d 09 	call	0x129a	; 0x129a <GPIO_OutputRegister>
    1790:	80 93 29 03 	sts	0x0329, r24
	INB1 = GPIO_OutputRegister(GPIOF_BASE, 5);
    1794:	65 e0       	ldi	r22, 0x05	; 5
    1796:	81 e3       	ldi	r24, 0x31	; 49
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 4d 09 	call	0x129a	; 0x129a <GPIO_OutputRegister>
    179e:	80 93 2c 03 	sts	0x032C, r24
	PWM = GPIO_OutputRegister(GPIOE_BASE, 3);
    17a2:	63 e0       	ldi	r22, 0x03	; 3
    17a4:	8e e2       	ldi	r24, 0x2E	; 46
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 4d 09 	call	0x129a	; 0x129a <GPIO_OutputRegister>
    17ac:	80 93 2a 03 	sts	0x032A, r24
	pinE4 = GPIO_OutputRegister(GPIOE_BASE, 4);
    17b0:	64 e0       	ldi	r22, 0x04	; 4
    17b2:	8e e2       	ldi	r24, 0x2E	; 46
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 4d 09 	call	0x129a	; 0x129a <GPIO_OutputRegister>
    17ba:	80 93 2b 03 	sts	0x032B, r24
	pinE5 = GPIO_OutputRegister(GPIOE_BASE, 5);
    17be:	65 e0       	ldi	r22, 0x05	; 5
    17c0:	8e e2       	ldi	r24, 0x2E	; 46
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 4d 09 	call	0x129a	; 0x129a <GPIO_OutputRegister>
    17c8:	80 93 2d 03 	sts	0x032D, r24

}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <__subsf3>:
    17d2:	50 58       	subi	r21, 0x80	; 128

000017d4 <__addsf3>:
    17d4:	bb 27       	eor	r27, r27
    17d6:	aa 27       	eor	r26, r26
    17d8:	0e 94 01 0c 	call	0x1802	; 0x1802 <__addsf3x>
    17dc:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_round>
    17e0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscA>
    17e4:	38 f0       	brcs	.+14     	; 0x17f4 <__addsf3+0x20>
    17e6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fp_pscB>
    17ea:	20 f0       	brcs	.+8      	; 0x17f4 <__addsf3+0x20>
    17ec:	39 f4       	brne	.+14     	; 0x17fc <__addsf3+0x28>
    17ee:	9f 3f       	cpi	r25, 0xFF	; 255
    17f0:	19 f4       	brne	.+6      	; 0x17f8 <__addsf3+0x24>
    17f2:	26 f4       	brtc	.+8      	; 0x17fc <__addsf3+0x28>
    17f4:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_nan>
    17f8:	0e f4       	brtc	.+2      	; 0x17fc <__addsf3+0x28>
    17fa:	e0 95       	com	r30
    17fc:	e7 fb       	bst	r30, 7
    17fe:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>

00001802 <__addsf3x>:
    1802:	e9 2f       	mov	r30, r25
    1804:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_split3>
    1808:	58 f3       	brcs	.-42     	; 0x17e0 <__addsf3+0xc>
    180a:	ba 17       	cp	r27, r26
    180c:	62 07       	cpc	r22, r18
    180e:	73 07       	cpc	r23, r19
    1810:	84 07       	cpc	r24, r20
    1812:	95 07       	cpc	r25, r21
    1814:	20 f0       	brcs	.+8      	; 0x181e <__addsf3x+0x1c>
    1816:	79 f4       	brne	.+30     	; 0x1836 <__addsf3x+0x34>
    1818:	a6 f5       	brtc	.+104    	; 0x1882 <__addsf3x+0x80>
    181a:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_zero>
    181e:	0e f4       	brtc	.+2      	; 0x1822 <__addsf3x+0x20>
    1820:	e0 95       	com	r30
    1822:	0b 2e       	mov	r0, r27
    1824:	ba 2f       	mov	r27, r26
    1826:	a0 2d       	mov	r26, r0
    1828:	0b 01       	movw	r0, r22
    182a:	b9 01       	movw	r22, r18
    182c:	90 01       	movw	r18, r0
    182e:	0c 01       	movw	r0, r24
    1830:	ca 01       	movw	r24, r20
    1832:	a0 01       	movw	r20, r0
    1834:	11 24       	eor	r1, r1
    1836:	ff 27       	eor	r31, r31
    1838:	59 1b       	sub	r21, r25
    183a:	99 f0       	breq	.+38     	; 0x1862 <__addsf3x+0x60>
    183c:	59 3f       	cpi	r21, 0xF9	; 249
    183e:	50 f4       	brcc	.+20     	; 0x1854 <__addsf3x+0x52>
    1840:	50 3e       	cpi	r21, 0xE0	; 224
    1842:	68 f1       	brcs	.+90     	; 0x189e <__addsf3x+0x9c>
    1844:	1a 16       	cp	r1, r26
    1846:	f0 40       	sbci	r31, 0x00	; 0
    1848:	a2 2f       	mov	r26, r18
    184a:	23 2f       	mov	r18, r19
    184c:	34 2f       	mov	r19, r20
    184e:	44 27       	eor	r20, r20
    1850:	58 5f       	subi	r21, 0xF8	; 248
    1852:	f3 cf       	rjmp	.-26     	; 0x183a <__addsf3x+0x38>
    1854:	46 95       	lsr	r20
    1856:	37 95       	ror	r19
    1858:	27 95       	ror	r18
    185a:	a7 95       	ror	r26
    185c:	f0 40       	sbci	r31, 0x00	; 0
    185e:	53 95       	inc	r21
    1860:	c9 f7       	brne	.-14     	; 0x1854 <__addsf3x+0x52>
    1862:	7e f4       	brtc	.+30     	; 0x1882 <__addsf3x+0x80>
    1864:	1f 16       	cp	r1, r31
    1866:	ba 0b       	sbc	r27, r26
    1868:	62 0b       	sbc	r22, r18
    186a:	73 0b       	sbc	r23, r19
    186c:	84 0b       	sbc	r24, r20
    186e:	ba f0       	brmi	.+46     	; 0x189e <__addsf3x+0x9c>
    1870:	91 50       	subi	r25, 0x01	; 1
    1872:	a1 f0       	breq	.+40     	; 0x189c <__addsf3x+0x9a>
    1874:	ff 0f       	add	r31, r31
    1876:	bb 1f       	adc	r27, r27
    1878:	66 1f       	adc	r22, r22
    187a:	77 1f       	adc	r23, r23
    187c:	88 1f       	adc	r24, r24
    187e:	c2 f7       	brpl	.-16     	; 0x1870 <__addsf3x+0x6e>
    1880:	0e c0       	rjmp	.+28     	; 0x189e <__addsf3x+0x9c>
    1882:	ba 0f       	add	r27, r26
    1884:	62 1f       	adc	r22, r18
    1886:	73 1f       	adc	r23, r19
    1888:	84 1f       	adc	r24, r20
    188a:	48 f4       	brcc	.+18     	; 0x189e <__addsf3x+0x9c>
    188c:	87 95       	ror	r24
    188e:	77 95       	ror	r23
    1890:	67 95       	ror	r22
    1892:	b7 95       	ror	r27
    1894:	f7 95       	ror	r31
    1896:	9e 3f       	cpi	r25, 0xFE	; 254
    1898:	08 f0       	brcs	.+2      	; 0x189c <__addsf3x+0x9a>
    189a:	b0 cf       	rjmp	.-160    	; 0x17fc <__addsf3+0x28>
    189c:	93 95       	inc	r25
    189e:	88 0f       	add	r24, r24
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <__addsf3x+0xa2>
    18a2:	99 27       	eor	r25, r25
    18a4:	ee 0f       	add	r30, r30
    18a6:	97 95       	ror	r25
    18a8:	87 95       	ror	r24
    18aa:	08 95       	ret

000018ac <__cmpsf2>:
    18ac:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fp_cmp>
    18b0:	08 f4       	brcc	.+2      	; 0x18b4 <__cmpsf2+0x8>
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	08 95       	ret

000018b6 <__divsf3>:
    18b6:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divsf3x>
    18ba:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_round>
    18be:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fp_pscB>
    18c2:	58 f0       	brcs	.+22     	; 0x18da <__divsf3+0x24>
    18c4:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscA>
    18c8:	40 f0       	brcs	.+16     	; 0x18da <__divsf3+0x24>
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <__divsf3+0x20>
    18cc:	5f 3f       	cpi	r21, 0xFF	; 255
    18ce:	29 f0       	breq	.+10     	; 0x18da <__divsf3+0x24>
    18d0:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    18d4:	51 11       	cpse	r21, r1
    18d6:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>
    18da:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_nan>

000018de <__divsf3x>:
    18de:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_split3>
    18e2:	68 f3       	brcs	.-38     	; 0x18be <__divsf3+0x8>

000018e4 <__divsf3_pse>:
    18e4:	99 23       	and	r25, r25
    18e6:	b1 f3       	breq	.-20     	; 0x18d4 <__divsf3+0x1e>
    18e8:	55 23       	and	r21, r21
    18ea:	91 f3       	breq	.-28     	; 0x18d0 <__divsf3+0x1a>
    18ec:	95 1b       	sub	r25, r21
    18ee:	55 0b       	sbc	r21, r21
    18f0:	bb 27       	eor	r27, r27
    18f2:	aa 27       	eor	r26, r26
    18f4:	62 17       	cp	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	84 07       	cpc	r24, r20
    18fa:	38 f0       	brcs	.+14     	; 0x190a <__divsf3_pse+0x26>
    18fc:	9f 5f       	subi	r25, 0xFF	; 255
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	44 1f       	adc	r20, r20
    1906:	aa 1f       	adc	r26, r26
    1908:	a9 f3       	breq	.-22     	; 0x18f4 <__divsf3_pse+0x10>
    190a:	35 d0       	rcall	.+106    	; 0x1976 <__divsf3_pse+0x92>
    190c:	0e 2e       	mov	r0, r30
    190e:	3a f0       	brmi	.+14     	; 0x191e <__divsf3_pse+0x3a>
    1910:	e0 e8       	ldi	r30, 0x80	; 128
    1912:	32 d0       	rcall	.+100    	; 0x1978 <__divsf3_pse+0x94>
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	50 40       	sbci	r21, 0x00	; 0
    1918:	e6 95       	lsr	r30
    191a:	00 1c       	adc	r0, r0
    191c:	ca f7       	brpl	.-14     	; 0x1910 <__divsf3_pse+0x2c>
    191e:	2b d0       	rcall	.+86     	; 0x1976 <__divsf3_pse+0x92>
    1920:	fe 2f       	mov	r31, r30
    1922:	29 d0       	rcall	.+82     	; 0x1976 <__divsf3_pse+0x92>
    1924:	66 0f       	add	r22, r22
    1926:	77 1f       	adc	r23, r23
    1928:	88 1f       	adc	r24, r24
    192a:	bb 1f       	adc	r27, r27
    192c:	26 17       	cp	r18, r22
    192e:	37 07       	cpc	r19, r23
    1930:	48 07       	cpc	r20, r24
    1932:	ab 07       	cpc	r26, r27
    1934:	b0 e8       	ldi	r27, 0x80	; 128
    1936:	09 f0       	breq	.+2      	; 0x193a <__divsf3_pse+0x56>
    1938:	bb 0b       	sbc	r27, r27
    193a:	80 2d       	mov	r24, r0
    193c:	bf 01       	movw	r22, r30
    193e:	ff 27       	eor	r31, r31
    1940:	93 58       	subi	r25, 0x83	; 131
    1942:	5f 4f       	sbci	r21, 0xFF	; 255
    1944:	3a f0       	brmi	.+14     	; 0x1954 <__divsf3_pse+0x70>
    1946:	9e 3f       	cpi	r25, 0xFE	; 254
    1948:	51 05       	cpc	r21, r1
    194a:	78 f0       	brcs	.+30     	; 0x196a <__divsf3_pse+0x86>
    194c:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    1950:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>
    1954:	5f 3f       	cpi	r21, 0xFF	; 255
    1956:	e4 f3       	brlt	.-8      	; 0x1950 <__divsf3_pse+0x6c>
    1958:	98 3e       	cpi	r25, 0xE8	; 232
    195a:	d4 f3       	brlt	.-12     	; 0x1950 <__divsf3_pse+0x6c>
    195c:	86 95       	lsr	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	b7 95       	ror	r27
    1964:	f7 95       	ror	r31
    1966:	9f 5f       	subi	r25, 0xFF	; 255
    1968:	c9 f7       	brne	.-14     	; 0x195c <__divsf3_pse+0x78>
    196a:	88 0f       	add	r24, r24
    196c:	91 1d       	adc	r25, r1
    196e:	96 95       	lsr	r25
    1970:	87 95       	ror	r24
    1972:	97 f9       	bld	r25, 7
    1974:	08 95       	ret
    1976:	e1 e0       	ldi	r30, 0x01	; 1
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	bb 1f       	adc	r27, r27
    1980:	62 17       	cp	r22, r18
    1982:	73 07       	cpc	r23, r19
    1984:	84 07       	cpc	r24, r20
    1986:	ba 07       	cpc	r27, r26
    1988:	20 f0       	brcs	.+8      	; 0x1992 <__divsf3_pse+0xae>
    198a:	62 1b       	sub	r22, r18
    198c:	73 0b       	sbc	r23, r19
    198e:	84 0b       	sbc	r24, r20
    1990:	ba 0b       	sbc	r27, r26
    1992:	ee 1f       	adc	r30, r30
    1994:	88 f7       	brcc	.-30     	; 0x1978 <__divsf3_pse+0x94>
    1996:	e0 95       	com	r30
    1998:	08 95       	ret

0000199a <__fixunssfsi>:
    199a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_splitA>
    199e:	88 f0       	brcs	.+34     	; 0x19c2 <__fixunssfsi+0x28>
    19a0:	9f 57       	subi	r25, 0x7F	; 127
    19a2:	98 f0       	brcs	.+38     	; 0x19ca <__fixunssfsi+0x30>
    19a4:	b9 2f       	mov	r27, r25
    19a6:	99 27       	eor	r25, r25
    19a8:	b7 51       	subi	r27, 0x17	; 23
    19aa:	b0 f0       	brcs	.+44     	; 0x19d8 <__fixunssfsi+0x3e>
    19ac:	e1 f0       	breq	.+56     	; 0x19e6 <__fixunssfsi+0x4c>
    19ae:	66 0f       	add	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	88 1f       	adc	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	1a f0       	brmi	.+6      	; 0x19be <__fixunssfsi+0x24>
    19b8:	ba 95       	dec	r27
    19ba:	c9 f7       	brne	.-14     	; 0x19ae <__fixunssfsi+0x14>
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <__fixunssfsi+0x4c>
    19be:	b1 30       	cpi	r27, 0x01	; 1
    19c0:	91 f0       	breq	.+36     	; 0x19e6 <__fixunssfsi+0x4c>
    19c2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fp_zero>
    19c6:	b1 e0       	ldi	r27, 0x01	; 1
    19c8:	08 95       	ret
    19ca:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_zero>
    19ce:	67 2f       	mov	r22, r23
    19d0:	78 2f       	mov	r23, r24
    19d2:	88 27       	eor	r24, r24
    19d4:	b8 5f       	subi	r27, 0xF8	; 248
    19d6:	39 f0       	breq	.+14     	; 0x19e6 <__fixunssfsi+0x4c>
    19d8:	b9 3f       	cpi	r27, 0xF9	; 249
    19da:	cc f3       	brlt	.-14     	; 0x19ce <__fixunssfsi+0x34>
    19dc:	86 95       	lsr	r24
    19de:	77 95       	ror	r23
    19e0:	67 95       	ror	r22
    19e2:	b3 95       	inc	r27
    19e4:	d9 f7       	brne	.-10     	; 0x19dc <__fixunssfsi+0x42>
    19e6:	3e f4       	brtc	.+14     	; 0x19f6 <__fixunssfsi+0x5c>
    19e8:	90 95       	com	r25
    19ea:	80 95       	com	r24
    19ec:	70 95       	com	r23
    19ee:	61 95       	neg	r22
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	8f 4f       	sbci	r24, 0xFF	; 255
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	08 95       	ret

000019f8 <__floatunsisf>:
    19f8:	e8 94       	clt
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <__floatsisf+0x12>

000019fc <__floatsisf>:
    19fc:	97 fb       	bst	r25, 7
    19fe:	3e f4       	brtc	.+14     	; 0x1a0e <__floatsisf+0x12>
    1a00:	90 95       	com	r25
    1a02:	80 95       	com	r24
    1a04:	70 95       	com	r23
    1a06:	61 95       	neg	r22
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	99 23       	and	r25, r25
    1a10:	a9 f0       	breq	.+42     	; 0x1a3c <__floatsisf+0x40>
    1a12:	f9 2f       	mov	r31, r25
    1a14:	96 e9       	ldi	r25, 0x96	; 150
    1a16:	bb 27       	eor	r27, r27
    1a18:	93 95       	inc	r25
    1a1a:	f6 95       	lsr	r31
    1a1c:	87 95       	ror	r24
    1a1e:	77 95       	ror	r23
    1a20:	67 95       	ror	r22
    1a22:	b7 95       	ror	r27
    1a24:	f1 11       	cpse	r31, r1
    1a26:	f8 cf       	rjmp	.-16     	; 0x1a18 <__floatsisf+0x1c>
    1a28:	fa f4       	brpl	.+62     	; 0x1a68 <__floatsisf+0x6c>
    1a2a:	bb 0f       	add	r27, r27
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <__floatsisf+0x36>
    1a2e:	60 ff       	sbrs	r22, 0
    1a30:	1b c0       	rjmp	.+54     	; 0x1a68 <__floatsisf+0x6c>
    1a32:	6f 5f       	subi	r22, 0xFF	; 255
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	8f 4f       	sbci	r24, 0xFF	; 255
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	16 c0       	rjmp	.+44     	; 0x1a68 <__floatsisf+0x6c>
    1a3c:	88 23       	and	r24, r24
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <__floatsisf+0x48>
    1a40:	96 e9       	ldi	r25, 0x96	; 150
    1a42:	11 c0       	rjmp	.+34     	; 0x1a66 <__floatsisf+0x6a>
    1a44:	77 23       	and	r23, r23
    1a46:	21 f0       	breq	.+8      	; 0x1a50 <__floatsisf+0x54>
    1a48:	9e e8       	ldi	r25, 0x8E	; 142
    1a4a:	87 2f       	mov	r24, r23
    1a4c:	76 2f       	mov	r23, r22
    1a4e:	05 c0       	rjmp	.+10     	; 0x1a5a <__floatsisf+0x5e>
    1a50:	66 23       	and	r22, r22
    1a52:	71 f0       	breq	.+28     	; 0x1a70 <__floatsisf+0x74>
    1a54:	96 e8       	ldi	r25, 0x86	; 134
    1a56:	86 2f       	mov	r24, r22
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	2a f0       	brmi	.+10     	; 0x1a68 <__floatsisf+0x6c>
    1a5e:	9a 95       	dec	r25
    1a60:	66 0f       	add	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	da f7       	brpl	.-10     	; 0x1a5e <__floatsisf+0x62>
    1a68:	88 0f       	add	r24, r24
    1a6a:	96 95       	lsr	r25
    1a6c:	87 95       	ror	r24
    1a6e:	97 f9       	bld	r25, 7
    1a70:	08 95       	ret

00001a72 <__fp_cmp>:
    1a72:	99 0f       	add	r25, r25
    1a74:	00 08       	sbc	r0, r0
    1a76:	55 0f       	add	r21, r21
    1a78:	aa 0b       	sbc	r26, r26
    1a7a:	e0 e8       	ldi	r30, 0x80	; 128
    1a7c:	fe ef       	ldi	r31, 0xFE	; 254
    1a7e:	16 16       	cp	r1, r22
    1a80:	17 06       	cpc	r1, r23
    1a82:	e8 07       	cpc	r30, r24
    1a84:	f9 07       	cpc	r31, r25
    1a86:	c0 f0       	brcs	.+48     	; 0x1ab8 <__fp_cmp+0x46>
    1a88:	12 16       	cp	r1, r18
    1a8a:	13 06       	cpc	r1, r19
    1a8c:	e4 07       	cpc	r30, r20
    1a8e:	f5 07       	cpc	r31, r21
    1a90:	98 f0       	brcs	.+38     	; 0x1ab8 <__fp_cmp+0x46>
    1a92:	62 1b       	sub	r22, r18
    1a94:	73 0b       	sbc	r23, r19
    1a96:	84 0b       	sbc	r24, r20
    1a98:	95 0b       	sbc	r25, r21
    1a9a:	39 f4       	brne	.+14     	; 0x1aaa <__fp_cmp+0x38>
    1a9c:	0a 26       	eor	r0, r26
    1a9e:	61 f0       	breq	.+24     	; 0x1ab8 <__fp_cmp+0x46>
    1aa0:	23 2b       	or	r18, r19
    1aa2:	24 2b       	or	r18, r20
    1aa4:	25 2b       	or	r18, r21
    1aa6:	21 f4       	brne	.+8      	; 0x1ab0 <__fp_cmp+0x3e>
    1aa8:	08 95       	ret
    1aaa:	0a 26       	eor	r0, r26
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <__fp_cmp+0x3e>
    1aae:	a1 40       	sbci	r26, 0x01	; 1
    1ab0:	a6 95       	lsr	r26
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	81 1d       	adc	r24, r1
    1ab6:	81 1d       	adc	r24, r1
    1ab8:	08 95       	ret

00001aba <__fp_inf>:
    1aba:	97 f9       	bld	r25, 7
    1abc:	9f 67       	ori	r25, 0x7F	; 127
    1abe:	80 e8       	ldi	r24, 0x80	; 128
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	08 95       	ret

00001ac6 <__fp_nan>:
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	80 ec       	ldi	r24, 0xC0	; 192
    1aca:	08 95       	ret

00001acc <__fp_pscA>:
    1acc:	00 24       	eor	r0, r0
    1ace:	0a 94       	dec	r0
    1ad0:	16 16       	cp	r1, r22
    1ad2:	17 06       	cpc	r1, r23
    1ad4:	18 06       	cpc	r1, r24
    1ad6:	09 06       	cpc	r0, r25
    1ad8:	08 95       	ret

00001ada <__fp_pscB>:
    1ada:	00 24       	eor	r0, r0
    1adc:	0a 94       	dec	r0
    1ade:	12 16       	cp	r1, r18
    1ae0:	13 06       	cpc	r1, r19
    1ae2:	14 06       	cpc	r1, r20
    1ae4:	05 06       	cpc	r0, r21
    1ae6:	08 95       	ret

00001ae8 <__fp_round>:
    1ae8:	09 2e       	mov	r0, r25
    1aea:	03 94       	inc	r0
    1aec:	00 0c       	add	r0, r0
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <__fp_round+0xc>
    1af0:	88 23       	and	r24, r24
    1af2:	52 f0       	brmi	.+20     	; 0x1b08 <__fp_round+0x20>
    1af4:	bb 0f       	add	r27, r27
    1af6:	40 f4       	brcc	.+16     	; 0x1b08 <__fp_round+0x20>
    1af8:	bf 2b       	or	r27, r31
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <__fp_round+0x18>
    1afc:	60 ff       	sbrs	r22, 0
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <__fp_round+0x20>
    1b00:	6f 5f       	subi	r22, 0xFF	; 255
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	8f 4f       	sbci	r24, 0xFF	; 255
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	08 95       	ret

00001b0a <__fp_split3>:
    1b0a:	57 fd       	sbrc	r21, 7
    1b0c:	90 58       	subi	r25, 0x80	; 128
    1b0e:	44 0f       	add	r20, r20
    1b10:	55 1f       	adc	r21, r21
    1b12:	59 f0       	breq	.+22     	; 0x1b2a <__fp_splitA+0x10>
    1b14:	5f 3f       	cpi	r21, 0xFF	; 255
    1b16:	71 f0       	breq	.+28     	; 0x1b34 <__fp_splitA+0x1a>
    1b18:	47 95       	ror	r20

00001b1a <__fp_splitA>:
    1b1a:	88 0f       	add	r24, r24
    1b1c:	97 fb       	bst	r25, 7
    1b1e:	99 1f       	adc	r25, r25
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <__fp_splitA+0x20>
    1b22:	9f 3f       	cpi	r25, 0xFF	; 255
    1b24:	79 f0       	breq	.+30     	; 0x1b44 <__fp_splitA+0x2a>
    1b26:	87 95       	ror	r24
    1b28:	08 95       	ret
    1b2a:	12 16       	cp	r1, r18
    1b2c:	13 06       	cpc	r1, r19
    1b2e:	14 06       	cpc	r1, r20
    1b30:	55 1f       	adc	r21, r21
    1b32:	f2 cf       	rjmp	.-28     	; 0x1b18 <__fp_split3+0xe>
    1b34:	46 95       	lsr	r20
    1b36:	f1 df       	rcall	.-30     	; 0x1b1a <__fp_splitA>
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <__fp_splitA+0x30>
    1b3a:	16 16       	cp	r1, r22
    1b3c:	17 06       	cpc	r1, r23
    1b3e:	18 06       	cpc	r1, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	f1 cf       	rjmp	.-30     	; 0x1b26 <__fp_splitA+0xc>
    1b44:	86 95       	lsr	r24
    1b46:	71 05       	cpc	r23, r1
    1b48:	61 05       	cpc	r22, r1
    1b4a:	08 94       	sec
    1b4c:	08 95       	ret

00001b4e <__fp_zero>:
    1b4e:	e8 94       	clt

00001b50 <__fp_szero>:
    1b50:	bb 27       	eor	r27, r27
    1b52:	66 27       	eor	r22, r22
    1b54:	77 27       	eor	r23, r23
    1b56:	cb 01       	movw	r24, r22
    1b58:	97 f9       	bld	r25, 7
    1b5a:	08 95       	ret

00001b5c <__gesf2>:
    1b5c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fp_cmp>
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <__gesf2+0x8>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	08 95       	ret

00001b66 <__mulsf3>:
    1b66:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__mulsf3x>
    1b6a:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_round>
    1b6e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscA>
    1b72:	38 f0       	brcs	.+14     	; 0x1b82 <__mulsf3+0x1c>
    1b74:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fp_pscB>
    1b78:	20 f0       	brcs	.+8      	; 0x1b82 <__mulsf3+0x1c>
    1b7a:	95 23       	and	r25, r21
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <__mulsf3+0x1c>
    1b7e:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    1b82:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_nan>
    1b86:	11 24       	eor	r1, r1
    1b88:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>

00001b8c <__mulsf3x>:
    1b8c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_split3>
    1b90:	70 f3       	brcs	.-36     	; 0x1b6e <__mulsf3+0x8>

00001b92 <__mulsf3_pse>:
    1b92:	95 9f       	mul	r25, r21
    1b94:	c1 f3       	breq	.-16     	; 0x1b86 <__mulsf3+0x20>
    1b96:	95 0f       	add	r25, r21
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	55 1f       	adc	r21, r21
    1b9c:	62 9f       	mul	r22, r18
    1b9e:	f0 01       	movw	r30, r0
    1ba0:	72 9f       	mul	r23, r18
    1ba2:	bb 27       	eor	r27, r27
    1ba4:	f0 0d       	add	r31, r0
    1ba6:	b1 1d       	adc	r27, r1
    1ba8:	63 9f       	mul	r22, r19
    1baa:	aa 27       	eor	r26, r26
    1bac:	f0 0d       	add	r31, r0
    1bae:	b1 1d       	adc	r27, r1
    1bb0:	aa 1f       	adc	r26, r26
    1bb2:	64 9f       	mul	r22, r20
    1bb4:	66 27       	eor	r22, r22
    1bb6:	b0 0d       	add	r27, r0
    1bb8:	a1 1d       	adc	r26, r1
    1bba:	66 1f       	adc	r22, r22
    1bbc:	82 9f       	mul	r24, r18
    1bbe:	22 27       	eor	r18, r18
    1bc0:	b0 0d       	add	r27, r0
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	62 1f       	adc	r22, r18
    1bc6:	73 9f       	mul	r23, r19
    1bc8:	b0 0d       	add	r27, r0
    1bca:	a1 1d       	adc	r26, r1
    1bcc:	62 1f       	adc	r22, r18
    1bce:	83 9f       	mul	r24, r19
    1bd0:	a0 0d       	add	r26, r0
    1bd2:	61 1d       	adc	r22, r1
    1bd4:	22 1f       	adc	r18, r18
    1bd6:	74 9f       	mul	r23, r20
    1bd8:	33 27       	eor	r19, r19
    1bda:	a0 0d       	add	r26, r0
    1bdc:	61 1d       	adc	r22, r1
    1bde:	23 1f       	adc	r18, r19
    1be0:	84 9f       	mul	r24, r20
    1be2:	60 0d       	add	r22, r0
    1be4:	21 1d       	adc	r18, r1
    1be6:	82 2f       	mov	r24, r18
    1be8:	76 2f       	mov	r23, r22
    1bea:	6a 2f       	mov	r22, r26
    1bec:	11 24       	eor	r1, r1
    1bee:	9f 57       	subi	r25, 0x7F	; 127
    1bf0:	50 40       	sbci	r21, 0x00	; 0
    1bf2:	9a f0       	brmi	.+38     	; 0x1c1a <__mulsf3_pse+0x88>
    1bf4:	f1 f0       	breq	.+60     	; 0x1c32 <__mulsf3_pse+0xa0>
    1bf6:	88 23       	and	r24, r24
    1bf8:	4a f0       	brmi	.+18     	; 0x1c0c <__mulsf3_pse+0x7a>
    1bfa:	ee 0f       	add	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	bb 1f       	adc	r27, r27
    1c00:	66 1f       	adc	r22, r22
    1c02:	77 1f       	adc	r23, r23
    1c04:	88 1f       	adc	r24, r24
    1c06:	91 50       	subi	r25, 0x01	; 1
    1c08:	50 40       	sbci	r21, 0x00	; 0
    1c0a:	a9 f7       	brne	.-22     	; 0x1bf6 <__mulsf3_pse+0x64>
    1c0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c0e:	51 05       	cpc	r21, r1
    1c10:	80 f0       	brcs	.+32     	; 0x1c32 <__mulsf3_pse+0xa0>
    1c12:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    1c16:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>
    1c1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c1c:	e4 f3       	brlt	.-8      	; 0x1c16 <__mulsf3_pse+0x84>
    1c1e:	98 3e       	cpi	r25, 0xE8	; 232
    1c20:	d4 f3       	brlt	.-12     	; 0x1c16 <__mulsf3_pse+0x84>
    1c22:	86 95       	lsr	r24
    1c24:	77 95       	ror	r23
    1c26:	67 95       	ror	r22
    1c28:	b7 95       	ror	r27
    1c2a:	f7 95       	ror	r31
    1c2c:	e7 95       	ror	r30
    1c2e:	9f 5f       	subi	r25, 0xFF	; 255
    1c30:	c1 f7       	brne	.-16     	; 0x1c22 <__mulsf3_pse+0x90>
    1c32:	fe 2b       	or	r31, r30
    1c34:	88 0f       	add	r24, r24
    1c36:	91 1d       	adc	r25, r1
    1c38:	96 95       	lsr	r25
    1c3a:	87 95       	ror	r24
    1c3c:	97 f9       	bld	r25, 7
    1c3e:	08 95       	ret

00001c40 <malloc>:
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	91 05       	cpc	r25, r1
    1c48:	10 f4       	brcc	.+4      	; 0x1c4e <malloc+0xe>
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	e0 91 30 03 	lds	r30, 0x0330
    1c52:	f0 91 31 03 	lds	r31, 0x0331
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	c0 e0       	ldi	r28, 0x00	; 0
    1c5c:	d0 e0       	ldi	r29, 0x00	; 0
    1c5e:	30 97       	sbiw	r30, 0x00	; 0
    1c60:	11 f1       	breq	.+68     	; 0x1ca6 <malloc+0x66>
    1c62:	40 81       	ld	r20, Z
    1c64:	51 81       	ldd	r21, Z+1	; 0x01
    1c66:	48 17       	cp	r20, r24
    1c68:	59 07       	cpc	r21, r25
    1c6a:	c0 f0       	brcs	.+48     	; 0x1c9c <malloc+0x5c>
    1c6c:	48 17       	cp	r20, r24
    1c6e:	59 07       	cpc	r21, r25
    1c70:	61 f4       	brne	.+24     	; 0x1c8a <malloc+0x4a>
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 97       	sbiw	r28, 0x00	; 0
    1c78:	19 f0       	breq	.+6      	; 0x1c80 <malloc+0x40>
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	2b c0       	rjmp	.+86     	; 0x1cd6 <malloc+0x96>
    1c80:	90 93 31 03 	sts	0x0331, r25
    1c84:	80 93 30 03 	sts	0x0330, r24
    1c88:	26 c0       	rjmp	.+76     	; 0x1cd6 <malloc+0x96>
    1c8a:	21 15       	cp	r18, r1
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <malloc+0x56>
    1c90:	42 17       	cp	r20, r18
    1c92:	53 07       	cpc	r21, r19
    1c94:	18 f4       	brcc	.+6      	; 0x1c9c <malloc+0x5c>
    1c96:	9a 01       	movw	r18, r20
    1c98:	be 01       	movw	r22, r28
    1c9a:	df 01       	movw	r26, r30
    1c9c:	ef 01       	movw	r28, r30
    1c9e:	02 80       	ldd	r0, Z+2	; 0x02
    1ca0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ca2:	e0 2d       	mov	r30, r0
    1ca4:	dc cf       	rjmp	.-72     	; 0x1c5e <malloc+0x1e>
    1ca6:	21 15       	cp	r18, r1
    1ca8:	31 05       	cpc	r19, r1
    1caa:	09 f1       	breq	.+66     	; 0x1cee <malloc+0xae>
    1cac:	28 1b       	sub	r18, r24
    1cae:	39 0b       	sbc	r19, r25
    1cb0:	24 30       	cpi	r18, 0x04	; 4
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	90 f4       	brcc	.+36     	; 0x1cda <malloc+0x9a>
    1cb6:	12 96       	adiw	r26, 0x02	; 2
    1cb8:	8d 91       	ld	r24, X+
    1cba:	9c 91       	ld	r25, X
    1cbc:	13 97       	sbiw	r26, 0x03	; 3
    1cbe:	61 15       	cp	r22, r1
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	21 f0       	breq	.+8      	; 0x1ccc <malloc+0x8c>
    1cc4:	fb 01       	movw	r30, r22
    1cc6:	93 83       	std	Z+3, r25	; 0x03
    1cc8:	82 83       	std	Z+2, r24	; 0x02
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <malloc+0x94>
    1ccc:	90 93 31 03 	sts	0x0331, r25
    1cd0:	80 93 30 03 	sts	0x0330, r24
    1cd4:	fd 01       	movw	r30, r26
    1cd6:	32 96       	adiw	r30, 0x02	; 2
    1cd8:	44 c0       	rjmp	.+136    	; 0x1d62 <malloc+0x122>
    1cda:	fd 01       	movw	r30, r26
    1cdc:	e2 0f       	add	r30, r18
    1cde:	f3 1f       	adc	r31, r19
    1ce0:	81 93       	st	Z+, r24
    1ce2:	91 93       	st	Z+, r25
    1ce4:	22 50       	subi	r18, 0x02	; 2
    1ce6:	31 09       	sbc	r19, r1
    1ce8:	2d 93       	st	X+, r18
    1cea:	3c 93       	st	X, r19
    1cec:	3a c0       	rjmp	.+116    	; 0x1d62 <malloc+0x122>
    1cee:	20 91 2e 03 	lds	r18, 0x032E
    1cf2:	30 91 2f 03 	lds	r19, 0x032F
    1cf6:	23 2b       	or	r18, r19
    1cf8:	41 f4       	brne	.+16     	; 0x1d0a <malloc+0xca>
    1cfa:	20 91 02 01 	lds	r18, 0x0102
    1cfe:	30 91 03 01 	lds	r19, 0x0103
    1d02:	30 93 2f 03 	sts	0x032F, r19
    1d06:	20 93 2e 03 	sts	0x032E, r18
    1d0a:	20 91 00 01 	lds	r18, 0x0100
    1d0e:	30 91 01 01 	lds	r19, 0x0101
    1d12:	21 15       	cp	r18, r1
    1d14:	31 05       	cpc	r19, r1
    1d16:	41 f4       	brne	.+16     	; 0x1d28 <malloc+0xe8>
    1d18:	2d b7       	in	r18, 0x3d	; 61
    1d1a:	3e b7       	in	r19, 0x3e	; 62
    1d1c:	40 91 04 01 	lds	r20, 0x0104
    1d20:	50 91 05 01 	lds	r21, 0x0105
    1d24:	24 1b       	sub	r18, r20
    1d26:	35 0b       	sbc	r19, r21
    1d28:	e0 91 2e 03 	lds	r30, 0x032E
    1d2c:	f0 91 2f 03 	lds	r31, 0x032F
    1d30:	e2 17       	cp	r30, r18
    1d32:	f3 07       	cpc	r31, r19
    1d34:	a0 f4       	brcc	.+40     	; 0x1d5e <malloc+0x11e>
    1d36:	2e 1b       	sub	r18, r30
    1d38:	3f 0b       	sbc	r19, r31
    1d3a:	28 17       	cp	r18, r24
    1d3c:	39 07       	cpc	r19, r25
    1d3e:	78 f0       	brcs	.+30     	; 0x1d5e <malloc+0x11e>
    1d40:	ac 01       	movw	r20, r24
    1d42:	4e 5f       	subi	r20, 0xFE	; 254
    1d44:	5f 4f       	sbci	r21, 0xFF	; 255
    1d46:	24 17       	cp	r18, r20
    1d48:	35 07       	cpc	r19, r21
    1d4a:	48 f0       	brcs	.+18     	; 0x1d5e <malloc+0x11e>
    1d4c:	4e 0f       	add	r20, r30
    1d4e:	5f 1f       	adc	r21, r31
    1d50:	50 93 2f 03 	sts	0x032F, r21
    1d54:	40 93 2e 03 	sts	0x032E, r20
    1d58:	81 93       	st	Z+, r24
    1d5a:	91 93       	st	Z+, r25
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <malloc+0x122>
    1d5e:	e0 e0       	ldi	r30, 0x00	; 0
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	cf 01       	movw	r24, r30
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	08 95       	ret

00001d6a <free>:
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <free+0xe>
    1d76:	8c c0       	rjmp	.+280    	; 0x1e90 <free+0x126>
    1d78:	fc 01       	movw	r30, r24
    1d7a:	32 97       	sbiw	r30, 0x02	; 2
    1d7c:	13 82       	std	Z+3, r1	; 0x03
    1d7e:	12 82       	std	Z+2, r1	; 0x02
    1d80:	00 91 30 03 	lds	r16, 0x0330
    1d84:	10 91 31 03 	lds	r17, 0x0331
    1d88:	01 15       	cp	r16, r1
    1d8a:	11 05       	cpc	r17, r1
    1d8c:	81 f4       	brne	.+32     	; 0x1dae <free+0x44>
    1d8e:	20 81       	ld	r18, Z
    1d90:	31 81       	ldd	r19, Z+1	; 0x01
    1d92:	82 0f       	add	r24, r18
    1d94:	93 1f       	adc	r25, r19
    1d96:	20 91 2e 03 	lds	r18, 0x032E
    1d9a:	30 91 2f 03 	lds	r19, 0x032F
    1d9e:	28 17       	cp	r18, r24
    1da0:	39 07       	cpc	r19, r25
    1da2:	79 f5       	brne	.+94     	; 0x1e02 <free+0x98>
    1da4:	f0 93 2f 03 	sts	0x032F, r31
    1da8:	e0 93 2e 03 	sts	0x032E, r30
    1dac:	71 c0       	rjmp	.+226    	; 0x1e90 <free+0x126>
    1dae:	d8 01       	movw	r26, r16
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	ae 17       	cp	r26, r30
    1db6:	bf 07       	cpc	r27, r31
    1db8:	50 f4       	brcc	.+20     	; 0x1dce <free+0x64>
    1dba:	12 96       	adiw	r26, 0x02	; 2
    1dbc:	2d 91       	ld	r18, X+
    1dbe:	3c 91       	ld	r19, X
    1dc0:	13 97       	sbiw	r26, 0x03	; 3
    1dc2:	ad 01       	movw	r20, r26
    1dc4:	21 15       	cp	r18, r1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	09 f1       	breq	.+66     	; 0x1e0c <free+0xa2>
    1dca:	d9 01       	movw	r26, r18
    1dcc:	f3 cf       	rjmp	.-26     	; 0x1db4 <free+0x4a>
    1dce:	9d 01       	movw	r18, r26
    1dd0:	da 01       	movw	r26, r20
    1dd2:	33 83       	std	Z+3, r19	; 0x03
    1dd4:	22 83       	std	Z+2, r18	; 0x02
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	86 0f       	add	r24, r22
    1ddc:	97 1f       	adc	r25, r23
    1dde:	82 17       	cp	r24, r18
    1de0:	93 07       	cpc	r25, r19
    1de2:	69 f4       	brne	.+26     	; 0x1dfe <free+0x94>
    1de4:	ec 01       	movw	r28, r24
    1de6:	28 81       	ld	r18, Y
    1de8:	39 81       	ldd	r19, Y+1	; 0x01
    1dea:	26 0f       	add	r18, r22
    1dec:	37 1f       	adc	r19, r23
    1dee:	2e 5f       	subi	r18, 0xFE	; 254
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	31 83       	std	Z+1, r19	; 0x01
    1df4:	20 83       	st	Z, r18
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	93 83       	std	Z+3, r25	; 0x03
    1dfc:	82 83       	std	Z+2, r24	; 0x02
    1dfe:	45 2b       	or	r20, r21
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <free+0xa2>
    1e02:	f0 93 31 03 	sts	0x0331, r31
    1e06:	e0 93 30 03 	sts	0x0330, r30
    1e0a:	42 c0       	rjmp	.+132    	; 0x1e90 <free+0x126>
    1e0c:	13 96       	adiw	r26, 0x03	; 3
    1e0e:	fc 93       	st	X, r31
    1e10:	ee 93       	st	-X, r30
    1e12:	12 97       	sbiw	r26, 0x02	; 2
    1e14:	ed 01       	movw	r28, r26
    1e16:	49 91       	ld	r20, Y+
    1e18:	59 91       	ld	r21, Y+
    1e1a:	9e 01       	movw	r18, r28
    1e1c:	24 0f       	add	r18, r20
    1e1e:	35 1f       	adc	r19, r21
    1e20:	e2 17       	cp	r30, r18
    1e22:	f3 07       	cpc	r31, r19
    1e24:	71 f4       	brne	.+28     	; 0x1e42 <free+0xd8>
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	84 0f       	add	r24, r20
    1e2c:	95 1f       	adc	r25, r21
    1e2e:	02 96       	adiw	r24, 0x02	; 2
    1e30:	11 96       	adiw	r26, 0x01	; 1
    1e32:	9c 93       	st	X, r25
    1e34:	8e 93       	st	-X, r24
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	13 96       	adiw	r26, 0x03	; 3
    1e3c:	9c 93       	st	X, r25
    1e3e:	8e 93       	st	-X, r24
    1e40:	12 97       	sbiw	r26, 0x02	; 2
    1e42:	e0 e0       	ldi	r30, 0x00	; 0
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	d8 01       	movw	r26, r16
    1e48:	12 96       	adiw	r26, 0x02	; 2
    1e4a:	8d 91       	ld	r24, X+
    1e4c:	9c 91       	ld	r25, X
    1e4e:	13 97       	sbiw	r26, 0x03	; 3
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	19 f0       	breq	.+6      	; 0x1e5a <free+0xf0>
    1e54:	f8 01       	movw	r30, r16
    1e56:	8c 01       	movw	r16, r24
    1e58:	f6 cf       	rjmp	.-20     	; 0x1e46 <free+0xdc>
    1e5a:	8d 91       	ld	r24, X+
    1e5c:	9c 91       	ld	r25, X
    1e5e:	98 01       	movw	r18, r16
    1e60:	2e 5f       	subi	r18, 0xFE	; 254
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	82 0f       	add	r24, r18
    1e66:	93 1f       	adc	r25, r19
    1e68:	20 91 2e 03 	lds	r18, 0x032E
    1e6c:	30 91 2f 03 	lds	r19, 0x032F
    1e70:	28 17       	cp	r18, r24
    1e72:	39 07       	cpc	r19, r25
    1e74:	69 f4       	brne	.+26     	; 0x1e90 <free+0x126>
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	29 f4       	brne	.+10     	; 0x1e84 <free+0x11a>
    1e7a:	10 92 31 03 	sts	0x0331, r1
    1e7e:	10 92 30 03 	sts	0x0330, r1
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <free+0x11e>
    1e84:	13 82       	std	Z+3, r1	; 0x03
    1e86:	12 82       	std	Z+2, r1	; 0x02
    1e88:	10 93 2f 03 	sts	0x032F, r17
    1e8c:	00 93 2e 03 	sts	0x032E, r16
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	1f 91       	pop	r17
    1e96:	0f 91       	pop	r16
    1e98:	08 95       	ret

00001e9a <_exit>:
    1e9a:	f8 94       	cli

00001e9c <__stop_program>:
    1e9c:	ff cf       	rjmp	.-2      	; 0x1e9c <__stop_program>
