
Actuator_2k17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001e3c  00001ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  00800106  00800106  00001ed6  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144c  00000000  00000000  000049e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005e2c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005e40  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a6 e0       	ldi	r26, 0x06	; 6
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a2 33       	cpi	r26, 0x32	; 50
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e3       	ldi	r30, 0x3C	; 60
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a6 30       	cpi	r26, 0x06	; 6
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
      ca:	0e 94 16 08 	call	0x102c	; 0x102c <main>
      ce:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ball_grabbers>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the ball grabbers servos
 *	Help: 			to adjust parameters go to control.h
 */
static void ball_grabbers(unsigned char side, unsigned char state)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <ball_grabbers+0x6>
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	89 83       	std	Y+1, r24	; 0x01
      e2:	6a 83       	std	Y+2, r22	; 0x02
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	a9 f4       	brne	.+42     	; 0x114 <ball_grabbers+0x3e>
	{
		if(state == UP)
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	49 f4       	brne	.+18     	; 0x102 <ball_grabbers+0x2c>
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_LEFT);
      f0:	2a e0       	ldi	r18, 0x0A	; 10
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	60 ef       	ldi	r22, 0xF0	; 240
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	8c e2       	ldi	r24, 0x2C	; 44
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
     100:	1d c0       	rjmp	.+58     	; 0x13c <ball_grabbers+0x66>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERLEFT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_LEFT);
     102:	2a e0       	ldi	r18, 0x0A	; 10
     104:	41 e0       	ldi	r20, 0x01	; 1
     106:	60 ef       	ldi	r22, 0xF0	; 240
     108:	70 e0       	ldi	r23, 0x00	; 0
     10a:	80 ef       	ldi	r24, 0xF0	; 240
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
     112:	14 c0       	rjmp	.+40     	; 0x13c <ball_grabbers+0x66>
		}
	}
	else
	{
		if(state == UP)
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	49 f4       	brne	.+18     	; 0x12c <ball_grabbers+0x56>
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_UP, AX_SPEED_FAST, CW, ID_BALLGRABBER_RIGHT);
     11a:	23 e0       	ldi	r18, 0x03	; 3
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	60 ef       	ldi	r22, 0xF0	; 240
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	82 ee       	ldi	r24, 0xE2	; 226
     124:	9f ef       	ldi	r25, 0xFF	; 255
     126:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
     12a:	08 c0       	rjmp	.+16     	; 0x13c <ball_grabbers+0x66>
		}
		else
		{
			AX_SetAngle(POS_BALLGRABBERRIGHT_DOWN, AX_SPEED_FAST, CCW, ID_BALLGRABBER_RIGHT);
     12c:	23 e0       	ldi	r18, 0x03	; 3
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	60 ef       	ldi	r22, 0xF0	; 240
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	81 e4       	ldi	r24, 0x41	; 65
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
		}
	}
}
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <dispenser>:
 *					unsigned char state	- UP or DOWN
 *	Description: 	controls the dispensers position
 *	Help: 			to adjust parameters go to control.h
 */
static void dispenser(unsigned char side, unsigned char state)
{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	00 d0       	rcall	.+0      	; 0x14c <dispenser+0x6>
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	89 83       	std	Y+1, r24	; 0x01
     152:	6a 83       	std	Y+2, r22	; 0x02
	// ! configure the ax servo id's in control.h file !
	// check CW and CCW
	// change variables in control.h
	if(side == LEFT)
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	a9 f4       	brne	.+42     	; 0x184 <dispenser+0x3e>
	{
		if(state == UP)
     15a:	8a 81       	ldd	r24, Y+2	; 0x02
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	49 f4       	brne	.+18     	; 0x172 <dispenser+0x2c>
		{
			AX_SetAngle(POS_DISPENSERLEFT_UP, AX_SPEED_SLOW, CCW, ID_DISPENSER_LEFT);
     160:	22 e0       	ldi	r18, 0x02	; 2
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	64 e6       	ldi	r22, 0x64	; 100
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	81 ef       	ldi	r24, 0xF1	; 241
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
     170:	1d c0       	rjmp	.+58     	; 0x1ac <dispenser+0x66>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERLEFT_DOWN, AX_SPEED_SLOW, CW, ID_DISPENSER_LEFT);
     172:	22 e0       	ldi	r18, 0x02	; 2
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	64 e6       	ldi	r22, 0x64	; 100
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	86 e9       	ldi	r24, 0x96	; 150
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
     182:	14 c0       	rjmp	.+40     	; 0x1ac <dispenser+0x66>
		}
	}
	else
	{
		if(state == UP)
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	49 f4       	brne	.+18     	; 0x19c <dispenser+0x56>
		{
			AX_SetAngle(POS_DISPENSERRIGHT_UP, AX_SPEED_SLOW, CW, ID_DISPENSER_RIGHT);
     18a:	24 e0       	ldi	r18, 0x04	; 4
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	64 e6       	ldi	r22, 0x64	; 100
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	8c e3       	ldi	r24, 0x3C	; 60
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
     19a:	08 c0       	rjmp	.+16     	; 0x1ac <dispenser+0x66>
		}
		else
		{
			AX_SetAngle(POS_DISPENSERRIGHT_DOWN, AX_SPEED_SLOW, CW, ID_DISPENSER_RIGHT);
     19c:	24 e0       	ldi	r18, 0x04	; 4
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	64 e6       	ldi	r22, 0x64	; 100
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	86 e9       	ldi	r24, 0x96	; 150
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 f5 05 	call	0xbea	; 0xbea <AX_SetAngle>
		}
	}
}
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <mosfet>:
 *	Parameters: unsigned char side 	- which side diafram to control
 *				unsigned char state	- ON or OFF state
 *	Description: controls the mosfets that turn 12V on or off
 */
static void mosfet(unsigned char side, unsigned char state)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <mosfet+0x6>
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	6a 83       	std	Y+2, r22	; 0x02
	if(side == LEFT)
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	69 f4       	brne	.+26     	; 0x1e4 <mosfet+0x2e>
	{
		if(state == ON)
     1ca:	8a 81       	ldd	r24, Y+2	; 0x02
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	29 f4       	brne	.+10     	; 0x1da <mosfet+0x24>
		{
			GPIO_OutputSet(pinE4);
     1d0:	80 91 2b 03 	lds	r24, 0x032B
     1d4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <GPIO_OutputSet>
     1d8:	11 c0       	rjmp	.+34     	; 0x1fc <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE4);
     1da:	80 91 2b 03 	lds	r24, 0x032B
     1de:	0e 94 1d 0a 	call	0x143a	; 0x143a <GPIO_OutputReset>
     1e2:	0c c0       	rjmp	.+24     	; 0x1fc <mosfet+0x46>
		}
	}
	else
	{
		if(state == ON)
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	29 f4       	brne	.+10     	; 0x1f4 <mosfet+0x3e>
		{
			GPIO_OutputSet(pinE5);
     1ea:	80 91 2d 03 	lds	r24, 0x032D
     1ee:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <GPIO_OutputSet>
     1f2:	04 c0       	rjmp	.+8      	; 0x1fc <mosfet+0x46>
		}
		else
		{
			GPIO_OutputReset(pinE5);
     1f4:	80 91 2d 03 	lds	r24, 0x032D
     1f8:	0e 94 1d 0a 	call	0x143a	; 0x143a <GPIO_OutputReset>
		}
	}
}
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <motor>:

static void motor(unsigned char direction, int8_t pwm)
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <motor+0x6>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	6a 83       	std	Y+2, r22	; 0x02
	}
	else
	{

	}
}
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <action>:
 *	Function: 		void action(canMsg msg)
 *	Parameters: 	canMsg msg
 *	Description: 	decides actions on can msg received
 */
void action(canMsg msg)
{
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	2a 97       	sbiw	r28, 0x0a	; 10
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	de bf       	out	0x3e, r29	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	cd bf       	out	0x3d, r28	; 61
     236:	09 83       	std	Y+1, r16	; 0x01
     238:	1a 83       	std	Y+2, r17	; 0x02
     23a:	2b 83       	std	Y+3, r18	; 0x03
     23c:	3c 83       	std	Y+4, r19	; 0x04
     23e:	4d 83       	std	Y+5, r20	; 0x05
     240:	5e 83       	std	Y+6, r21	; 0x06
     242:	6f 83       	std	Y+7, r22	; 0x07
     244:	78 87       	std	Y+8, r23	; 0x08
     246:	89 87       	std	Y+9, r24	; 0x09
     248:	9a 87       	std	Y+10, r25	; 0x0a
	mosfet(RIGHT,ON);
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mosfet>
			pwm		= msg.data[2];
			motor(state, pwm);

			break;
	}*/
}
     252:	2a 96       	adiw	r28, 0x0a	; 10
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	00 90 5f 00 	lds	r0, 0x005F
     270:	0f 92       	push	r0
     272:	11 24       	eor	r1, r1
     274:	00 90 5b 00 	lds	r0, 0x005B
     278:	0f 92       	push	r0
     27a:	2f 93       	push	r18
     27c:	3f 93       	push	r19
     27e:	4f 93       	push	r20
     280:	5f 93       	push	r21
     282:	6f 93       	push	r22
     284:	7f 93       	push	r23
     286:	8f 93       	push	r24
     288:	9f 93       	push	r25
     28a:	ef 93       	push	r30
     28c:	ff 93       	push	r31
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <__vector_18+0x2c>
     294:	1f 92       	push	r1
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     29a:	8d ee       	ldi	r24, 0xED	; 237
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	fc 01       	movw	r30, r24
     2a0:	80 81       	ld	r24, Z
     2a2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     2a4:	19 82       	std	Y+1, r1	; 0x01
     2a6:	9f c0       	rjmp	.+318    	; 0x3e6 <__vector_18+0x17e>
	{
		CANPAGE = ch << 4;
     2a8:	8d ee       	ldi	r24, 0xED	; 237
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	29 81       	ldd	r18, Y+1	; 0x01
     2ae:	22 95       	swap	r18
     2b0:	20 7f       	andi	r18, 0xF0	; 240
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18

		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
     2b6:	8e ee       	ldi	r24, 0xEE	; 238
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	fc 01       	movw	r30, r24
     2bc:	80 81       	ld	r24, Z
     2be:	82 95       	swap	r24
     2c0:	86 95       	lsr	r24
     2c2:	87 70       	andi	r24, 0x07	; 7
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	81 70       	andi	r24, 0x01	; 1
     2ca:	99 27       	eor	r25, r25
     2cc:	89 2b       	or	r24, r25
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <__vector_18+0x6a>
     2d0:	6b c0       	rjmp	.+214    	; 0x3a8 <__vector_18+0x140>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     2d2:	8f ee       	ldi	r24, 0xEF	; 239
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	20 e8       	ldi	r18, 0x80	; 128
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     2dc:	8e ee       	ldi	r24, 0xEE	; 238
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	2e ee       	ldi	r18, 0xEE	; 238
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	2f 7d       	andi	r18, 0xDF	; 223
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18

			for(unsigned char i = 0; i < 8; i++)
     2ee:	1a 82       	std	Y+2, r1	; 0x02
     2f0:	1e c0       	rjmp	.+60     	; 0x32e <__vector_18+0xc6>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
     2f2:	80 91 fb 02 	lds	r24, 0x02FB
     2f6:	48 2f       	mov	r20, r24
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	8a 81       	ldd	r24, Y+2	; 0x02
     2fc:	28 2f       	mov	r18, r24
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	8a ef       	ldi	r24, 0xFA	; 250
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	60 81       	ld	r22, Z
     308:	ca 01       	movw	r24, r20
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	ac 01       	movw	r20, r24
     310:	44 0f       	add	r20, r20
     312:	55 1f       	adc	r21, r21
     314:	44 0f       	add	r20, r20
     316:	55 1f       	adc	r21, r21
     318:	84 0f       	add	r24, r20
     31a:	95 1f       	adc	r25, r21
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	8a 5f       	subi	r24, 0xFA	; 250
     322:	9e 4f       	sbci	r25, 0xFE	; 254
     324:	fc 01       	movw	r30, r24
     326:	60 83       	st	Z, r22
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			for(unsigned char i = 0; i < 8; i++)
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	8a 83       	std	Y+2, r24	; 0x02
     32e:	8a 81       	ldd	r24, Y+2	; 0x02
     330:	88 30       	cpi	r24, 0x08	; 8
     332:	f8 f2       	brcs	.-66     	; 0x2f2 <__vector_18+0x8a>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);

			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
     334:	80 91 fb 02 	lds	r24, 0x02FB
     338:	68 2f       	mov	r22, r24
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	82 ef       	ldi	r24, 0xF2	; 242
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	fc 01       	movw	r30, r24
     342:	80 81       	ld	r24, Z
     344:	82 95       	swap	r24
     346:	86 95       	lsr	r24
     348:	87 70       	andi	r24, 0x07	; 7
     34a:	28 2f       	mov	r18, r24
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	83 ef       	ldi	r24, 0xF3	; 243
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	fc 01       	movw	r30, r24
     354:	80 81       	ld	r24, Z
     356:	88 2f       	mov	r24, r24
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	82 2b       	or	r24, r18
     368:	93 2b       	or	r25, r19
     36a:	ac 01       	movw	r20, r24
     36c:	cb 01       	movw	r24, r22
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	9c 01       	movw	r18, r24
     374:	22 0f       	add	r18, r18
     376:	33 1f       	adc	r19, r19
     378:	22 0f       	add	r18, r18
     37a:	33 1f       	adc	r19, r19
     37c:	82 0f       	add	r24, r18
     37e:	93 1f       	adc	r25, r19
     380:	82 5f       	subi	r24, 0xF2	; 242
     382:	9e 4f       	sbci	r25, 0xFE	; 254
     384:	fc 01       	movw	r30, r24
     386:	51 83       	std	Z+1, r21	; 0x01
     388:	40 83       	st	Z, r20

			if(++rxWrIndex == RX_BUFFER_SIZE)
     38a:	80 91 fb 02 	lds	r24, 0x02FB
     38e:	8f 5f       	subi	r24, 0xFF	; 255
     390:	80 93 fb 02 	sts	0x02FB, r24
     394:	82 33       	cpi	r24, 0x32	; 50
     396:	11 f4       	brne	.+4      	; 0x39c <__vector_18+0x134>
				rxWrIndex = 0;
     398:	10 92 fb 02 	sts	0x02FB, r1

			rxCounter++;
     39c:	80 91 fc 02 	lds	r24, 0x02FC
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 fc 02 	sts	0x02FC, r24

			//brPrimljenih1++;

			break;
     3a6:	23 c0       	rjmp	.+70     	; 0x3ee <__vector_18+0x186>
		}

		// proveravam da li je uspesno poslat podatak (ako je MOb bio podesen kao predajnik)
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
     3a8:	8e ee       	ldi	r24, 0xEE	; 238
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	82 95       	swap	r24
     3b2:	86 95       	lsr	r24
     3b4:	86 95       	lsr	r24
     3b6:	83 70       	andi	r24, 0x03	; 3
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	81 70       	andi	r24, 0x01	; 1
     3be:	99 27       	eor	r25, r25
     3c0:	89 2b       	or	r24, r25
     3c2:	71 f0       	breq	.+28     	; 0x3e0 <__vector_18+0x178>
		{
			CANCDMOB = 0; // disable mob
     3c4:	8f ee       	ldi	r24, 0xEF	; 239
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fc 01       	movw	r30, r24
     3ca:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     3cc:	8e ee       	ldi	r24, 0xEE	; 238
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	2e ee       	ldi	r18, 0xEE	; 238
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	20 81       	ld	r18, Z
     3d8:	2f 7b       	andi	r18, 0xBF	; 191
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18

			break;
     3de:	07 c0       	rjmp	.+14     	; 0x3ee <__vector_18+0x186>
{
	unsigned char tempPage = CANPAGE;
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	8f 30       	cpi	r24, 0x0F	; 15
     3ea:	08 f4       	brcc	.+2      	; 0x3ee <__vector_18+0x186>
     3ec:	5d cf       	rjmp	.-326    	; 0x2a8 <__vector_18+0x40>

			break;
		}
	}

	CANPAGE = tempPage;
     3ee:	8d ee       	ldi	r24, 0xED	; 237
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	2b 81       	ldd	r18, Y+3	; 0x03
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // jako retardirano
}
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	ff 91       	pop	r31
     404:	ef 91       	pop	r30
     406:	9f 91       	pop	r25
     408:	8f 91       	pop	r24
     40a:	7f 91       	pop	r23
     40c:	6f 91       	pop	r22
     40e:	5f 91       	pop	r21
     410:	4f 91       	pop	r20
     412:	3f 91       	pop	r19
     414:	2f 91       	pop	r18
     416:	0f 90       	pop	r0
     418:	00 92 5b 00 	sts	0x005B, r0
     41c:	0f 90       	pop	r0
     41e:	00 92 5f 00 	sts	0x005F, r0
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <CAN_Init>:
					  Podrazumeva se da je frekvencija kontrolera 10MHz
* Parameters        : None
* Return Value      : void
*********************************************************************************/
void CAN_Init(void)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <CAN_Init+0x6>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     432:	88 ed       	ldi	r24, 0xD8	; 216
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     43c:	19 82       	std	Y+1, r1	; 0x01
     43e:	3e c0       	rjmp	.+124    	; 0x4bc <CAN_Init+0x94>
	{
		CANPAGE = ch << 4;
     440:	8d ee       	ldi	r24, 0xED	; 237
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	29 81       	ldd	r18, Y+1	; 0x01
     446:	22 95       	swap	r18
     448:	20 7f       	andi	r18, 0xF0	; 240
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18

		CANSTMOB = 0;
     44e:	8e ee       	ldi	r24, 0xEE	; 238
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	fc 01       	movw	r30, r24
     454:	10 82       	st	Z, r1
		CANCDMOB = 0;
     456:	8f ee       	ldi	r24, 0xEF	; 239
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	10 82       	st	Z, r1

		CANIDT1 = 0;
     45e:	83 ef       	ldi	r24, 0xF3	; 243
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	fc 01       	movw	r30, r24
     464:	10 82       	st	Z, r1
		CANIDT2 = 0;
     466:	82 ef       	ldi	r24, 0xF2	; 242
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	10 82       	st	Z, r1
		CANIDT3 = 0;
     46e:	81 ef       	ldi	r24, 0xF1	; 241
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	fc 01       	movw	r30, r24
     474:	10 82       	st	Z, r1
		CANIDT4 = 0;
     476:	80 ef       	ldi	r24, 0xF0	; 240
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	10 82       	st	Z, r1
		CANIDM1 = 0;
     47e:	87 ef       	ldi	r24, 0xF7	; 247
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	fc 01       	movw	r30, r24
     484:	10 82       	st	Z, r1
		CANIDM2 = 0;
     486:	86 ef       	ldi	r24, 0xF6	; 246
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	fc 01       	movw	r30, r24
     48c:	10 82       	st	Z, r1
		CANIDM3 = 0;
     48e:	85 ef       	ldi	r24, 0xF5	; 245
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	fc 01       	movw	r30, r24
     494:	10 82       	st	Z, r1
		CANIDM4 = 0;
     496:	84 ef       	ldi	r24, 0xF4	; 244
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	fc 01       	movw	r30, r24
     49c:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     49e:	1a 82       	std	Y+2, r1	; 0x02
     4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <CAN_Init+0x88>
			CANMSG = 0;
     4a2:	8a ef       	ldi	r24, 0xFA	; 250
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	fc 01       	movw	r30, r24
     4a8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	8f 5f       	subi	r24, 0xFF	; 255
     4ae:	8a 83       	std	Y+2, r24	; 0x02
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	88 30       	cpi	r24, 0x08	; 8
     4b4:	b0 f3       	brcs	.-20     	; 0x4a2 <CAN_Init+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	89 83       	std	Y+1, r24	; 0x01
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	8f 30       	cpi	r24, 0x0F	; 15
     4c0:	08 f4       	brcc	.+2      	; 0x4c4 <CAN_Init+0x9c>
     4c2:	be cf       	rjmp	.-132    	; 0x440 <CAN_Init+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     4c4:	88 ed       	ldi	r24, 0xD8	; 216
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	22 e0       	ldi	r18, 0x02	; 2
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     4ce:	82 ee       	ldi	r24, 0xE2	; 226
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2) | (1 << PRS0); // Propagation Time Segment-> 6xTq-> BILO 5
     4d8:	83 ee       	ldi	r24, 0xE3	; 227
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	2a e0       	ldi	r18, 0x0A	; 10
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS21) /*| (1 << PHS20) */| (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 7xTq, Phase Segment 1-> 8xTq
     4e2:	84 ee       	ldi	r24, 0xE4	; 228
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	2e e6       	ldi	r18, 0x6E	; 110
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     4ec:	85 ee       	ldi	r24, 0xE5	; 229
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	fc 01       	movw	r30, r24
     4f2:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     4f4:	8b ed       	ldi	r24, 0xDB	; 219
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	20 eb       	ldi	r18, 0xB0	; 176
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     4fe:	8f ed       	ldi	r24, 0xDF	; 223
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	2f e7       	ldi	r18, 0x7F	; 127
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     508:	8e ed       	ldi	r24, 0xDE	; 222
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	fc 01       	movw	r30, r24
     510:	20 83       	st	Z, r18

	//sei();
}
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <CAN_InitRxMob>:
					  ide. U slucaju neuspesne inicijalizacije MOb- a vraca 0
* Parameters        : unsigned int ide
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	00 d0       	rcall	.+0      	; 0x522 <CAN_InitRxMob+0x6>
     522:	00 d0       	rcall	.+0      	; 0x524 <CAN_InitRxMob+0x8>
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	9c 83       	std	Y+4, r25	; 0x04
     52a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     52c:	8d ee       	ldi	r24, 0xED	; 237
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	8a 83       	std	Y+2, r24	; 0x02

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     536:	00 00       	nop
     538:	89 ed       	ldi	r24, 0xD9	; 217
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	82 95       	swap	r24
     542:	8f 70       	andi	r24, 0x0F	; 15
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	81 70       	andi	r24, 0x01	; 1
     54a:	99 27       	eor	r25, r25
     54c:	89 2b       	or	r24, r25
     54e:	a1 f7       	brne	.-24     	; 0x538 <CAN_InitRxMob+0x1c>
     550:	89 ed       	ldi	r24, 0xD9	; 217
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	86 95       	lsr	r24
     55a:	86 95       	lsr	r24
     55c:	86 95       	lsr	r24
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	81 70       	andi	r24, 0x01	; 1
     564:	99 27       	eor	r25, r25
     566:	89 2b       	or	r24, r25
     568:	39 f7       	brne	.-50     	; 0x538 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     56a:	19 82       	std	Y+1, r1	; 0x01
     56c:	4a c0       	rjmp	.+148    	; 0x602 <CAN_InitRxMob+0xe6>
	{
		CANPAGE = ch << 4;
     56e:	8d ee       	ldi	r24, 0xED	; 237
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	29 81       	ldd	r18, Y+1	; 0x01
     574:	22 95       	swap	r18
     576:	20 7f       	andi	r18, 0xF0	; 240
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     57c:	8f ee       	ldi	r24, 0xEF	; 239
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	80 81       	ld	r24, Z
     584:	82 95       	swap	r24
     586:	86 95       	lsr	r24
     588:	86 95       	lsr	r24
     58a:	83 70       	andi	r24, 0x03	; 3
     58c:	88 23       	and	r24, r24
     58e:	21 f0       	breq	.+8      	; 0x598 <CAN_InitRxMob+0x7c>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	89 83       	std	Y+1, r24	; 0x01
     596:	35 c0       	rjmp	.+106    	; 0x602 <CAN_InitRxMob+0xe6>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     598:	8f ee       	ldi	r24, 0xEF	; 239
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	2f e0       	ldi	r18, 0x0F	; 15
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     5a2:	83 ef       	ldi	r24, 0xF3	; 243
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	2b 81       	ldd	r18, Y+3	; 0x03
     5a8:	3c 81       	ldd	r19, Y+4	; 0x04
     5aa:	33 27       	eor	r19, r19
     5ac:	36 95       	lsr	r19
     5ae:	27 95       	ror	r18
     5b0:	36 95       	lsr	r19
     5b2:	27 95       	ror	r18
     5b4:	36 95       	lsr	r19
     5b6:	27 95       	ror	r18
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     5bc:	82 ef       	ldi	r24, 0xF2	; 242
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2b 81       	ldd	r18, Y+3	; 0x03
     5c2:	22 95       	swap	r18
     5c4:	22 0f       	add	r18, r18
     5c6:	20 7e       	andi	r18, 0xE0	; 224
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     5cc:	86 ef       	ldi	r24, 0xF6	; 246
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	20 ee       	ldi	r18, 0xE0	; 224
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     5d6:	87 ef       	ldi	r24, 0xF7	; 247
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     5e0:	8f ee       	ldi	r24, 0xEF	; 239
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2f ee       	ldi	r18, 0xEF	; 239
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	20 68       	ori	r18, 0x80	; 128
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
		sei();
     5f2:	78 94       	sei
		CANPAGE = tempPage;
     5f4:	8d ee       	ldi	r24, 0xED	; 237
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	2a 81       	ldd	r18, Y+2	; 0x02
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18

		return 1;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0a c0       	rjmp	.+20     	; 0x616 <CAN_InitRxMob+0xfa>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	8f 30       	cpi	r24, 0x0F	; 15
     606:	08 f4       	brcc	.+2      	; 0x60a <CAN_InitRxMob+0xee>
     608:	b2 cf       	rjmp	.-156    	; 0x56e <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     60a:	8d ee       	ldi	r24, 0xED	; 237
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	2a 81       	ldd	r18, Y+2	; 0x02
     610:	fc 01       	movw	r30, r24
     612:	20 83       	st	Z, r18

	return 0;
     614:	80 e0       	ldi	r24, 0x00	; 0
}
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <CAN_checkRX>:
					  Ako ima vraca 1, u suprotnom vraca 0
* Parameters        : None
* Return Value      : char info da li ima primljenih podataka
*********************************************************************************/
char CAN_checkRX(void)
{
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
	if(rxCounter)
     62c:	80 91 fc 02 	lds	r24, 0x02FC
     630:	88 23       	and	r24, r24
     632:	11 f0       	breq	.+4      	; 0x638 <CAN_checkRX+0x14>
		return 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	01 c0       	rjmp	.+2      	; 0x63a <CAN_checkRX+0x16>

	return 0;
     638:	80 e0       	ldi	r24, 0x00	; 0
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	00 d0       	rcall	.+0      	; 0x646 <CAN_read+0x6>
     646:	1f 92       	push	r1
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	9b 83       	std	Y+3, r25	; 0x03
     64e:	8a 83       	std	Y+2, r24	; 0x02
	// sve dok ne stigne neki podatak ostajem u funkciji

	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
     650:	00 00       	nop
     652:	80 91 fc 02 	lds	r24, 0x02FC
     656:	88 23       	and	r24, r24
     658:	e1 f3       	breq	.-8      	; 0x652 <CAN_read+0x12>
	cli();
     65a:	f8 94       	cli
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     65c:	19 82       	std	Y+1, r1	; 0x01
     65e:	22 c0       	rjmp	.+68     	; 0x6a4 <CAN_read+0x64>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	28 2f       	mov	r18, r24
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	80 91 fa 02 	lds	r24, 0x02FA
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	49 81       	ldd	r20, Y+1	; 0x01
     670:	44 2f       	mov	r20, r20
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	bc 01       	movw	r22, r24
     67a:	66 0f       	add	r22, r22
     67c:	77 1f       	adc	r23, r23
     67e:	66 0f       	add	r22, r22
     680:	77 1f       	adc	r23, r23
     682:	86 0f       	add	r24, r22
     684:	97 1f       	adc	r25, r23
     686:	84 0f       	add	r24, r20
     688:	95 1f       	adc	r25, r21
     68a:	8a 5f       	subi	r24, 0xFA	; 250
     68c:	9e 4f       	sbci	r25, 0xFE	; 254
     68e:	fc 01       	movw	r30, r24
     690:	40 81       	ld	r20, Z
     692:	8a 81       	ldd	r24, Y+2	; 0x02
     694:	9b 81       	ldd	r25, Y+3	; 0x03
     696:	82 0f       	add	r24, r18
     698:	93 1f       	adc	r25, r19
     69a:	fc 01       	movw	r30, r24
     69c:	40 83       	st	Z, r20
	while(rxCounter == 0);
	cli();
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	8f 5f       	subi	r24, 0xFF	; 255
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	88 30       	cpi	r24, 0x08	; 8
     6a8:	d8 f2       	brcs	.-74     	; 0x660 <CAN_read+0x20>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];

	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
     6aa:	80 91 fa 02 	lds	r24, 0x02FA
     6ae:	88 2f       	mov	r24, r24
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	9c 01       	movw	r18, r24
     6b8:	22 0f       	add	r18, r18
     6ba:	33 1f       	adc	r19, r19
     6bc:	22 0f       	add	r18, r18
     6be:	33 1f       	adc	r19, r19
     6c0:	82 0f       	add	r24, r18
     6c2:	93 1f       	adc	r25, r19
     6c4:	82 5f       	subi	r24, 0xF2	; 242
     6c6:	9e 4f       	sbci	r25, 0xFE	; 254
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 81       	ld	r18, Z
     6cc:	31 81       	ldd	r19, Z+1	; 0x01
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	9b 81       	ldd	r25, Y+3	; 0x03
     6d2:	fc 01       	movw	r30, r24
     6d4:	31 87       	std	Z+9, r19	; 0x09
     6d6:	20 87       	std	Z+8, r18	; 0x08

	if(++rxRdIndex == RX_BUFFER_SIZE)
     6d8:	80 91 fa 02 	lds	r24, 0x02FA
     6dc:	8f 5f       	subi	r24, 0xFF	; 255
     6de:	80 93 fa 02 	sts	0x02FA, r24
     6e2:	82 33       	cpi	r24, 0x32	; 50
     6e4:	11 f4       	brne	.+4      	; 0x6ea <CAN_read+0xaa>
		rxRdIndex = 0;
     6e6:	10 92 fa 02 	sts	0x02FA, r1


	rxCounter--;
     6ea:	80 91 fc 02 	lds	r24, 0x02FC
     6ee:	81 50       	subi	r24, 0x01	; 1
     6f0:	80 93 fc 02 	sts	0x02FC, r24
	sei();
     6f4:	78 94       	sei
}
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <CAN_write>:
					  identifikator messIdentificator.
* Parameters        : canMgs txData
* Return Value      : void
*********************************************************************************/
char CAN_write(canMsg txData)
{
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	2d 97       	sbiw	r28, 0x0d	; 13
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	0c 83       	std	Y+4, r16	; 0x04
     71c:	1d 83       	std	Y+5, r17	; 0x05
     71e:	2e 83       	std	Y+6, r18	; 0x06
     720:	3f 83       	std	Y+7, r19	; 0x07
     722:	48 87       	std	Y+8, r20	; 0x08
     724:	59 87       	std	Y+9, r21	; 0x09
     726:	6a 87       	std	Y+10, r22	; 0x0a
     728:	7b 87       	std	Y+11, r23	; 0x0b
     72a:	8c 87       	std	Y+12, r24	; 0x0c
     72c:	9d 87       	std	Y+13, r25	; 0x0d
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     72e:	00 00       	nop
     730:	89 ed       	ldi	r24, 0xD9	; 217
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	82 95       	swap	r24
     73a:	8f 70       	andi	r24, 0x0F	; 15
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	81 70       	andi	r24, 0x01	; 1
     742:	99 27       	eor	r25, r25
     744:	89 2b       	or	r24, r25
     746:	a1 f7       	brne	.-24     	; 0x730 <CAN_write+0x2e>
     748:	89 ed       	ldi	r24, 0xD9	; 217
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
     74e:	80 81       	ld	r24, Z
     750:	86 95       	lsr	r24
     752:	86 95       	lsr	r24
     754:	86 95       	lsr	r24
     756:	88 2f       	mov	r24, r24
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	81 70       	andi	r24, 0x01	; 1
     75c:	99 27       	eor	r25, r25
     75e:	89 2b       	or	r24, r25
     760:	39 f7       	brne	.-50     	; 0x730 <CAN_write+0x2e>
	//taskENTER_CRITICAL();
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     762:	8d ee       	ldi	r24, 0xED	; 237
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	80 81       	ld	r24, Z
     76a:	8b 83       	std	Y+3, r24	; 0x03

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     76c:	19 82       	std	Y+1, r1	; 0x01
     76e:	15 c0       	rjmp	.+42     	; 0x79a <CAN_write+0x98>
	{
		CANPAGE = ch << 4;
     770:	8d ee       	ldi	r24, 0xED	; 237
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	22 95       	swap	r18
     778:	20 7f       	andi	r18, 0xF0	; 240
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     77e:	8f ee       	ldi	r24, 0xEF	; 239
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	fc 01       	movw	r30, r24
     784:	80 81       	ld	r24, Z
     786:	82 95       	swap	r24
     788:	86 95       	lsr	r24
     78a:	86 95       	lsr	r24
     78c:	83 70       	andi	r24, 0x03	; 3
     78e:	88 23       	and	r24, r24
     790:	09 f4       	brne	.+2      	; 0x794 <CAN_write+0x92>
			break;
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <CAN_write+0x9e>

	// ovo je mozda nepotrebno, razmisliti
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	8f 30       	cpi	r24, 0x0F	; 15
     79e:	40 f3       	brcs	.-48     	; 0x770 <CAN_write+0x6e>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	8f 30       	cpi	r24, 0x0F	; 15
     7a4:	11 f4       	brne	.+4      	; 0x7aa <CAN_write+0xa8>
	{
		//taskEXIT_CRITICAL();

		return 0;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	3f c0       	rjmp	.+126    	; 0x828 <CAN_write+0x126>
	}

	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (txData.msgIde & 0x0F) << 5;
     7aa:	82 ef       	ldi	r24, 0xF2	; 242
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	2c 85       	ldd	r18, Y+12	; 0x0c
     7b0:	3d 85       	ldd	r19, Y+13	; 0x0d
     7b2:	22 95       	swap	r18
     7b4:	22 0f       	add	r18, r18
     7b6:	20 7e       	andi	r18, 0xE0	; 224
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
	CANIDT1 = (txData.msgIde) >> 3;
     7bc:	83 ef       	ldi	r24, 0xF3	; 243
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	2c 85       	ldd	r18, Y+12	; 0x0c
     7c2:	3d 85       	ldd	r19, Y+13	; 0x0d
     7c4:	36 95       	lsr	r19
     7c6:	27 95       	ror	r18
     7c8:	36 95       	lsr	r19
     7ca:	27 95       	ror	r18
     7cc:	36 95       	lsr	r19
     7ce:	27 95       	ror	r18
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     7d4:	8f ee       	ldi	r24, 0xEF	; 239
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	28 e0       	ldi	r18, 0x08	; 8
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     7de:	1a 82       	std	Y+2, r1	; 0x02
     7e0:	11 c0       	rjmp	.+34     	; 0x804 <CAN_write+0x102>
		CANMSG = txData.data[i];
     7e2:	8a ef       	ldi	r24, 0xFA	; 250
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	2a 81       	ldd	r18, Y+2	; 0x02
     7e8:	22 2f       	mov	r18, r18
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	ae 01       	movw	r20, r28
     7ee:	4c 5f       	subi	r20, 0xFC	; 252
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	24 0f       	add	r18, r20
     7f4:	35 1f       	adc	r19, r21
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(unsigned char i = 0; i < 8; i++)
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	8a 83       	std	Y+2, r24	; 0x02
     804:	8a 81       	ldd	r24, Y+2	; 0x02
     806:	88 30       	cpi	r24, 0x08	; 8
     808:	60 f3       	brcs	.-40     	; 0x7e2 <CAN_write+0xe0>
		CANMSG = txData.data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     80a:	8f ee       	ldi	r24, 0xEF	; 239
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	2f ee       	ldi	r18, 0xEF	; 239
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	20 81       	ld	r18, Z
     816:	20 64       	ori	r18, 0x40	; 64
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     81c:	8d ee       	ldi	r24, 0xED	; 237
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	2b 81       	ldd	r18, Y+3	; 0x03
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18

	//taskEXIT_CRITICAL();

	return 1;
     826:	81 e0       	ldi	r24, 0x01	; 1
}
     828:	2d 96       	adiw	r28, 0x0d	; 13
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <TIMER3_Init>:

#define SPEED_H 0x02
#define SPEED_L 0x00

void TIMER3_Init(unsigned int f_pwm)
{
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <TIMER3_Init+0xa>
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     850:	8d e2       	ldi	r24, 0x2D	; 45
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	2d e2       	ldi	r18, 0x2D	; 45
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	28 63       	ori	r18, 0x38	; 56
     85e:	fc 01       	movw	r30, r24
     860:	20 83       	st	Z, r18

	TCNT3 = 0;
     862:	84 e9       	ldi	r24, 0x94	; 148
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	fc 01       	movw	r30, r24
     868:	11 82       	std	Z+1, r1	; 0x01
     86a:	10 82       	st	Z, r1
	OCR3A = 0;
     86c:	88 e9       	ldi	r24, 0x98	; 152
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	11 82       	std	Z+1, r1	; 0x01
     874:	10 82       	st	Z, r1
	OCR3B = 0;
     876:	8a e9       	ldi	r24, 0x9A	; 154
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	fc 01       	movw	r30, r24
     87c:	11 82       	std	Z+1, r1	; 0x01
     87e:	10 82       	st	Z, r1
	OCR3C = 0;
     880:	8c e9       	ldi	r24, 0x9C	; 156
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	fc 01       	movw	r30, r24
     886:	11 82       	std	Z+1, r1	; 0x01
     888:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     88a:	80 e9       	ldi	r24, 0x90	; 144
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	2e e3       	ldi	r18, 0x3E	; 62
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS30); // PRESKALER = 1
     894:	81 e9       	ldi	r24, 0x91	; 145
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	29 e1       	ldi	r18, 0x19	; 25
     89a:	fc 01       	movw	r30, r24
     89c:	20 83       	st	Z, r18
	ICR3 = (double)F_CPU / f_pwm - 0.5;
     89e:	06 e9       	ldi	r16, 0x96	; 150
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	9a 81       	ldd	r25, Y+2	; 0x02
     8a6:	cc 01       	movw	r24, r24
     8a8:	a0 e0       	ldi	r26, 0x00	; 0
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	bc 01       	movw	r22, r24
     8ae:	cd 01       	movw	r24, r26
     8b0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__floatunsisf>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	9c 01       	movw	r18, r24
     8ba:	ad 01       	movw	r20, r26
     8bc:	60 e8       	ldi	r22, 0x80	; 128
     8be:	76 e9       	ldi	r23, 0x96	; 150
     8c0:	88 e1       	ldi	r24, 0x18	; 24
     8c2:	9b e4       	ldi	r25, 0x4B	; 75
     8c4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__divsf3>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	5f e3       	ldi	r21, 0x3F	; 63
     8d4:	bc 01       	movw	r22, r24
     8d6:	cd 01       	movw	r24, r26
     8d8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	bc 01       	movw	r22, r24
     8e2:	cd 01       	movw	r24, r26
     8e4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	f8 01       	movw	r30, r16
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
}
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <TIMER1_Init>:

void TIMER1_Init(void)
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = (1 << WGM01) | (1 << CS02);
     908:	84 e4       	ldi	r24, 0x44	; 68
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	2c e0       	ldi	r18, 0x0C	; 12
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);
     912:	8e e6       	ldi	r24, 0x6E	; 110
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	2e e6       	ldi	r18, 0x6E	; 110
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	22 60       	ori	r18, 0x02	; 2
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18
	OCR0A = 43;
     924:	87 e4       	ldi	r24, 0x47	; 71
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	2b e2       	ldi	r18, 0x2B	; 43
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18

	SREG |= 0x80;
     92e:	8f e5       	ldi	r24, 0x5F	; 95
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	2f e5       	ldi	r18, 0x5F	; 95
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	20 68       	ori	r18, 0x80	; 128
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <AX_UART_Init>:

void AX_UART_Init(void)
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	2e 97       	sbiw	r28, 0x0e	; 14
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRE &= ~((1 << 0x00) | (1 << 0x01));
     95a:	8d e2       	ldi	r24, 0x2D	; 45
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	2d e2       	ldi	r18, 0x2D	; 45
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	f9 01       	movw	r30, r18
     964:	20 81       	ld	r18, Z
     966:	2c 7f       	andi	r18, 0xFC	; 252
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR0A = 0;
     96c:	80 ec       	ldi	r24, 0xC0	; 192
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	fc 01       	movw	r30, r24
     972:	10 82       	st	Z, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     974:	81 ec       	ldi	r24, 0xC1	; 193
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	28 e1       	ldi	r18, 0x18	; 24
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
     97e:	82 ec       	ldi	r24, 0xC2	; 194
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	26 e0       	ldi	r18, 0x06	; 6
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18

	UBRR0H = 0;
     988:	85 ec       	ldi	r24, 0xC5	; 197
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	10 82       	st	Z, r1
	UBRR0L = 5;
     990:	84 ec       	ldi	r24, 0xC4	; 196
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	25 e0       	ldi	r18, 0x05	; 5
     996:	fc 01       	movw	r30, r24
     998:	20 83       	st	Z, r18
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	a8 ec       	ldi	r26, 0xC8	; 200
     9a0:	b2 e4       	ldi	r27, 0x42	; 66
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	ab 83       	std	Y+3, r26	; 0x03
     9a8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e4       	ldi	r19, 0x40	; 64
     9ae:	4c e1       	ldi	r20, 0x1C	; 28
     9b0:	55 e4       	ldi	r21, 0x45	; 69
     9b2:	69 81       	ldd	r22, Y+1	; 0x01
     9b4:	7a 81       	ldd	r23, Y+2	; 0x02
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	8d 83       	std	Y+5, r24	; 0x05
     9c4:	9e 83       	std	Y+6, r25	; 0x06
     9c6:	af 83       	std	Y+7, r26	; 0x07
     9c8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	6d 81       	ldd	r22, Y+5	; 0x05
     9d4:	7e 81       	ldd	r23, Y+6	; 0x06
     9d6:	8f 81       	ldd	r24, Y+7	; 0x07
     9d8:	98 85       	ldd	r25, Y+8	; 0x08
     9da:	0e 94 25 0c 	call	0x184a	; 0x184a <__cmpsf2>
     9de:	88 23       	and	r24, r24
     9e0:	2c f4       	brge	.+10     	; 0x9ec <AX_UART_Init+0xa6>
		__ticks = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9a 87       	std	Y+10, r25	; 0x0a
     9e8:	89 87       	std	Y+9, r24	; 0x09
     9ea:	3f c0       	rjmp	.+126    	; 0xa6a <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	3f ef       	ldi	r19, 0xFF	; 255
     9f0:	4f e7       	ldi	r20, 0x7F	; 127
     9f2:	57 e4       	ldi	r21, 0x47	; 71
     9f4:	6d 81       	ldd	r22, Y+5	; 0x05
     9f6:	7e 81       	ldd	r23, Y+6	; 0x06
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__gesf2>
     a00:	18 16       	cp	r1, r24
     a02:	4c f5       	brge	.+82     	; 0xa56 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e2       	ldi	r20, 0x20	; 32
     a0a:	51 e4       	ldi	r21, 0x41	; 65
     a0c:	69 81       	ldd	r22, Y+1	; 0x01
     a0e:	7a 81       	ldd	r23, Y+2	; 0x02
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	bc 01       	movw	r22, r24
     a1e:	cd 01       	movw	r24, r26
     a20:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     a24:	dc 01       	movw	r26, r24
     a26:	cb 01       	movw	r24, r22
     a28:	9a 87       	std	Y+10, r25	; 0x0a
     a2a:	89 87       	std	Y+9, r24	; 0x09
     a2c:	0f c0       	rjmp	.+30     	; 0xa4c <AX_UART_Init+0x106>
     a2e:	8a ef       	ldi	r24, 0xFA	; 250
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	9c 87       	std	Y+12, r25	; 0x0c
     a34:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a36:	8b 85       	ldd	r24, Y+11	; 0x0b
     a38:	9c 85       	ldd	r25, Y+12	; 0x0c
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <AX_UART_Init+0xf4>
     a3e:	9c 87       	std	Y+12, r25	; 0x0c
     a40:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a42:	89 85       	ldd	r24, Y+9	; 0x09
     a44:	9a 85       	ldd	r25, Y+10	; 0x0a
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	9a 87       	std	Y+10, r25	; 0x0a
     a4a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a4c:	89 85       	ldd	r24, Y+9	; 0x09
     a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a50:	89 2b       	or	r24, r25
     a52:	69 f7       	brne	.-38     	; 0xa2e <AX_UART_Init+0xe8>
     a54:	14 c0       	rjmp	.+40     	; 0xa7e <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a56:	6d 81       	ldd	r22, Y+5	; 0x05
     a58:	7e 81       	ldd	r23, Y+6	; 0x06
     a5a:	8f 81       	ldd	r24, Y+7	; 0x07
     a5c:	98 85       	ldd	r25, Y+8	; 0x08
     a5e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	9a 87       	std	Y+10, r25	; 0x0a
     a68:	89 87       	std	Y+9, r24	; 0x09
     a6a:	89 85       	ldd	r24, Y+9	; 0x09
     a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6e:	9e 87       	std	Y+14, r25	; 0x0e
     a70:	8d 87       	std	Y+13, r24	; 0x0d
     a72:	8d 85       	ldd	r24, Y+13	; 0x0d
     a74:	9e 85       	ldd	r25, Y+14	; 0x0e
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <AX_UART_Init+0x130>
     a7a:	9e 87       	std	Y+14, r25	; 0x0e
     a7c:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     a7e:	2e 96       	adiw	r28, 0x0e	; 14
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	1f 92       	push	r1
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR0A & (1<<UDRE0)) );
     a9c:	00 00       	nop
     a9e:	80 ec       	ldi	r24, 0xC0	; 192
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	fc 01       	movw	r30, r24
     aa4:	80 81       	ld	r24, Z
     aa6:	88 2f       	mov	r24, r24
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	80 72       	andi	r24, 0x20	; 32
     aac:	99 27       	eor	r25, r25
     aae:	89 2b       	or	r24, r25
     ab0:	b1 f3       	breq	.-20     	; 0xa9e <AX_SendChar+0xe>
	UDR0 = data;
     ab2:	86 ec       	ldi	r24, 0xC6	; 198
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	29 81       	ldd	r18, Y+1	; 0x01
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
}
     abc:	0f 90       	pop	r0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR0A & (1<< RXC0)) );
     acc:	00 00       	nop
     ace:	80 ec       	ldi	r24, 0xC0	; 192
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
     ad6:	88 23       	and	r24, r24
     ad8:	d4 f7       	brge	.-12     	; 0xace <AX_ReadChar+0xa>
   return UDR0;
     ada:	86 ec       	ldi	r24, 0xC6	; 198
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	27 97       	sbiw	r28, 0x07	; 7
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     afc:	27 e0       	ldi	r18, 0x07	; 7
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	fc 01       	movw	r30, r24
     b04:	32 2f       	mov	r19, r18
     b06:	11 92       	st	Z+, r1
     b08:	3a 95       	dec	r19
     b0a:	e9 f7       	brne	.-6      	; 0xb06 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     b0c:	0e 94 62 05 	call	0xac4	; 0xac4 <AX_ReadChar>
     b10:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     b12:	0e 94 62 05 	call	0xac4	; 0xac4 <AX_ReadChar>
     b16:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     b18:	0e 94 62 05 	call	0xac4	; 0xac4 <AX_ReadChar>
     b1c:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     b1e:	0e 94 62 05 	call	0xac4	; 0xac4 <AX_ReadChar>
     b22:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     b24:	0e 94 62 05 	call	0xac4	; 0xac4 <AX_ReadChar>
     b28:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     b2a:	0e 94 62 05 	call	0xac4	; 0xac4 <AX_ReadChar>
     b2e:	8e 83       	std	Y+6, r24	; 0x06
}
     b30:	27 96       	adiw	r28, 0x07	; 7
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR0A & (1<<TXC0)) );
     b4a:	00 00       	nop
     b4c:	80 ec       	ldi	r24, 0xC0	; 192
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	fc 01       	movw	r30, r24
     b52:	80 81       	ld	r24, Z
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	80 74       	andi	r24, 0x40	; 64
     b5a:	99 27       	eor	r25, r25
     b5c:	89 2b       	or	r24, r25
     b5e:	b1 f3       	breq	.-20     	; 0xb4c <AX_StopTransmitter+0xa>
	UCSR0B &= 0xF7;
     b60:	81 ec       	ldi	r24, 0xC1	; 193
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	21 ec       	ldi	r18, 0xC1	; 193
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	27 7f       	andi	r18, 0xF7	; 247
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
	UCSR0A |= 0x40;
     b72:	80 ec       	ldi	r24, 0xC0	; 192
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	20 ec       	ldi	r18, 0xC0	; 192
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	20 64       	ori	r18, 0x40	; 64
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x08;
     b92:	81 ec       	ldi	r24, 0xC1	; 193
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	21 ec       	ldi	r18, 0xC1	; 193
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	f9 01       	movw	r30, r18
     b9c:	20 81       	ld	r18, Z
     b9e:	28 60       	ori	r18, 0x08	; 8
     ba0:	fc 01       	movw	r30, r24
     ba2:	20 83       	st	Z, r18
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= 0xEF;
     bb2:	81 ec       	ldi	r24, 0xC1	; 193
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	21 ec       	ldi	r18, 0xC1	; 193
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	f9 01       	movw	r30, r18
     bbc:	20 81       	ld	r18, Z
     bbe:	2f 7e       	andi	r18, 0xEF	; 239
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= 0x10;
     bd2:	81 ec       	ldi	r24, 0xC1	; 193
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	21 ec       	ldi	r18, 0xC1	; 193
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	20 61       	ori	r18, 0x10	; 16
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	6a 97       	sbiw	r28, 0x1a	; 26
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	9e 8b       	std	Y+22, r25	; 0x16
     c00:	8d 8b       	std	Y+21, r24	; 0x15
     c02:	78 8f       	std	Y+24, r23	; 0x18
     c04:	6f 8b       	std	Y+23, r22	; 0x17
     c06:	49 8f       	std	Y+25, r20	; 0x19
     c08:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     c0a:	8d 89       	ldd	r24, Y+21	; 0x15
     c0c:	9e 89       	ldd	r25, Y+22	; 0x16
     c0e:	cc 01       	movw	r24, r24
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__floatunsisf>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	46 e9       	ldi	r20, 0x96	; 150
     c26:	53 e4       	ldi	r21, 0x43	; 67
     c28:	bc 01       	movw	r22, r24
     c2a:	cd 01       	movw	r24, r26
     c2c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__divsf3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 ec       	ldi	r19, 0xC0	; 192
     c38:	4f e7       	ldi	r20, 0x7F	; 127
     c3a:	54 e4       	ldi	r21, 0x44	; 68
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	cd 01       	movw	r24, r26
     c4c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	9e 8b       	std	Y+22, r25	; 0x16
     c56:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     c58:	8d 89       	ldd	r24, Y+21	; 0x15
     c5a:	9e 89       	ldd	r25, Y+22	; 0x16
     c5c:	89 2f       	mov	r24, r25
     c5e:	99 27       	eor	r25, r25
     c60:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     c62:	8d 89       	ldd	r24, Y+21	; 0x15
     c64:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     c66:	89 8d       	ldd	r24, Y+25	; 0x19
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	98 2f       	mov	r25, r24
     c6e:	88 27       	eor	r24, r24
     c70:	99 0f       	add	r25, r25
     c72:	99 0f       	add	r25, r25
     c74:	9c 01       	movw	r18, r24
     c76:	8f 89       	ldd	r24, Y+23	; 0x17
     c78:	98 8d       	ldd	r25, Y+24	; 0x18
     c7a:	82 2b       	or	r24, r18
     c7c:	93 2b       	or	r25, r19
     c7e:	98 8f       	std	Y+24, r25	; 0x18
     c80:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     c82:	8f 89       	ldd	r24, Y+23	; 0x17
     c84:	98 8d       	ldd	r25, Y+24	; 0x18
     c86:	89 2f       	mov	r24, r25
     c88:	99 27       	eor	r25, r25
     c8a:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     c8c:	8f 89       	ldd	r24, Y+23	; 0x17
     c8e:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     c90:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	9c 01       	movw	r18, r24
     c98:	28 5d       	subi	r18, 0xD8	; 216
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	28 0f       	add	r18, r24
     ca4:	39 1f       	adc	r19, r25
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	28 0f       	add	r18, r24
     cae:	39 1f       	adc	r19, r25
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	28 0f       	add	r18, r24
     cb8:	39 1f       	adc	r19, r25
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	80 95       	com	r24
     cc6:	90 95       	com	r25
     cc8:	9e 83       	std	Y+6, r25	; 0x06
     cca:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     ccc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <AX_StopReceiver>

	AX_SendChar(START);
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(START);
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(id);
     cdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cde:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(LENGTH);
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(INSTR);
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(ADDRESS);
     cee:	8e e1       	ldi	r24, 0x1E	; 30
     cf0:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(angle_L);
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(angle_H);
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(speed_L);
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(speed_H);
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(checksum);
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>

	AX_StopTransmitter();
     d12:	0e 94 a1 05 	call	0xb42	; 0xb42 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     d16:	0e 94 e5 05 	call	0xbca	; 0xbca <AX_ReleaseReceiver>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a8 e4       	ldi	r26, 0x48	; 72
     d20:	b2 e4       	ldi	r27, 0x42	; 66
     d22:	8f 83       	std	Y+7, r24	; 0x07
     d24:	98 87       	std	Y+8, r25	; 0x08
     d26:	a9 87       	std	Y+9, r26	; 0x09
     d28:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e4       	ldi	r19, 0x40	; 64
     d2e:	4c e1       	ldi	r20, 0x1C	; 28
     d30:	55 e4       	ldi	r21, 0x45	; 69
     d32:	6f 81       	ldd	r22, Y+7	; 0x07
     d34:	78 85       	ldd	r23, Y+8	; 0x08
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8b 87       	std	Y+11, r24	; 0x0b
     d44:	9c 87       	std	Y+12, r25	; 0x0c
     d46:	ad 87       	std	Y+13, r26	; 0x0d
     d48:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	6b 85       	ldd	r22, Y+11	; 0x0b
     d54:	7c 85       	ldd	r23, Y+12	; 0x0c
     d56:	8d 85       	ldd	r24, Y+13	; 0x0d
     d58:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5a:	0e 94 25 0c 	call	0x184a	; 0x184a <__cmpsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <AX_SetAngle+0x182>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	98 8b       	std	Y+16, r25	; 0x10
     d68:	8f 87       	std	Y+15, r24	; 0x0f
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	6b 85       	ldd	r22, Y+11	; 0x0b
     d76:	7c 85       	ldd	r23, Y+12	; 0x0c
     d78:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__gesf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	6f 81       	ldd	r22, Y+7	; 0x07
     d8e:	78 85       	ldd	r23, Y+8	; 0x08
     d90:	89 85       	ldd	r24, Y+9	; 0x09
     d92:	9a 85       	ldd	r25, Y+10	; 0x0a
     d94:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	98 8b       	std	Y+16, r25	; 0x10
     daa:	8f 87       	std	Y+15, r24	; 0x0f
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <AX_SetAngle+0x1e2>
     dae:	8a ef       	ldi	r24, 0xFA	; 250
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9a 8b       	std	Y+18, r25	; 0x12
     db4:	89 8b       	std	Y+17, r24	; 0x11
     db6:	89 89       	ldd	r24, Y+17	; 0x11
     db8:	9a 89       	ldd	r25, Y+18	; 0x12
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <AX_SetAngle+0x1d0>
     dbe:	9a 8b       	std	Y+18, r25	; 0x12
     dc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc4:	98 89       	ldd	r25, Y+16	; 0x10
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	98 8b       	std	Y+16, r25	; 0x10
     dca:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dce:	98 89       	ldd	r25, Y+16	; 0x10
     dd0:	89 2b       	or	r24, r25
     dd2:	69 f7       	brne	.-38     	; 0xdae <AX_SetAngle+0x1c4>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dda:	8d 85       	ldd	r24, Y+13	; 0x0d
     ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dde:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	98 8b       	std	Y+16, r25	; 0x10
     de8:	8f 87       	std	Y+15, r24	; 0x0f
     dea:	8f 85       	ldd	r24, Y+15	; 0x0f
     dec:	98 89       	ldd	r25, Y+16	; 0x10
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
     df2:	8b 89       	ldd	r24, Y+19	; 0x13
     df4:	9c 89       	ldd	r25, Y+20	; 0x14
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <AX_SetAngle+0x20c>
     dfa:	9c 8b       	std	Y+20, r25	; 0x14
     dfc:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     dfe:	0e 94 c5 05 	call	0xb8a	; 0xb8a <AX_ReleaseTransmitter>
}
     e02:	6a 96       	adiw	r28, 0x1a	; 26
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	60 97       	sbiw	r28, 0x10	; 16
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     e28:	8c ee       	ldi	r24, 0xEC	; 236
     e2a:	9f ef       	ldi	r25, 0xFF	; 255
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     e30:	0e 94 d5 05 	call	0xbaa	; 0xbaa <AX_StopReceiver>

	AX_SendChar(0xFF);
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0xFF);
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x01);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x07);
     e46:	87 e0       	ldi	r24, 0x07	; 7
     e48:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x03);
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x06);
     e52:	86 e0       	ldi	r24, 0x06	; 6
     e54:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x00);
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x00);
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(checksum);
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>

	AX_StopTransmitter();
     e76:	0e 94 a1 05 	call	0xb42	; 0xb42 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     e7a:	0e 94 e5 05 	call	0xbca	; 0xbca <AX_ReleaseReceiver>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a8 e4       	ldi	r26, 0x48	; 72
     e84:	b2 e4       	ldi	r27, 0x42	; 66
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	9c 83       	std	Y+4, r25	; 0x04
     e8a:	ad 83       	std	Y+5, r26	; 0x05
     e8c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e4       	ldi	r19, 0x40	; 64
     e92:	4c e1       	ldi	r20, 0x1C	; 28
     e94:	55 e4       	ldi	r21, 0x45	; 69
     e96:	6b 81       	ldd	r22, Y+3	; 0x03
     e98:	7c 81       	ldd	r23, Y+4	; 0x04
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	a9 87       	std	Y+9, r26	; 0x09
     eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	0e 94 25 0c 	call	0x184a	; 0x184a <__cmpsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	2c f4       	brge	.+10     	; 0xed0 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9c 87       	std	Y+12, r25	; 0x0c
     ecc:	8b 87       	std	Y+11, r24	; 0x0b
     ece:	3f c0       	rjmp	.+126    	; 0xf4e <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	4f e7       	ldi	r20, 0x7F	; 127
     ed6:	57 e4       	ldi	r21, 0x47	; 71
     ed8:	6f 81       	ldd	r22, Y+7	; 0x07
     eda:	78 85       	ldd	r23, Y+8	; 0x08
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__gesf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	4c f5       	brge	.+82     	; 0xf3a <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e2       	ldi	r20, 0x20	; 32
     eee:	51 e4       	ldi	r21, 0x41	; 65
     ef0:	6b 81       	ldd	r22, Y+3	; 0x03
     ef2:	7c 81       	ldd	r23, Y+4	; 0x04
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9c 87       	std	Y+12, r25	; 0x0c
     f0e:	8b 87       	std	Y+11, r24	; 0x0b
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <AX_EndlessTurn+0x11c>
     f12:	8a ef       	ldi	r24, 0xFA	; 250
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9e 87       	std	Y+14, r25	; 0x0e
     f18:	8d 87       	std	Y+13, r24	; 0x0d
     f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <AX_EndlessTurn+0x10a>
     f22:	9e 87       	std	Y+14, r25	; 0x0e
     f24:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	8b 85       	ldd	r24, Y+11	; 0x0b
     f28:	9c 85       	ldd	r25, Y+12	; 0x0c
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	9c 87       	std	Y+12, r25	; 0x0c
     f2e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	8b 85       	ldd	r24, Y+11	; 0x0b
     f32:	9c 85       	ldd	r25, Y+12	; 0x0c
     f34:	89 2b       	or	r24, r25
     f36:	69 f7       	brne	.-38     	; 0xf12 <AX_EndlessTurn+0xfe>
     f38:	14 c0       	rjmp	.+40     	; 0xf62 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9c 87       	std	Y+12, r25	; 0x0c
     f4c:	8b 87       	std	Y+11, r24	; 0x0b
     f4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f50:	9c 85       	ldd	r25, Y+12	; 0x0c
     f52:	98 8b       	std	Y+16, r25	; 0x10
     f54:	8f 87       	std	Y+15, r24	; 0x0f
     f56:	8f 85       	ldd	r24, Y+15	; 0x0f
     f58:	98 89       	ldd	r25, Y+16	; 0x10
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <AX_EndlessTurn+0x146>
     f5e:	98 8b       	std	Y+16, r25	; 0x10
     f60:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     f62:	0e 94 c5 05 	call	0xb8a	; 0xb8a <AX_ReleaseTransmitter>
}
     f66:	60 96       	adiw	r28, 0x10	; 16
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	28 97       	sbiw	r28, 0x08	; 8
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	9e 83       	std	Y+6, r25	; 0x06
     f8e:	8d 83       	std	Y+5, r24	; 0x05
     f90:	78 87       	std	Y+8, r23	; 0x08
     f92:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     f94:	1a 82       	std	Y+2, r1	; 0x02
     f96:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     f98:	1c 82       	std	Y+4, r1	; 0x04
     f9a:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     f9c:	8f 81       	ldd	r24, Y+7	; 0x07
     f9e:	98 85       	ldd	r25, Y+8	; 0x08
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	98 2f       	mov	r25, r24
     faa:	88 27       	eor	r24, r24
     fac:	99 0f       	add	r25, r25
     fae:	99 0f       	add	r25, r25
     fb0:	29 81       	ldd	r18, Y+1	; 0x01
     fb2:	3a 81       	ldd	r19, Y+2	; 0x02
     fb4:	82 2b       	or	r24, r18
     fb6:	93 2b       	or	r25, r19
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	89 96       	adiw	r24, 0x29	; 41
     fc2:	80 95       	com	r24
     fc4:	90 95       	com	r25
     fc6:	9c 83       	std	Y+4, r25	; 0x04
     fc8:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     fca:	0e 94 d5 05 	call	0xbaa	; 0xbaa <AX_StopReceiver>

	AX_SendChar(0xFF);
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0xFF);
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x01);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x05);
     fe0:	85 e0       	ldi	r24, 0x05	; 5
     fe2:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x03);
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(0x20);
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(data);
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(data >> 8);
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	89 2f       	mov	r24, r25
     ffe:	99 27       	eor	r25, r25
    1000:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>
	AX_SendChar(checksum);
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	0e 94 48 05 	call	0xa90	; 0xa90 <AX_SendChar>

	AX_StopTransmitter();
    100a:	0e 94 a1 05 	call	0xb42	; 0xb42 <AX_StopTransmitter>
	AX_ReleaseReceiver();
    100e:	0e 94 e5 05 	call	0xbca	; 0xbca <AX_ReleaseReceiver>

	AX_ReadStatus();
    1012:	0e 94 74 05 	call	0xae8	; 0xae8 <AX_ReadStatus>

	AX_ReleaseTransmitter();
    1016:	0e 94 c5 05 	call	0xb8a	; 0xb8a <AX_ReleaseTransmitter>
}
    101a:	28 96       	adiw	r28, 0x08	; 8
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <main>:
#include "system.h"



int main(void)
{
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	68 97       	sbiw	r28, 0x18	; 24
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61

	AX_UART_Init();
    1044:	0e 94 a3 04 	call	0x946	; 0x946 <AX_UART_Init>
	CAN_Init();
    1048:	0e 94 14 02 	call	0x428	; 0x428 <CAN_Init>
	CAN_InitRxMob(LIFT_IDE);
    104c:	84 ed       	ldi	r24, 0xD4	; 212
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 8e 02 	call	0x51c	; 0x51c <CAN_InitRxMob>
	systemInit();
    1054:	0e 94 83 0b 	call	0x1706	; 0x1706 <systemInit>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	aa e7       	ldi	r26, 0x7A	; 122
    105e:	b4 e4       	ldi	r27, 0x44	; 68
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	ab 83       	std	Y+3, r26	; 0x03
    1066:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e4       	ldi	r19, 0x40	; 64
    106c:	4c e1       	ldi	r20, 0x1C	; 28
    106e:	55 e4       	ldi	r21, 0x45	; 69
    1070:	69 81       	ldd	r22, Y+1	; 0x01
    1072:	7a 81       	ldd	r23, Y+2	; 0x02
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8d 83       	std	Y+5, r24	; 0x05
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	af 83       	std	Y+7, r26	; 0x07
    1086:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e8       	ldi	r20, 0x80	; 128
    108e:	5f e3       	ldi	r21, 0x3F	; 63
    1090:	6d 81       	ldd	r22, Y+5	; 0x05
    1092:	7e 81       	ldd	r23, Y+6	; 0x06
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	98 85       	ldd	r25, Y+8	; 0x08
    1098:	0e 94 25 0c 	call	0x184a	; 0x184a <__cmpsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <main+0x7e>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9a 87       	std	Y+10, r25	; 0x0a
    10a6:	89 87       	std	Y+9, r24	; 0x09
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <__stack+0x29>
	else if (__tmp > 65535)
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
    10ae:	4f e7       	ldi	r20, 0x7F	; 127
    10b0:	57 e4       	ldi	r21, 0x47	; 71
    10b2:	6d 81       	ldd	r22, Y+5	; 0x05
    10b4:	7e 81       	ldd	r23, Y+6	; 0x06
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	98 85       	ldd	r25, Y+8	; 0x08
    10ba:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__gesf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <__stack+0x15>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	69 81       	ldd	r22, Y+1	; 0x01
    10cc:	7a 81       	ldd	r23, Y+2	; 0x02
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9a 87       	std	Y+10, r25	; 0x0a
    10e8:	89 87       	std	Y+9, r24	; 0x09
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <__stack+0xb>
    10ec:	8a ef       	ldi	r24, 0xFA	; 250
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9c 87       	std	Y+12, r25	; 0x0c
    10f2:	8b 87       	std	Y+11, r24	; 0x0b
    10f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <main+0xcc>
    10fc:	9c 87       	std	Y+12, r25	; 0x0c
    10fe:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9a 87       	std	Y+10, r25	; 0x0a
    1108:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	89 2b       	or	r24, r25
    1110:	69 f7       	brne	.-38     	; 0x10ec <main+0xc0>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <__stack+0x3d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6d 81       	ldd	r22, Y+5	; 0x05
    1116:	7e 81       	ldd	r23, Y+6	; 0x06
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	98 85       	ldd	r25, Y+8	; 0x08
    111c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9a 87       	std	Y+10, r25	; 0x0a
    1126:	89 87       	std	Y+9, r24	; 0x09
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	9e 87       	std	Y+14, r25	; 0x0e
    112e:	8d 87       	std	Y+13, r24	; 0x0d
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <__stack+0x35>
    1138:	9e 87       	std	Y+14, r25	; 0x0e
    113a:	8d 87       	std	Y+13, r24	; 0x0d
    {
      /*CAN_read(&message);

			action(message);
			message.data[0] = 0;*/
    action(message);
    113c:	0f 85       	ldd	r16, Y+15	; 0x0f
    113e:	18 89       	ldd	r17, Y+16	; 0x10
    1140:	29 89       	ldd	r18, Y+17	; 0x11
    1142:	3a 89       	ldd	r19, Y+18	; 0x12
    1144:	4b 89       	ldd	r20, Y+19	; 0x13
    1146:	5c 89       	ldd	r21, Y+20	; 0x14
    1148:	6d 89       	ldd	r22, Y+21	; 0x15
    114a:	7e 89       	ldd	r23, Y+22	; 0x16
    114c:	8f 89       	ldd	r24, Y+23	; 0x17
    114e:	98 8d       	ldd	r25, Y+24	; 0x18
    1150:	0e 94 0f 01 	call	0x21e	; 0x21e <action>

    }
    1154:	f3 cf       	rjmp	.-26     	; 0x113c <__stack+0x3d>

00001156 <GPIO_PinRegister>:
static volatile GPIOOutData *outputs[MAX_OUTPUTS];
static volatile unsigned char inputsNumber = 0;
static volatile unsigned char outputsNumber = 0;

unsigned char GPIO_PinRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_PinRegister+0xa>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <GPIO_PinRegister+0xc>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9b 83       	std	Y+3, r25	; 0x03
    1168:	8a 83       	std	Y+2, r24	; 0x02
    116a:	6c 83       	std	Y+4, r22	; 0x04
	if(inputsNumber >= MAX_INPUTS)
    116c:	80 91 25 03 	lds	r24, 0x0325
    1170:	8a 30       	cpi	r24, 0x0A	; 10
    1172:	10 f0       	brcs	.+4      	; 0x1178 <GPIO_PinRegister+0x22>
		return 0;
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	8f c0       	rjmp	.+286    	; 0x1296 <GPIO_PinRegister+0x140>

	unsigned char i;

	gpios[inputsNumber] = (GPIOData *)malloc(sizeof(GPIOData));
    1178:	80 91 25 03 	lds	r24, 0x0325
    117c:	08 2f       	mov	r16, r24
    117e:	10 e0       	ldi	r17, 0x00	; 0
    1180:	86 e0       	ldi	r24, 0x06	; 6
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <malloc>
    1188:	9c 01       	movw	r18, r24
    118a:	c8 01       	movw	r24, r16
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	83 50       	subi	r24, 0x03	; 3
    1192:	9d 4f       	sbci	r25, 0xFD	; 253
    1194:	fc 01       	movw	r30, r24
    1196:	31 83       	std	Z+1, r19	; 0x01
    1198:	20 83       	st	Z, r18
	if(gpios[inputsNumber] == NULL)
    119a:	80 91 25 03 	lds	r24, 0x0325
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	83 50       	subi	r24, 0x03	; 3
    11a8:	9d 4f       	sbci	r25, 0xFD	; 253
    11aa:	fc 01       	movw	r30, r24
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	89 2b       	or	r24, r25
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <GPIO_PinRegister+0x62>
		return -1;
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	6f c0       	rjmp	.+222    	; 0x1296 <GPIO_PinRegister+0x140>

	gpios[inputsNumber]->baseAddress = baseAddress;
    11b8:	80 91 25 03 	lds	r24, 0x0325
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	83 50       	subi	r24, 0x03	; 3
    11c6:	9d 4f       	sbci	r25, 0xFD	; 253
    11c8:	fc 01       	movw	r30, r24
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	2a 81       	ldd	r18, Y+2	; 0x02
    11d0:	3b 81       	ldd	r19, Y+3	; 0x03
    11d2:	fc 01       	movw	r30, r24
    11d4:	31 83       	std	Z+1, r19	; 0x01
    11d6:	20 83       	st	Z, r18
	gpios[inputsNumber]->pinPosition = pin;
    11d8:	80 91 25 03 	lds	r24, 0x0325
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	83 50       	subi	r24, 0x03	; 3
    11e6:	9d 4f       	sbci	r25, 0xFD	; 253
    11e8:	fc 01       	movw	r30, r24
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	2c 81       	ldd	r18, Y+4	; 0x04
    11f0:	fc 01       	movw	r30, r24
    11f2:	22 83       	std	Z+2, r18	; 0x02
	for(i = 0; i < 3; i++)
    11f4:	19 82       	std	Y+1, r1	; 0x01
    11f6:	16 c0       	rjmp	.+44     	; 0x1224 <GPIO_PinRegister+0xce>
		gpios[inputsNumber]->buffer[i] = 0;
    11f8:	80 91 25 03 	lds	r24, 0x0325
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	83 50       	subi	r24, 0x03	; 3
    1206:	9d 4f       	sbci	r25, 0xFD	; 253
    1208:	fc 01       	movw	r30, r24
    120a:	20 81       	ld	r18, Z
    120c:	31 81       	ldd	r19, Z+1	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	82 0f       	add	r24, r18
    1216:	93 1f       	adc	r25, r19
    1218:	03 96       	adiw	r24, 0x03	; 3
    121a:	fc 01       	movw	r30, r24
    121c:	10 82       	st	Z, r1
	if(gpios[inputsNumber] == NULL)
		return -1;

	gpios[inputsNumber]->baseAddress = baseAddress;
	gpios[inputsNumber]->pinPosition = pin;
	for(i = 0; i < 3; i++)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	38 f3       	brcs	.-50     	; 0x11f8 <GPIO_PinRegister+0xa2>
		gpios[inputsNumber]->buffer[i] = 0;

	_MMIO_BYTE(baseAddress - 1) &= ~(1 << pin);
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	9b 81       	ldd	r25, Y+3	; 0x03
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	3b 81       	ldd	r19, Y+3	; 0x03
    1234:	21 50       	subi	r18, 0x01	; 1
    1236:	31 09       	sbc	r19, r1
    1238:	f9 01       	movw	r30, r18
    123a:	20 81       	ld	r18, Z
    123c:	62 2f       	mov	r22, r18
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	42 2f       	mov	r20, r18
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	21 e0       	ldi	r18, 0x01	; 1
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_PinRegister+0xf8>
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	4a 95       	dec	r20
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_PinRegister+0xf4>
    1252:	20 95       	com	r18
    1254:	26 23       	and	r18, r22
    1256:	fc 01       	movw	r30, r24
    1258:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) |= (1 << pin);
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	fc 01       	movw	r30, r24
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <GPIO_PinRegister+0x11e>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	2a 95       	dec	r18
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <GPIO_PinRegister+0x11a>
    1278:	84 2b       	or	r24, r20
    127a:	28 2f       	mov	r18, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18

	i = inputsNumber;
    1284:	80 91 25 03 	lds	r24, 0x0325
    1288:	89 83       	std	Y+1, r24	; 0x01
	inputsNumber++;
    128a:	80 91 25 03 	lds	r24, 0x0325
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	80 93 25 03 	sts	0x0325, r24

	return i;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <GPIO_OutputRegister>:

signed char GPIO_OutputRegister(volatile unsigned char *baseAddress, unsigned char pin)
{
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <GPIO_OutputRegister+0xa>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <GPIO_OutputRegister+0xc>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	9b 83       	std	Y+3, r25	; 0x03
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	6c 83       	std	Y+4, r22	; 0x04
	if(outputsNumber >= MAX_OUTPUTS)
    12be:	80 91 26 03 	lds	r24, 0x0326
    12c2:	8a 30       	cpi	r24, 0x0A	; 10
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <GPIO_OutputRegister+0x22>
		return -1;
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	74 c0       	rjmp	.+232    	; 0x13b2 <GPIO_OutputRegister+0x10a>

	unsigned char i;

	outputs[outputsNumber] = (GPIOOutData *)malloc(sizeof(GPIOOutData));
    12ca:	80 91 26 03 	lds	r24, 0x0326
    12ce:	08 2f       	mov	r16, r24
    12d0:	10 e0       	ldi	r17, 0x00	; 0
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <malloc>
    12da:	9c 01       	movw	r18, r24
    12dc:	c8 01       	movw	r24, r16
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	8f 5e       	subi	r24, 0xEF	; 239
    12e4:	9c 4f       	sbci	r25, 0xFC	; 252
    12e6:	fc 01       	movw	r30, r24
    12e8:	31 83       	std	Z+1, r19	; 0x01
    12ea:	20 83       	st	Z, r18
	if(outputs[outputsNumber] == NULL)
    12ec:	80 91 26 03 	lds	r24, 0x0326
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	8f 5e       	subi	r24, 0xEF	; 239
    12fa:	9c 4f       	sbci	r25, 0xFC	; 252
    12fc:	fc 01       	movw	r30, r24
    12fe:	80 81       	ld	r24, Z
    1300:	91 81       	ldd	r25, Z+1	; 0x01
    1302:	89 2b       	or	r24, r25
    1304:	11 f4       	brne	.+4      	; 0x130a <GPIO_OutputRegister+0x62>
		return -1;
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	54 c0       	rjmp	.+168    	; 0x13b2 <GPIO_OutputRegister+0x10a>

	outputs[outputsNumber]->baseAddress = baseAddress;
    130a:	80 91 26 03 	lds	r24, 0x0326
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	8f 5e       	subi	r24, 0xEF	; 239
    1318:	9c 4f       	sbci	r25, 0xFC	; 252
    131a:	fc 01       	movw	r30, r24
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	2a 81       	ldd	r18, Y+2	; 0x02
    1322:	3b 81       	ldd	r19, Y+3	; 0x03
    1324:	fc 01       	movw	r30, r24
    1326:	31 83       	std	Z+1, r19	; 0x01
    1328:	20 83       	st	Z, r18
	outputs[outputsNumber]->pinPosition = pin;
    132a:	80 91 26 03 	lds	r24, 0x0326
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	8f 5e       	subi	r24, 0xEF	; 239
    1338:	9c 4f       	sbci	r25, 0xFC	; 252
    133a:	fc 01       	movw	r30, r24
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	fc 01       	movw	r30, r24
    1344:	22 83       	std	Z+2, r18	; 0x02

	_MMIO_BYTE(baseAddress - 1) |= (1 << pin);
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	2a 81       	ldd	r18, Y+2	; 0x02
    134e:	3b 81       	ldd	r19, Y+3	; 0x03
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	31 09       	sbc	r19, r1
    1354:	f9 01       	movw	r30, r18
    1356:	20 81       	ld	r18, Z
    1358:	62 2f       	mov	r22, r18
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	42 2f       	mov	r20, r18
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	21 e0       	ldi	r18, 0x01	; 1
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_OutputRegister+0xc2>
    1366:	22 0f       	add	r18, r18
    1368:	33 1f       	adc	r19, r19
    136a:	4a 95       	dec	r20
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_OutputRegister+0xbe>
    136e:	26 2b       	or	r18, r22
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
	_MMIO_BYTE(baseAddress) &= ~(1 << pin);
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	fc 01       	movw	r30, r24
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 c0       	rjmp	.+4      	; 0x138e <GPIO_OutputRegister+0xe6>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	2a 95       	dec	r18
    1390:	e2 f7       	brpl	.-8      	; 0x138a <GPIO_OutputRegister+0xe2>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	28 2f       	mov	r18, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	9b 81       	ldd	r25, Y+3	; 0x03
    139c:	fc 01       	movw	r30, r24
    139e:	20 83       	st	Z, r18

	i = outputsNumber;
    13a0:	80 91 26 03 	lds	r24, 0x0326
    13a4:	89 83       	std	Y+1, r24	; 0x01
	outputsNumber++;
    13a6:	80 91 26 03 	lds	r24, 0x0326
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	80 93 26 03 	sts	0x0326, r24

	return i;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <GPIO_OutputSet>:

signed char GPIO_OutputSet(unsigned char outHandler)
{
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    13d0:	80 91 26 03 	lds	r24, 0x0326
    13d4:	99 81       	ldd	r25, Y+1	; 0x01
    13d6:	98 17       	cp	r25, r24
    13d8:	10 f0       	brcs	.+4      	; 0x13de <GPIO_OutputSet+0x1a>
		return -1;
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	2a c0       	rjmp	.+84     	; 0x1432 <GPIO_OutputSet+0x6e>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) |= (1 << outputs[outHandler]->pinPosition);
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	8f 5e       	subi	r24, 0xEF	; 239
    13ea:	9c 4f       	sbci	r25, 0xFC	; 252
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	fc 01       	movw	r30, r24
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	ac 01       	movw	r20, r24
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_OutputSet+0x42>
    1402:	44 0f       	add	r20, r20
    1404:	55 1f       	adc	r21, r21
    1406:	2a 95       	dec	r18
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_OutputSet+0x3e>
    140a:	9a 01       	movw	r18, r20
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	8f 5e       	subi	r24, 0xEF	; 239
    1418:	9c 4f       	sbci	r25, 0xFC	; 252
    141a:	fc 01       	movw	r30, r24
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	fc 01       	movw	r30, r24
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	fc 01       	movw	r30, r24
    1428:	40 81       	ld	r20, Z
    142a:	24 2b       	or	r18, r20
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18

	return 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
}
    1432:	0f 90       	pop	r0
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <GPIO_OutputReset>:

signed char GPIO_OutputReset(unsigned char outHandler)
{
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	1f 92       	push	r1
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	89 83       	std	Y+1, r24	; 0x01
	if(outHandler >= outputsNumber)
    1446:	80 91 26 03 	lds	r24, 0x0326
    144a:	99 81       	ldd	r25, Y+1	; 0x01
    144c:	98 17       	cp	r25, r24
    144e:	10 f0       	brcs	.+4      	; 0x1454 <GPIO_OutputReset+0x1a>
		return -1;
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	2b c0       	rjmp	.+86     	; 0x14aa <GPIO_OutputReset+0x70>

	_MMIO_BYTE(outputs[outHandler]->baseAddress) &= ~(1 << outputs[outHandler]->pinPosition);
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	8f 5e       	subi	r24, 0xEF	; 239
    1460:	9c 4f       	sbci	r25, 0xFC	; 252
    1462:	fc 01       	movw	r30, r24
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	fc 01       	movw	r30, r24
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_OutputReset+0x40>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	2a 95       	dec	r18
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_OutputReset+0x3c>
    147e:	9c 01       	movw	r18, r24
    1480:	20 95       	com	r18
    1482:	30 95       	com	r19
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	8f 5e       	subi	r24, 0xEF	; 239
    1490:	9c 4f       	sbci	r25, 0xFC	; 252
    1492:	fc 01       	movw	r30, r24
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	fc 01       	movw	r30, r24
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	fc 01       	movw	r30, r24
    14a0:	40 81       	ld	r20, Z
    14a2:	24 23       	and	r18, r20
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18

	return 0;
    14a8:	80 e0       	ldi	r24, 0x00	; 0
}
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <GPIO_PinRead>:

unsigned char GPIO_PinRead(unsigned char pinHandler)
{
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	1f 92       	push	r1
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	89 83       	std	Y+1, r24	; 0x01
	return !( (gpios[pinHandler]->buffer[0]) | (gpios[pinHandler]->buffer[1]) | (gpios[pinHandler]->buffer[2]) );
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	83 50       	subi	r24, 0x03	; 3
    14ca:	9d 4f       	sbci	r25, 0xFD	; 253
    14cc:	fc 01       	movw	r30, r24
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	fc 01       	movw	r30, r24
    14d4:	23 81       	ldd	r18, Z+3	; 0x03
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	83 50       	subi	r24, 0x03	; 3
    14e2:	9d 4f       	sbci	r25, 0xFD	; 253
    14e4:	fc 01       	movw	r30, r24
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	fc 01       	movw	r30, r24
    14ec:	84 81       	ldd	r24, Z+4	; 0x04
    14ee:	28 2b       	or	r18, r24
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	83 50       	subi	r24, 0x03	; 3
    14fc:	9d 4f       	sbci	r25, 0xFD	; 253
    14fe:	fc 01       	movw	r30, r24
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	fc 01       	movw	r30, r24
    1506:	85 81       	ldd	r24, Z+5	; 0x05
    1508:	92 2f       	mov	r25, r18
    150a:	98 2b       	or	r25, r24
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	99 23       	and	r25, r25
    1510:	09 f0       	breq	.+2      	; 0x1514 <GPIO_PinRead+0x62>
    1512:	80 e0       	ldi	r24, 0x00	; 0
}
    1514:	0f 90       	pop	r0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <GPIO_ReadFromRegister>:

unsigned char GPIO_ReadFromRegister(unsigned char pinHandler)
{
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	00 d0       	rcall	.+0      	; 0x1522 <GPIO_ReadFromRegister+0x6>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char state = 0;
    1528:	19 82       	std	Y+1, r1	; 0x01

	state = ((_MMIO_BYTE(gpios[pinHandler]->baseAddress - 2)) >> (gpios[pinHandler]->pinPosition)) & 0x01;
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	83 50       	subi	r24, 0x03	; 3
    1536:	9d 4f       	sbci	r25, 0xFD	; 253
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	fc 01       	movw	r30, r24
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	02 97       	sbiw	r24, 0x02	; 2
    1546:	fc 01       	movw	r30, r24
    1548:	80 81       	ld	r24, Z
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	2a 81       	ldd	r18, Y+2	; 0x02
    1550:	22 2f       	mov	r18, r18
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	23 50       	subi	r18, 0x03	; 3
    155a:	3d 4f       	sbci	r19, 0xFD	; 253
    155c:	f9 01       	movw	r30, r18
    155e:	20 81       	ld	r18, Z
    1560:	31 81       	ldd	r19, Z+1	; 0x01
    1562:	f9 01       	movw	r30, r18
    1564:	22 81       	ldd	r18, Z+2	; 0x02
    1566:	22 2f       	mov	r18, r18
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_ReadFromRegister+0x54>
    156c:	95 95       	asr	r25
    156e:	87 95       	ror	r24
    1570:	2a 95       	dec	r18
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_ReadFromRegister+0x50>
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01

	return state;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <fillDebaunsingData>:

void fillDebaunsingData(void)
{
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	1f 92       	push	r1
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	static char j = 0;

	if(++j >= 3)
    1596:	80 91 27 03 	lds	r24, 0x0327
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 93 27 03 	sts	0x0327, r24
    15a0:	80 91 27 03 	lds	r24, 0x0327
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <fillDebaunsingData+0x28>
		j = 0;
    15a8:	10 92 27 03 	sts	0x0327, r1

	for(i = 0; i < inputsNumber; ++i)
    15ac:	19 82       	std	Y+1, r1	; 0x01
    15ae:	1b c0       	rjmp	.+54     	; 0x15e6 <fillDebaunsingData+0x62>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	83 50       	subi	r24, 0x03	; 3
    15bc:	9d 4f       	sbci	r25, 0xFD	; 253
    15be:	fc 01       	movw	r30, r24
    15c0:	e0 80       	ld	r14, Z
    15c2:	f1 80       	ldd	r15, Z+1	; 0x01
    15c4:	80 91 27 03 	lds	r24, 0x0327
    15c8:	08 2f       	mov	r16, r24
    15ca:	10 e0       	ldi	r17, 0x00	; 0
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	0e 94 8e 0a 	call	0x151c	; 0x151c <GPIO_ReadFromRegister>
    15d2:	28 2f       	mov	r18, r24
    15d4:	c7 01       	movw	r24, r14
    15d6:	80 0f       	add	r24, r16
    15d8:	91 1f       	adc	r25, r17
    15da:	03 96       	adiw	r24, 0x03	; 3
    15dc:	fc 01       	movw	r30, r24
    15de:	20 83       	st	Z, r18
	static char j = 0;

	if(++j >= 3)
		j = 0;

	for(i = 0; i < inputsNumber; ++i)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	80 91 25 03 	lds	r24, 0x0325
    15ea:	99 81       	ldd	r25, Y+1	; 0x01
    15ec:	98 17       	cp	r25, r24
    15ee:	00 f3       	brcs	.-64     	; 0x15b0 <fillDebaunsingData+0x2c>
		gpios[i]->buffer[j] = GPIO_ReadFromRegister(i);
}
    15f0:	0f 90       	pop	r0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	08 95       	ret

00001600 <Timer_Init>:

void Timer_Init(unsigned int freq)
{
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	00 d0       	rcall	.+0      	; 0x160a <Timer_Init+0xa>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1612:	80 e8       	ldi	r24, 0x80	; 128
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	fc 01       	movw	r30, r24
    1618:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    161a:	81 e8       	ldi	r24, 0x81	; 129
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	29 e0       	ldi	r18, 0x09	; 9
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / freq + 0.5;
    1624:	08 e8       	ldi	r16, 0x88	; 136
    1626:	10 e0       	ldi	r17, 0x00	; 0
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	cc 01       	movw	r24, r24
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__floatunsisf>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9c 01       	movw	r18, r24
    1640:	ad 01       	movw	r20, r26
    1642:	60 e8       	ldi	r22, 0x80	; 128
    1644:	76 e9       	ldi	r23, 0x96	; 150
    1646:	88 e1       	ldi	r24, 0x18	; 24
    1648:	9b e4       	ldi	r25, 0x4B	; 75
    164a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__divsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__addsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	f8 01       	movw	r30, r16
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1678:	8f e6       	ldi	r24, 0x6F	; 111
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	22 e0       	ldi	r18, 0x02	; 2
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18

	SREG |= 0x80;
    1682:	8f e5       	ldi	r24, 0x5F	; 95
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	2f e5       	ldi	r18, 0x5F	; 95
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	f9 01       	movw	r30, r18
    168c:	20 81       	ld	r18, Z
    168e:	20 68       	ori	r18, 0x80	; 128
    1690:	fc 01       	movw	r30, r24
    1692:	20 83       	st	Z, r18
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	00 90 5f 00 	lds	r0, 0x005F
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	00 90 5b 00 	lds	r0, 0x005B
    16b2:	0f 92       	push	r0
    16b4:	2f 93       	push	r18
    16b6:	3f 93       	push	r19
    16b8:	4f 93       	push	r20
    16ba:	5f 93       	push	r21
    16bc:	6f 93       	push	r22
    16be:	7f 93       	push	r23
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	af 93       	push	r26
    16c6:	bf 93       	push	r27
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	fillDebaunsingData();
    16d4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fillDebaunsingData>
    #if USE_TIMER_HOOK == 1
    Timer_Hook();
    #endif // USE_TIMER_HOOK
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	00 92 5b 00 	sts	0x005B, r0
    16fa:	0f 90       	pop	r0
    16fc:	00 92 5f 00 	sts	0x005F, r0
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <systemInit>:

void systemInit(void)
{
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	Timer_Init(1000);
    170e:	88 ee       	ldi	r24, 0xE8	; 232
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 00 0b 	call	0x1600	; 0x1600 <Timer_Init>

	chipSelect = GPIO_OutputRegister(GPIOF_BASE, 7);
    1716:	67 e0       	ldi	r22, 0x07	; 7
    1718:	81 e3       	ldi	r24, 0x31	; 49
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GPIO_OutputRegister>
    1720:	80 93 28 03 	sts	0x0328, r24
	INA1 = GPIO_OutputRegister(GPIOF_BASE, 6);
    1724:	66 e0       	ldi	r22, 0x06	; 6
    1726:	81 e3       	ldi	r24, 0x31	; 49
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GPIO_OutputRegister>
    172e:	80 93 29 03 	sts	0x0329, r24
	INB1 = GPIO_OutputRegister(GPIOF_BASE, 5);
    1732:	65 e0       	ldi	r22, 0x05	; 5
    1734:	81 e3       	ldi	r24, 0x31	; 49
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GPIO_OutputRegister>
    173c:	80 93 2c 03 	sts	0x032C, r24
	PWM = GPIO_OutputRegister(GPIOE_BASE, 3);
    1740:	63 e0       	ldi	r22, 0x03	; 3
    1742:	8e e2       	ldi	r24, 0x2E	; 46
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GPIO_OutputRegister>
    174a:	80 93 2a 03 	sts	0x032A, r24
	pinE4 = GPIO_OutputRegister(GPIOE_BASE, 4);
    174e:	64 e0       	ldi	r22, 0x04	; 4
    1750:	8e e2       	ldi	r24, 0x2E	; 46
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GPIO_OutputRegister>
    1758:	80 93 2b 03 	sts	0x032B, r24
	pinE5 = GPIO_OutputRegister(GPIOE_BASE, 5);
    175c:	65 e0       	ldi	r22, 0x05	; 5
    175e:	8e e2       	ldi	r24, 0x2E	; 46
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GPIO_OutputRegister>
    1766:	80 93 2d 03 	sts	0x032D, r24

}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <__subsf3>:
    1770:	50 58       	subi	r21, 0x80	; 128

00001772 <__addsf3>:
    1772:	bb 27       	eor	r27, r27
    1774:	aa 27       	eor	r26, r26
    1776:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__addsf3x>
    177a:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_round>
    177e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscA>
    1782:	38 f0       	brcs	.+14     	; 0x1792 <__addsf3+0x20>
    1784:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscB>
    1788:	20 f0       	brcs	.+8      	; 0x1792 <__addsf3+0x20>
    178a:	39 f4       	brne	.+14     	; 0x179a <__addsf3+0x28>
    178c:	9f 3f       	cpi	r25, 0xFF	; 255
    178e:	19 f4       	brne	.+6      	; 0x1796 <__addsf3+0x24>
    1790:	26 f4       	brtc	.+8      	; 0x179a <__addsf3+0x28>
    1792:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__fp_nan>
    1796:	0e f4       	brtc	.+2      	; 0x179a <__addsf3+0x28>
    1798:	e0 95       	com	r30
    179a:	e7 fb       	bst	r30, 7
    179c:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>

000017a0 <__addsf3x>:
    17a0:	e9 2f       	mov	r30, r25
    17a2:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_split3>
    17a6:	58 f3       	brcs	.-42     	; 0x177e <__addsf3+0xc>
    17a8:	ba 17       	cp	r27, r26
    17aa:	62 07       	cpc	r22, r18
    17ac:	73 07       	cpc	r23, r19
    17ae:	84 07       	cpc	r24, r20
    17b0:	95 07       	cpc	r25, r21
    17b2:	20 f0       	brcs	.+8      	; 0x17bc <__addsf3x+0x1c>
    17b4:	79 f4       	brne	.+30     	; 0x17d4 <__addsf3x+0x34>
    17b6:	a6 f5       	brtc	.+104    	; 0x1820 <__addsf3x+0x80>
    17b8:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__fp_zero>
    17bc:	0e f4       	brtc	.+2      	; 0x17c0 <__addsf3x+0x20>
    17be:	e0 95       	com	r30
    17c0:	0b 2e       	mov	r0, r27
    17c2:	ba 2f       	mov	r27, r26
    17c4:	a0 2d       	mov	r26, r0
    17c6:	0b 01       	movw	r0, r22
    17c8:	b9 01       	movw	r22, r18
    17ca:	90 01       	movw	r18, r0
    17cc:	0c 01       	movw	r0, r24
    17ce:	ca 01       	movw	r24, r20
    17d0:	a0 01       	movw	r20, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	ff 27       	eor	r31, r31
    17d6:	59 1b       	sub	r21, r25
    17d8:	99 f0       	breq	.+38     	; 0x1800 <__addsf3x+0x60>
    17da:	59 3f       	cpi	r21, 0xF9	; 249
    17dc:	50 f4       	brcc	.+20     	; 0x17f2 <__addsf3x+0x52>
    17de:	50 3e       	cpi	r21, 0xE0	; 224
    17e0:	68 f1       	brcs	.+90     	; 0x183c <__addsf3x+0x9c>
    17e2:	1a 16       	cp	r1, r26
    17e4:	f0 40       	sbci	r31, 0x00	; 0
    17e6:	a2 2f       	mov	r26, r18
    17e8:	23 2f       	mov	r18, r19
    17ea:	34 2f       	mov	r19, r20
    17ec:	44 27       	eor	r20, r20
    17ee:	58 5f       	subi	r21, 0xF8	; 248
    17f0:	f3 cf       	rjmp	.-26     	; 0x17d8 <__addsf3x+0x38>
    17f2:	46 95       	lsr	r20
    17f4:	37 95       	ror	r19
    17f6:	27 95       	ror	r18
    17f8:	a7 95       	ror	r26
    17fa:	f0 40       	sbci	r31, 0x00	; 0
    17fc:	53 95       	inc	r21
    17fe:	c9 f7       	brne	.-14     	; 0x17f2 <__addsf3x+0x52>
    1800:	7e f4       	brtc	.+30     	; 0x1820 <__addsf3x+0x80>
    1802:	1f 16       	cp	r1, r31
    1804:	ba 0b       	sbc	r27, r26
    1806:	62 0b       	sbc	r22, r18
    1808:	73 0b       	sbc	r23, r19
    180a:	84 0b       	sbc	r24, r20
    180c:	ba f0       	brmi	.+46     	; 0x183c <__addsf3x+0x9c>
    180e:	91 50       	subi	r25, 0x01	; 1
    1810:	a1 f0       	breq	.+40     	; 0x183a <__addsf3x+0x9a>
    1812:	ff 0f       	add	r31, r31
    1814:	bb 1f       	adc	r27, r27
    1816:	66 1f       	adc	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	c2 f7       	brpl	.-16     	; 0x180e <__addsf3x+0x6e>
    181e:	0e c0       	rjmp	.+28     	; 0x183c <__addsf3x+0x9c>
    1820:	ba 0f       	add	r27, r26
    1822:	62 1f       	adc	r22, r18
    1824:	73 1f       	adc	r23, r19
    1826:	84 1f       	adc	r24, r20
    1828:	48 f4       	brcc	.+18     	; 0x183c <__addsf3x+0x9c>
    182a:	87 95       	ror	r24
    182c:	77 95       	ror	r23
    182e:	67 95       	ror	r22
    1830:	b7 95       	ror	r27
    1832:	f7 95       	ror	r31
    1834:	9e 3f       	cpi	r25, 0xFE	; 254
    1836:	08 f0       	brcs	.+2      	; 0x183a <__addsf3x+0x9a>
    1838:	b0 cf       	rjmp	.-160    	; 0x179a <__addsf3+0x28>
    183a:	93 95       	inc	r25
    183c:	88 0f       	add	r24, r24
    183e:	08 f0       	brcs	.+2      	; 0x1842 <__addsf3x+0xa2>
    1840:	99 27       	eor	r25, r25
    1842:	ee 0f       	add	r30, r30
    1844:	97 95       	ror	r25
    1846:	87 95       	ror	r24
    1848:	08 95       	ret

0000184a <__cmpsf2>:
    184a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__fp_cmp>
    184e:	08 f4       	brcc	.+2      	; 0x1852 <__cmpsf2+0x8>
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	08 95       	ret

00001854 <__divsf3>:
    1854:	0e 94 3e 0c 	call	0x187c	; 0x187c <__divsf3x>
    1858:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_round>
    185c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscB>
    1860:	58 f0       	brcs	.+22     	; 0x1878 <__divsf3+0x24>
    1862:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscA>
    1866:	40 f0       	brcs	.+16     	; 0x1878 <__divsf3+0x24>
    1868:	29 f4       	brne	.+10     	; 0x1874 <__divsf3+0x20>
    186a:	5f 3f       	cpi	r21, 0xFF	; 255
    186c:	29 f0       	breq	.+10     	; 0x1878 <__divsf3+0x24>
    186e:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    1872:	51 11       	cpse	r21, r1
    1874:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>
    1878:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__fp_nan>

0000187c <__divsf3x>:
    187c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_split3>
    1880:	68 f3       	brcs	.-38     	; 0x185c <__divsf3+0x8>

00001882 <__divsf3_pse>:
    1882:	99 23       	and	r25, r25
    1884:	b1 f3       	breq	.-20     	; 0x1872 <__divsf3+0x1e>
    1886:	55 23       	and	r21, r21
    1888:	91 f3       	breq	.-28     	; 0x186e <__divsf3+0x1a>
    188a:	95 1b       	sub	r25, r21
    188c:	55 0b       	sbc	r21, r21
    188e:	bb 27       	eor	r27, r27
    1890:	aa 27       	eor	r26, r26
    1892:	62 17       	cp	r22, r18
    1894:	73 07       	cpc	r23, r19
    1896:	84 07       	cpc	r24, r20
    1898:	38 f0       	brcs	.+14     	; 0x18a8 <__divsf3_pse+0x26>
    189a:	9f 5f       	subi	r25, 0xFF	; 255
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	22 0f       	add	r18, r18
    18a0:	33 1f       	adc	r19, r19
    18a2:	44 1f       	adc	r20, r20
    18a4:	aa 1f       	adc	r26, r26
    18a6:	a9 f3       	breq	.-22     	; 0x1892 <__divsf3_pse+0x10>
    18a8:	35 d0       	rcall	.+106    	; 0x1914 <__divsf3_pse+0x92>
    18aa:	0e 2e       	mov	r0, r30
    18ac:	3a f0       	brmi	.+14     	; 0x18bc <__divsf3_pse+0x3a>
    18ae:	e0 e8       	ldi	r30, 0x80	; 128
    18b0:	32 d0       	rcall	.+100    	; 0x1916 <__divsf3_pse+0x94>
    18b2:	91 50       	subi	r25, 0x01	; 1
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	e6 95       	lsr	r30
    18b8:	00 1c       	adc	r0, r0
    18ba:	ca f7       	brpl	.-14     	; 0x18ae <__divsf3_pse+0x2c>
    18bc:	2b d0       	rcall	.+86     	; 0x1914 <__divsf3_pse+0x92>
    18be:	fe 2f       	mov	r31, r30
    18c0:	29 d0       	rcall	.+82     	; 0x1914 <__divsf3_pse+0x92>
    18c2:	66 0f       	add	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	bb 1f       	adc	r27, r27
    18ca:	26 17       	cp	r18, r22
    18cc:	37 07       	cpc	r19, r23
    18ce:	48 07       	cpc	r20, r24
    18d0:	ab 07       	cpc	r26, r27
    18d2:	b0 e8       	ldi	r27, 0x80	; 128
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <__divsf3_pse+0x56>
    18d6:	bb 0b       	sbc	r27, r27
    18d8:	80 2d       	mov	r24, r0
    18da:	bf 01       	movw	r22, r30
    18dc:	ff 27       	eor	r31, r31
    18de:	93 58       	subi	r25, 0x83	; 131
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	3a f0       	brmi	.+14     	; 0x18f2 <__divsf3_pse+0x70>
    18e4:	9e 3f       	cpi	r25, 0xFE	; 254
    18e6:	51 05       	cpc	r21, r1
    18e8:	78 f0       	brcs	.+30     	; 0x1908 <__divsf3_pse+0x86>
    18ea:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    18ee:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>
    18f2:	5f 3f       	cpi	r21, 0xFF	; 255
    18f4:	e4 f3       	brlt	.-8      	; 0x18ee <__divsf3_pse+0x6c>
    18f6:	98 3e       	cpi	r25, 0xE8	; 232
    18f8:	d4 f3       	brlt	.-12     	; 0x18ee <__divsf3_pse+0x6c>
    18fa:	86 95       	lsr	r24
    18fc:	77 95       	ror	r23
    18fe:	67 95       	ror	r22
    1900:	b7 95       	ror	r27
    1902:	f7 95       	ror	r31
    1904:	9f 5f       	subi	r25, 0xFF	; 255
    1906:	c9 f7       	brne	.-14     	; 0x18fa <__divsf3_pse+0x78>
    1908:	88 0f       	add	r24, r24
    190a:	91 1d       	adc	r25, r1
    190c:	96 95       	lsr	r25
    190e:	87 95       	ror	r24
    1910:	97 f9       	bld	r25, 7
    1912:	08 95       	ret
    1914:	e1 e0       	ldi	r30, 0x01	; 1
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	bb 1f       	adc	r27, r27
    191e:	62 17       	cp	r22, r18
    1920:	73 07       	cpc	r23, r19
    1922:	84 07       	cpc	r24, r20
    1924:	ba 07       	cpc	r27, r26
    1926:	20 f0       	brcs	.+8      	; 0x1930 <__divsf3_pse+0xae>
    1928:	62 1b       	sub	r22, r18
    192a:	73 0b       	sbc	r23, r19
    192c:	84 0b       	sbc	r24, r20
    192e:	ba 0b       	sbc	r27, r26
    1930:	ee 1f       	adc	r30, r30
    1932:	88 f7       	brcc	.-30     	; 0x1916 <__divsf3_pse+0x94>
    1934:	e0 95       	com	r30
    1936:	08 95       	ret

00001938 <__fixunssfsi>:
    1938:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__fp_splitA>
    193c:	88 f0       	brcs	.+34     	; 0x1960 <__fixunssfsi+0x28>
    193e:	9f 57       	subi	r25, 0x7F	; 127
    1940:	98 f0       	brcs	.+38     	; 0x1968 <__fixunssfsi+0x30>
    1942:	b9 2f       	mov	r27, r25
    1944:	99 27       	eor	r25, r25
    1946:	b7 51       	subi	r27, 0x17	; 23
    1948:	b0 f0       	brcs	.+44     	; 0x1976 <__fixunssfsi+0x3e>
    194a:	e1 f0       	breq	.+56     	; 0x1984 <__fixunssfsi+0x4c>
    194c:	66 0f       	add	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	1a f0       	brmi	.+6      	; 0x195c <__fixunssfsi+0x24>
    1956:	ba 95       	dec	r27
    1958:	c9 f7       	brne	.-14     	; 0x194c <__fixunssfsi+0x14>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <__fixunssfsi+0x4c>
    195c:	b1 30       	cpi	r27, 0x01	; 1
    195e:	91 f0       	breq	.+36     	; 0x1984 <__fixunssfsi+0x4c>
    1960:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__fp_zero>
    1964:	b1 e0       	ldi	r27, 0x01	; 1
    1966:	08 95       	ret
    1968:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__fp_zero>
    196c:	67 2f       	mov	r22, r23
    196e:	78 2f       	mov	r23, r24
    1970:	88 27       	eor	r24, r24
    1972:	b8 5f       	subi	r27, 0xF8	; 248
    1974:	39 f0       	breq	.+14     	; 0x1984 <__fixunssfsi+0x4c>
    1976:	b9 3f       	cpi	r27, 0xF9	; 249
    1978:	cc f3       	brlt	.-14     	; 0x196c <__fixunssfsi+0x34>
    197a:	86 95       	lsr	r24
    197c:	77 95       	ror	r23
    197e:	67 95       	ror	r22
    1980:	b3 95       	inc	r27
    1982:	d9 f7       	brne	.-10     	; 0x197a <__fixunssfsi+0x42>
    1984:	3e f4       	brtc	.+14     	; 0x1994 <__fixunssfsi+0x5c>
    1986:	90 95       	com	r25
    1988:	80 95       	com	r24
    198a:	70 95       	com	r23
    198c:	61 95       	neg	r22
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	8f 4f       	sbci	r24, 0xFF	; 255
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	08 95       	ret

00001996 <__floatunsisf>:
    1996:	e8 94       	clt
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <__floatsisf+0x12>

0000199a <__floatsisf>:
    199a:	97 fb       	bst	r25, 7
    199c:	3e f4       	brtc	.+14     	; 0x19ac <__floatsisf+0x12>
    199e:	90 95       	com	r25
    19a0:	80 95       	com	r24
    19a2:	70 95       	com	r23
    19a4:	61 95       	neg	r22
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	8f 4f       	sbci	r24, 0xFF	; 255
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	99 23       	and	r25, r25
    19ae:	a9 f0       	breq	.+42     	; 0x19da <__floatsisf+0x40>
    19b0:	f9 2f       	mov	r31, r25
    19b2:	96 e9       	ldi	r25, 0x96	; 150
    19b4:	bb 27       	eor	r27, r27
    19b6:	93 95       	inc	r25
    19b8:	f6 95       	lsr	r31
    19ba:	87 95       	ror	r24
    19bc:	77 95       	ror	r23
    19be:	67 95       	ror	r22
    19c0:	b7 95       	ror	r27
    19c2:	f1 11       	cpse	r31, r1
    19c4:	f8 cf       	rjmp	.-16     	; 0x19b6 <__floatsisf+0x1c>
    19c6:	fa f4       	brpl	.+62     	; 0x1a06 <__floatsisf+0x6c>
    19c8:	bb 0f       	add	r27, r27
    19ca:	11 f4       	brne	.+4      	; 0x19d0 <__floatsisf+0x36>
    19cc:	60 ff       	sbrs	r22, 0
    19ce:	1b c0       	rjmp	.+54     	; 0x1a06 <__floatsisf+0x6c>
    19d0:	6f 5f       	subi	r22, 0xFF	; 255
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	8f 4f       	sbci	r24, 0xFF	; 255
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	16 c0       	rjmp	.+44     	; 0x1a06 <__floatsisf+0x6c>
    19da:	88 23       	and	r24, r24
    19dc:	11 f0       	breq	.+4      	; 0x19e2 <__floatsisf+0x48>
    19de:	96 e9       	ldi	r25, 0x96	; 150
    19e0:	11 c0       	rjmp	.+34     	; 0x1a04 <__floatsisf+0x6a>
    19e2:	77 23       	and	r23, r23
    19e4:	21 f0       	breq	.+8      	; 0x19ee <__floatsisf+0x54>
    19e6:	9e e8       	ldi	r25, 0x8E	; 142
    19e8:	87 2f       	mov	r24, r23
    19ea:	76 2f       	mov	r23, r22
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <__floatsisf+0x5e>
    19ee:	66 23       	and	r22, r22
    19f0:	71 f0       	breq	.+28     	; 0x1a0e <__floatsisf+0x74>
    19f2:	96 e8       	ldi	r25, 0x86	; 134
    19f4:	86 2f       	mov	r24, r22
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	2a f0       	brmi	.+10     	; 0x1a06 <__floatsisf+0x6c>
    19fc:	9a 95       	dec	r25
    19fe:	66 0f       	add	r22, r22
    1a00:	77 1f       	adc	r23, r23
    1a02:	88 1f       	adc	r24, r24
    1a04:	da f7       	brpl	.-10     	; 0x19fc <__floatsisf+0x62>
    1a06:	88 0f       	add	r24, r24
    1a08:	96 95       	lsr	r25
    1a0a:	87 95       	ror	r24
    1a0c:	97 f9       	bld	r25, 7
    1a0e:	08 95       	ret

00001a10 <__fp_cmp>:
    1a10:	99 0f       	add	r25, r25
    1a12:	00 08       	sbc	r0, r0
    1a14:	55 0f       	add	r21, r21
    1a16:	aa 0b       	sbc	r26, r26
    1a18:	e0 e8       	ldi	r30, 0x80	; 128
    1a1a:	fe ef       	ldi	r31, 0xFE	; 254
    1a1c:	16 16       	cp	r1, r22
    1a1e:	17 06       	cpc	r1, r23
    1a20:	e8 07       	cpc	r30, r24
    1a22:	f9 07       	cpc	r31, r25
    1a24:	c0 f0       	brcs	.+48     	; 0x1a56 <__fp_cmp+0x46>
    1a26:	12 16       	cp	r1, r18
    1a28:	13 06       	cpc	r1, r19
    1a2a:	e4 07       	cpc	r30, r20
    1a2c:	f5 07       	cpc	r31, r21
    1a2e:	98 f0       	brcs	.+38     	; 0x1a56 <__fp_cmp+0x46>
    1a30:	62 1b       	sub	r22, r18
    1a32:	73 0b       	sbc	r23, r19
    1a34:	84 0b       	sbc	r24, r20
    1a36:	95 0b       	sbc	r25, r21
    1a38:	39 f4       	brne	.+14     	; 0x1a48 <__fp_cmp+0x38>
    1a3a:	0a 26       	eor	r0, r26
    1a3c:	61 f0       	breq	.+24     	; 0x1a56 <__fp_cmp+0x46>
    1a3e:	23 2b       	or	r18, r19
    1a40:	24 2b       	or	r18, r20
    1a42:	25 2b       	or	r18, r21
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <__fp_cmp+0x3e>
    1a46:	08 95       	ret
    1a48:	0a 26       	eor	r0, r26
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <__fp_cmp+0x3e>
    1a4c:	a1 40       	sbci	r26, 0x01	; 1
    1a4e:	a6 95       	lsr	r26
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	81 1d       	adc	r24, r1
    1a54:	81 1d       	adc	r24, r1
    1a56:	08 95       	ret

00001a58 <__fp_inf>:
    1a58:	97 f9       	bld	r25, 7
    1a5a:	9f 67       	ori	r25, 0x7F	; 127
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	08 95       	ret

00001a64 <__fp_nan>:
    1a64:	9f ef       	ldi	r25, 0xFF	; 255
    1a66:	80 ec       	ldi	r24, 0xC0	; 192
    1a68:	08 95       	ret

00001a6a <__fp_pscA>:
    1a6a:	00 24       	eor	r0, r0
    1a6c:	0a 94       	dec	r0
    1a6e:	16 16       	cp	r1, r22
    1a70:	17 06       	cpc	r1, r23
    1a72:	18 06       	cpc	r1, r24
    1a74:	09 06       	cpc	r0, r25
    1a76:	08 95       	ret

00001a78 <__fp_pscB>:
    1a78:	00 24       	eor	r0, r0
    1a7a:	0a 94       	dec	r0
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	14 06       	cpc	r1, r20
    1a82:	05 06       	cpc	r0, r21
    1a84:	08 95       	ret

00001a86 <__fp_round>:
    1a86:	09 2e       	mov	r0, r25
    1a88:	03 94       	inc	r0
    1a8a:	00 0c       	add	r0, r0
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <__fp_round+0xc>
    1a8e:	88 23       	and	r24, r24
    1a90:	52 f0       	brmi	.+20     	; 0x1aa6 <__fp_round+0x20>
    1a92:	bb 0f       	add	r27, r27
    1a94:	40 f4       	brcc	.+16     	; 0x1aa6 <__fp_round+0x20>
    1a96:	bf 2b       	or	r27, r31
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <__fp_round+0x18>
    1a9a:	60 ff       	sbrs	r22, 0
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <__fp_round+0x20>
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	08 95       	ret

00001aa8 <__fp_split3>:
    1aa8:	57 fd       	sbrc	r21, 7
    1aaa:	90 58       	subi	r25, 0x80	; 128
    1aac:	44 0f       	add	r20, r20
    1aae:	55 1f       	adc	r21, r21
    1ab0:	59 f0       	breq	.+22     	; 0x1ac8 <__fp_splitA+0x10>
    1ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <__fp_splitA+0x1a>
    1ab6:	47 95       	ror	r20

00001ab8 <__fp_splitA>:
    1ab8:	88 0f       	add	r24, r24
    1aba:	97 fb       	bst	r25, 7
    1abc:	99 1f       	adc	r25, r25
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <__fp_splitA+0x20>
    1ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ac2:	79 f0       	breq	.+30     	; 0x1ae2 <__fp_splitA+0x2a>
    1ac4:	87 95       	ror	r24
    1ac6:	08 95       	ret
    1ac8:	12 16       	cp	r1, r18
    1aca:	13 06       	cpc	r1, r19
    1acc:	14 06       	cpc	r1, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	f2 cf       	rjmp	.-28     	; 0x1ab6 <__fp_split3+0xe>
    1ad2:	46 95       	lsr	r20
    1ad4:	f1 df       	rcall	.-30     	; 0x1ab8 <__fp_splitA>
    1ad6:	08 c0       	rjmp	.+16     	; 0x1ae8 <__fp_splitA+0x30>
    1ad8:	16 16       	cp	r1, r22
    1ada:	17 06       	cpc	r1, r23
    1adc:	18 06       	cpc	r1, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	f1 cf       	rjmp	.-30     	; 0x1ac4 <__fp_splitA+0xc>
    1ae2:	86 95       	lsr	r24
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	61 05       	cpc	r22, r1
    1ae8:	08 94       	sec
    1aea:	08 95       	ret

00001aec <__fp_zero>:
    1aec:	e8 94       	clt

00001aee <__fp_szero>:
    1aee:	bb 27       	eor	r27, r27
    1af0:	66 27       	eor	r22, r22
    1af2:	77 27       	eor	r23, r23
    1af4:	cb 01       	movw	r24, r22
    1af6:	97 f9       	bld	r25, 7
    1af8:	08 95       	ret

00001afa <__gesf2>:
    1afa:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__fp_cmp>
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <__gesf2+0x8>
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	08 95       	ret

00001b04 <__mulsf3>:
    1b04:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__mulsf3x>
    1b08:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_round>
    1b0c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_pscA>
    1b10:	38 f0       	brcs	.+14     	; 0x1b20 <__mulsf3+0x1c>
    1b12:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscB>
    1b16:	20 f0       	brcs	.+8      	; 0x1b20 <__mulsf3+0x1c>
    1b18:	95 23       	and	r25, r21
    1b1a:	11 f0       	breq	.+4      	; 0x1b20 <__mulsf3+0x1c>
    1b1c:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    1b20:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__fp_nan>
    1b24:	11 24       	eor	r1, r1
    1b26:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>

00001b2a <__mulsf3x>:
    1b2a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_split3>
    1b2e:	70 f3       	brcs	.-36     	; 0x1b0c <__mulsf3+0x8>

00001b30 <__mulsf3_pse>:
    1b30:	95 9f       	mul	r25, r21
    1b32:	c1 f3       	breq	.-16     	; 0x1b24 <__mulsf3+0x20>
    1b34:	95 0f       	add	r25, r21
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	55 1f       	adc	r21, r21
    1b3a:	62 9f       	mul	r22, r18
    1b3c:	f0 01       	movw	r30, r0
    1b3e:	72 9f       	mul	r23, r18
    1b40:	bb 27       	eor	r27, r27
    1b42:	f0 0d       	add	r31, r0
    1b44:	b1 1d       	adc	r27, r1
    1b46:	63 9f       	mul	r22, r19
    1b48:	aa 27       	eor	r26, r26
    1b4a:	f0 0d       	add	r31, r0
    1b4c:	b1 1d       	adc	r27, r1
    1b4e:	aa 1f       	adc	r26, r26
    1b50:	64 9f       	mul	r22, r20
    1b52:	66 27       	eor	r22, r22
    1b54:	b0 0d       	add	r27, r0
    1b56:	a1 1d       	adc	r26, r1
    1b58:	66 1f       	adc	r22, r22
    1b5a:	82 9f       	mul	r24, r18
    1b5c:	22 27       	eor	r18, r18
    1b5e:	b0 0d       	add	r27, r0
    1b60:	a1 1d       	adc	r26, r1
    1b62:	62 1f       	adc	r22, r18
    1b64:	73 9f       	mul	r23, r19
    1b66:	b0 0d       	add	r27, r0
    1b68:	a1 1d       	adc	r26, r1
    1b6a:	62 1f       	adc	r22, r18
    1b6c:	83 9f       	mul	r24, r19
    1b6e:	a0 0d       	add	r26, r0
    1b70:	61 1d       	adc	r22, r1
    1b72:	22 1f       	adc	r18, r18
    1b74:	74 9f       	mul	r23, r20
    1b76:	33 27       	eor	r19, r19
    1b78:	a0 0d       	add	r26, r0
    1b7a:	61 1d       	adc	r22, r1
    1b7c:	23 1f       	adc	r18, r19
    1b7e:	84 9f       	mul	r24, r20
    1b80:	60 0d       	add	r22, r0
    1b82:	21 1d       	adc	r18, r1
    1b84:	82 2f       	mov	r24, r18
    1b86:	76 2f       	mov	r23, r22
    1b88:	6a 2f       	mov	r22, r26
    1b8a:	11 24       	eor	r1, r1
    1b8c:	9f 57       	subi	r25, 0x7F	; 127
    1b8e:	50 40       	sbci	r21, 0x00	; 0
    1b90:	9a f0       	brmi	.+38     	; 0x1bb8 <__mulsf3_pse+0x88>
    1b92:	f1 f0       	breq	.+60     	; 0x1bd0 <__mulsf3_pse+0xa0>
    1b94:	88 23       	and	r24, r24
    1b96:	4a f0       	brmi	.+18     	; 0x1baa <__mulsf3_pse+0x7a>
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	66 1f       	adc	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	91 50       	subi	r25, 0x01	; 1
    1ba6:	50 40       	sbci	r21, 0x00	; 0
    1ba8:	a9 f7       	brne	.-22     	; 0x1b94 <__mulsf3_pse+0x64>
    1baa:	9e 3f       	cpi	r25, 0xFE	; 254
    1bac:	51 05       	cpc	r21, r1
    1bae:	80 f0       	brcs	.+32     	; 0x1bd0 <__mulsf3_pse+0xa0>
    1bb0:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__fp_inf>
    1bb4:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_szero>
    1bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bba:	e4 f3       	brlt	.-8      	; 0x1bb4 <__mulsf3_pse+0x84>
    1bbc:	98 3e       	cpi	r25, 0xE8	; 232
    1bbe:	d4 f3       	brlt	.-12     	; 0x1bb4 <__mulsf3_pse+0x84>
    1bc0:	86 95       	lsr	r24
    1bc2:	77 95       	ror	r23
    1bc4:	67 95       	ror	r22
    1bc6:	b7 95       	ror	r27
    1bc8:	f7 95       	ror	r31
    1bca:	e7 95       	ror	r30
    1bcc:	9f 5f       	subi	r25, 0xFF	; 255
    1bce:	c1 f7       	brne	.-16     	; 0x1bc0 <__mulsf3_pse+0x90>
    1bd0:	fe 2b       	or	r31, r30
    1bd2:	88 0f       	add	r24, r24
    1bd4:	91 1d       	adc	r25, r1
    1bd6:	96 95       	lsr	r25
    1bd8:	87 95       	ror	r24
    1bda:	97 f9       	bld	r25, 7
    1bdc:	08 95       	ret

00001bde <malloc>:
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	91 05       	cpc	r25, r1
    1be6:	10 f4       	brcc	.+4      	; 0x1bec <malloc+0xe>
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	e0 91 30 03 	lds	r30, 0x0330
    1bf0:	f0 91 31 03 	lds	r31, 0x0331
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	c0 e0       	ldi	r28, 0x00	; 0
    1bfa:	d0 e0       	ldi	r29, 0x00	; 0
    1bfc:	30 97       	sbiw	r30, 0x00	; 0
    1bfe:	11 f1       	breq	.+68     	; 0x1c44 <malloc+0x66>
    1c00:	40 81       	ld	r20, Z
    1c02:	51 81       	ldd	r21, Z+1	; 0x01
    1c04:	48 17       	cp	r20, r24
    1c06:	59 07       	cpc	r21, r25
    1c08:	c0 f0       	brcs	.+48     	; 0x1c3a <malloc+0x5c>
    1c0a:	48 17       	cp	r20, r24
    1c0c:	59 07       	cpc	r21, r25
    1c0e:	61 f4       	brne	.+24     	; 0x1c28 <malloc+0x4a>
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 97       	sbiw	r28, 0x00	; 0
    1c16:	19 f0       	breq	.+6      	; 0x1c1e <malloc+0x40>
    1c18:	9b 83       	std	Y+3, r25	; 0x03
    1c1a:	8a 83       	std	Y+2, r24	; 0x02
    1c1c:	2b c0       	rjmp	.+86     	; 0x1c74 <malloc+0x96>
    1c1e:	90 93 31 03 	sts	0x0331, r25
    1c22:	80 93 30 03 	sts	0x0330, r24
    1c26:	26 c0       	rjmp	.+76     	; 0x1c74 <malloc+0x96>
    1c28:	21 15       	cp	r18, r1
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	19 f0       	breq	.+6      	; 0x1c34 <malloc+0x56>
    1c2e:	42 17       	cp	r20, r18
    1c30:	53 07       	cpc	r21, r19
    1c32:	18 f4       	brcc	.+6      	; 0x1c3a <malloc+0x5c>
    1c34:	9a 01       	movw	r18, r20
    1c36:	be 01       	movw	r22, r28
    1c38:	df 01       	movw	r26, r30
    1c3a:	ef 01       	movw	r28, r30
    1c3c:	02 80       	ldd	r0, Z+2	; 0x02
    1c3e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c40:	e0 2d       	mov	r30, r0
    1c42:	dc cf       	rjmp	.-72     	; 0x1bfc <malloc+0x1e>
    1c44:	21 15       	cp	r18, r1
    1c46:	31 05       	cpc	r19, r1
    1c48:	09 f1       	breq	.+66     	; 0x1c8c <malloc+0xae>
    1c4a:	28 1b       	sub	r18, r24
    1c4c:	39 0b       	sbc	r19, r25
    1c4e:	24 30       	cpi	r18, 0x04	; 4
    1c50:	31 05       	cpc	r19, r1
    1c52:	90 f4       	brcc	.+36     	; 0x1c78 <malloc+0x9a>
    1c54:	12 96       	adiw	r26, 0x02	; 2
    1c56:	8d 91       	ld	r24, X+
    1c58:	9c 91       	ld	r25, X
    1c5a:	13 97       	sbiw	r26, 0x03	; 3
    1c5c:	61 15       	cp	r22, r1
    1c5e:	71 05       	cpc	r23, r1
    1c60:	21 f0       	breq	.+8      	; 0x1c6a <malloc+0x8c>
    1c62:	fb 01       	movw	r30, r22
    1c64:	93 83       	std	Z+3, r25	; 0x03
    1c66:	82 83       	std	Z+2, r24	; 0x02
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <malloc+0x94>
    1c6a:	90 93 31 03 	sts	0x0331, r25
    1c6e:	80 93 30 03 	sts	0x0330, r24
    1c72:	fd 01       	movw	r30, r26
    1c74:	32 96       	adiw	r30, 0x02	; 2
    1c76:	44 c0       	rjmp	.+136    	; 0x1d00 <malloc+0x122>
    1c78:	fd 01       	movw	r30, r26
    1c7a:	e2 0f       	add	r30, r18
    1c7c:	f3 1f       	adc	r31, r19
    1c7e:	81 93       	st	Z+, r24
    1c80:	91 93       	st	Z+, r25
    1c82:	22 50       	subi	r18, 0x02	; 2
    1c84:	31 09       	sbc	r19, r1
    1c86:	2d 93       	st	X+, r18
    1c88:	3c 93       	st	X, r19
    1c8a:	3a c0       	rjmp	.+116    	; 0x1d00 <malloc+0x122>
    1c8c:	20 91 2e 03 	lds	r18, 0x032E
    1c90:	30 91 2f 03 	lds	r19, 0x032F
    1c94:	23 2b       	or	r18, r19
    1c96:	41 f4       	brne	.+16     	; 0x1ca8 <malloc+0xca>
    1c98:	20 91 02 01 	lds	r18, 0x0102
    1c9c:	30 91 03 01 	lds	r19, 0x0103
    1ca0:	30 93 2f 03 	sts	0x032F, r19
    1ca4:	20 93 2e 03 	sts	0x032E, r18
    1ca8:	20 91 00 01 	lds	r18, 0x0100
    1cac:	30 91 01 01 	lds	r19, 0x0101
    1cb0:	21 15       	cp	r18, r1
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	41 f4       	brne	.+16     	; 0x1cc6 <malloc+0xe8>
    1cb6:	2d b7       	in	r18, 0x3d	; 61
    1cb8:	3e b7       	in	r19, 0x3e	; 62
    1cba:	40 91 04 01 	lds	r20, 0x0104
    1cbe:	50 91 05 01 	lds	r21, 0x0105
    1cc2:	24 1b       	sub	r18, r20
    1cc4:	35 0b       	sbc	r19, r21
    1cc6:	e0 91 2e 03 	lds	r30, 0x032E
    1cca:	f0 91 2f 03 	lds	r31, 0x032F
    1cce:	e2 17       	cp	r30, r18
    1cd0:	f3 07       	cpc	r31, r19
    1cd2:	a0 f4       	brcc	.+40     	; 0x1cfc <malloc+0x11e>
    1cd4:	2e 1b       	sub	r18, r30
    1cd6:	3f 0b       	sbc	r19, r31
    1cd8:	28 17       	cp	r18, r24
    1cda:	39 07       	cpc	r19, r25
    1cdc:	78 f0       	brcs	.+30     	; 0x1cfc <malloc+0x11e>
    1cde:	ac 01       	movw	r20, r24
    1ce0:	4e 5f       	subi	r20, 0xFE	; 254
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	24 17       	cp	r18, r20
    1ce6:	35 07       	cpc	r19, r21
    1ce8:	48 f0       	brcs	.+18     	; 0x1cfc <malloc+0x11e>
    1cea:	4e 0f       	add	r20, r30
    1cec:	5f 1f       	adc	r21, r31
    1cee:	50 93 2f 03 	sts	0x032F, r21
    1cf2:	40 93 2e 03 	sts	0x032E, r20
    1cf6:	81 93       	st	Z+, r24
    1cf8:	91 93       	st	Z+, r25
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <malloc+0x122>
    1cfc:	e0 e0       	ldi	r30, 0x00	; 0
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	cf 01       	movw	r24, r30
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	08 95       	ret

00001d08 <free>:
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <free+0xe>
    1d14:	8c c0       	rjmp	.+280    	; 0x1e2e <free+0x126>
    1d16:	fc 01       	movw	r30, r24
    1d18:	32 97       	sbiw	r30, 0x02	; 2
    1d1a:	13 82       	std	Z+3, r1	; 0x03
    1d1c:	12 82       	std	Z+2, r1	; 0x02
    1d1e:	00 91 30 03 	lds	r16, 0x0330
    1d22:	10 91 31 03 	lds	r17, 0x0331
    1d26:	01 15       	cp	r16, r1
    1d28:	11 05       	cpc	r17, r1
    1d2a:	81 f4       	brne	.+32     	; 0x1d4c <free+0x44>
    1d2c:	20 81       	ld	r18, Z
    1d2e:	31 81       	ldd	r19, Z+1	; 0x01
    1d30:	82 0f       	add	r24, r18
    1d32:	93 1f       	adc	r25, r19
    1d34:	20 91 2e 03 	lds	r18, 0x032E
    1d38:	30 91 2f 03 	lds	r19, 0x032F
    1d3c:	28 17       	cp	r18, r24
    1d3e:	39 07       	cpc	r19, r25
    1d40:	79 f5       	brne	.+94     	; 0x1da0 <free+0x98>
    1d42:	f0 93 2f 03 	sts	0x032F, r31
    1d46:	e0 93 2e 03 	sts	0x032E, r30
    1d4a:	71 c0       	rjmp	.+226    	; 0x1e2e <free+0x126>
    1d4c:	d8 01       	movw	r26, r16
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	ae 17       	cp	r26, r30
    1d54:	bf 07       	cpc	r27, r31
    1d56:	50 f4       	brcc	.+20     	; 0x1d6c <free+0x64>
    1d58:	12 96       	adiw	r26, 0x02	; 2
    1d5a:	2d 91       	ld	r18, X+
    1d5c:	3c 91       	ld	r19, X
    1d5e:	13 97       	sbiw	r26, 0x03	; 3
    1d60:	ad 01       	movw	r20, r26
    1d62:	21 15       	cp	r18, r1
    1d64:	31 05       	cpc	r19, r1
    1d66:	09 f1       	breq	.+66     	; 0x1daa <free+0xa2>
    1d68:	d9 01       	movw	r26, r18
    1d6a:	f3 cf       	rjmp	.-26     	; 0x1d52 <free+0x4a>
    1d6c:	9d 01       	movw	r18, r26
    1d6e:	da 01       	movw	r26, r20
    1d70:	33 83       	std	Z+3, r19	; 0x03
    1d72:	22 83       	std	Z+2, r18	; 0x02
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	86 0f       	add	r24, r22
    1d7a:	97 1f       	adc	r25, r23
    1d7c:	82 17       	cp	r24, r18
    1d7e:	93 07       	cpc	r25, r19
    1d80:	69 f4       	brne	.+26     	; 0x1d9c <free+0x94>
    1d82:	ec 01       	movw	r28, r24
    1d84:	28 81       	ld	r18, Y
    1d86:	39 81       	ldd	r19, Y+1	; 0x01
    1d88:	26 0f       	add	r18, r22
    1d8a:	37 1f       	adc	r19, r23
    1d8c:	2e 5f       	subi	r18, 0xFE	; 254
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	31 83       	std	Z+1, r19	; 0x01
    1d92:	20 83       	st	Z, r18
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	93 83       	std	Z+3, r25	; 0x03
    1d9a:	82 83       	std	Z+2, r24	; 0x02
    1d9c:	45 2b       	or	r20, r21
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <free+0xa2>
    1da0:	f0 93 31 03 	sts	0x0331, r31
    1da4:	e0 93 30 03 	sts	0x0330, r30
    1da8:	42 c0       	rjmp	.+132    	; 0x1e2e <free+0x126>
    1daa:	13 96       	adiw	r26, 0x03	; 3
    1dac:	fc 93       	st	X, r31
    1dae:	ee 93       	st	-X, r30
    1db0:	12 97       	sbiw	r26, 0x02	; 2
    1db2:	ed 01       	movw	r28, r26
    1db4:	49 91       	ld	r20, Y+
    1db6:	59 91       	ld	r21, Y+
    1db8:	9e 01       	movw	r18, r28
    1dba:	24 0f       	add	r18, r20
    1dbc:	35 1f       	adc	r19, r21
    1dbe:	e2 17       	cp	r30, r18
    1dc0:	f3 07       	cpc	r31, r19
    1dc2:	71 f4       	brne	.+28     	; 0x1de0 <free+0xd8>
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	84 0f       	add	r24, r20
    1dca:	95 1f       	adc	r25, r21
    1dcc:	02 96       	adiw	r24, 0x02	; 2
    1dce:	11 96       	adiw	r26, 0x01	; 1
    1dd0:	9c 93       	st	X, r25
    1dd2:	8e 93       	st	-X, r24
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	13 96       	adiw	r26, 0x03	; 3
    1dda:	9c 93       	st	X, r25
    1ddc:	8e 93       	st	-X, r24
    1dde:	12 97       	sbiw	r26, 0x02	; 2
    1de0:	e0 e0       	ldi	r30, 0x00	; 0
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	d8 01       	movw	r26, r16
    1de6:	12 96       	adiw	r26, 0x02	; 2
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	13 97       	sbiw	r26, 0x03	; 3
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <free+0xf0>
    1df2:	f8 01       	movw	r30, r16
    1df4:	8c 01       	movw	r16, r24
    1df6:	f6 cf       	rjmp	.-20     	; 0x1de4 <free+0xdc>
    1df8:	8d 91       	ld	r24, X+
    1dfa:	9c 91       	ld	r25, X
    1dfc:	98 01       	movw	r18, r16
    1dfe:	2e 5f       	subi	r18, 0xFE	; 254
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	82 0f       	add	r24, r18
    1e04:	93 1f       	adc	r25, r19
    1e06:	20 91 2e 03 	lds	r18, 0x032E
    1e0a:	30 91 2f 03 	lds	r19, 0x032F
    1e0e:	28 17       	cp	r18, r24
    1e10:	39 07       	cpc	r19, r25
    1e12:	69 f4       	brne	.+26     	; 0x1e2e <free+0x126>
    1e14:	30 97       	sbiw	r30, 0x00	; 0
    1e16:	29 f4       	brne	.+10     	; 0x1e22 <free+0x11a>
    1e18:	10 92 31 03 	sts	0x0331, r1
    1e1c:	10 92 30 03 	sts	0x0330, r1
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <free+0x11e>
    1e22:	13 82       	std	Z+3, r1	; 0x03
    1e24:	12 82       	std	Z+2, r1	; 0x02
    1e26:	10 93 2f 03 	sts	0x032F, r17
    1e2a:	00 93 2e 03 	sts	0x032E, r16
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	08 95       	ret

00001e38 <_exit>:
    1e38:	f8 94       	cli

00001e3a <__stop_program>:
    1e3a:	ff cf       	rjmp	.-2      	; 0x1e3a <__stop_program>
